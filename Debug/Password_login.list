
Password_login.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074cc  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ea8  08007678  08007678  00008678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008520  08008520  0000a07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008520  08008520  00009520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008528  08008528  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008528  08008528  00009528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800852c  0800852c  0000952c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08008530  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  20000080  080085ac  0000a080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  080085ac  0000a468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000191af  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000341e  00000000  00000000  0002325b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  00026680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001118  00000000  00000000  00027c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b342  00000000  00000000  00028d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b79d  00000000  00000000  000540d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010780f  00000000  00000000  0006f86f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017707e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060a8  00000000  00000000  001770c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0017d16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000080 	.word	0x20000080
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007660 	.word	0x08007660

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000084 	.word	0x20000084
 80001e8:	08007660 	.word	0x08007660

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b085      	sub	sp, #20
 800051c:	af02      	add	r7, sp, #8
 800051e:	4604      	mov	r4, r0
 8000520:	4608      	mov	r0, r1
 8000522:	4611      	mov	r1, r2
 8000524:	461a      	mov	r2, r3
 8000526:	4623      	mov	r3, r4
 8000528:	80fb      	strh	r3, [r7, #6]
 800052a:	4603      	mov	r3, r0
 800052c:	80bb      	strh	r3, [r7, #4]
 800052e:	460b      	mov	r3, r1
 8000530:	807b      	strh	r3, [r7, #2]
 8000532:	4613      	mov	r3, r2
 8000534:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000536:	88f8      	ldrh	r0, [r7, #6]
 8000538:	88b9      	ldrh	r1, [r7, #4]
 800053a:	887a      	ldrh	r2, [r7, #2]
 800053c:	883c      	ldrh	r4, [r7, #0]
 800053e:	8b3b      	ldrh	r3, [r7, #24]
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	4623      	mov	r3, r4
 8000544:	f000 fb3e 	bl	8000bc4 <ST7735_FillRectangle>
	while (!spi_ready ){};
 8000548:	bf00      	nop
 800054a:	4b04      	ldr	r3, [pc, #16]	@ (800055c <fillRect+0x44>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d0fb      	beq.n	800054a <fillRect+0x32>


}
 8000552:	bf00      	nop
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	bd90      	pop	{r4, r7, pc}
 800055c:	20000000 	.word	0x20000000

08000560 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af02      	add	r7, sp, #8
 8000566:	4603      	mov	r3, r0
 8000568:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 800056a:	4b08      	ldr	r3, [pc, #32]	@ (800058c <fillScreen+0x2c>)
 800056c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000570:	4b07      	ldr	r3, [pc, #28]	@ (8000590 <fillScreen+0x30>)
 8000572:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000576:	88fb      	ldrh	r3, [r7, #6]
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	460b      	mov	r3, r1
 800057c:	2100      	movs	r1, #0
 800057e:	2000      	movs	r0, #0
 8000580:	f7ff ffca 	bl	8000518 <fillRect>
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	2000009c 	.word	0x2000009c
 8000590:	2000009e 	.word	0x2000009e

08000594 <HAL_SPI_ErrorCallback>:
//	         spi_ready = 1;  // if you're using a flagc
//	         //HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
//	     }
// }

 void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
     if (hspi->Instance == ST7735_SPI_PORT.Instance) {
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	4b12      	ldr	r3, [pc, #72]	@ (80005ec <HAL_SPI_ErrorCallback+0x58>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d11c      	bne.n	80005e2 <HAL_SPI_ErrorCallback+0x4e>
         // Clean up DMA state on error
         if (dma_buffer != NULL) {
 80005a8:	4b11      	ldr	r3, [pc, #68]	@ (80005f0 <HAL_SPI_ErrorCallback+0x5c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d00a      	beq.n	80005c6 <HAL_SPI_ErrorCallback+0x32>
             free(dma_buffer);
 80005b0:	4b0f      	ldr	r3, [pc, #60]	@ (80005f0 <HAL_SPI_ErrorCallback+0x5c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f006 feff 	bl	80073b8 <free>
             dma_buffer = NULL;
 80005ba:	4b0d      	ldr	r3, [pc, #52]	@ (80005f0 <HAL_SPI_ErrorCallback+0x5c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
             dma_buffer_size = 0;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	@ (80005f4 <HAL_SPI_ErrorCallback+0x60>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
         }
         ST7735_Unselect();
 80005c6:	f000 f87d 	bl	80006c4 <ST7735_Unselect>
         spi_ready = 1;
 80005ca:	4b0b      	ldr	r3, [pc, #44]	@ (80005f8 <HAL_SPI_ErrorCallback+0x64>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	701a      	strb	r2, [r3, #0]
         dma_active = 0;
 80005d0:	4b0a      	ldr	r3, [pc, #40]	@ (80005fc <HAL_SPI_ErrorCallback+0x68>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	701a      	strb	r2, [r3, #0]

         // Optional: Reset SPI peripheral if needed
         HAL_SPI_DeInit(&ST7735_SPI_PORT);
 80005d6:	4805      	ldr	r0, [pc, #20]	@ (80005ec <HAL_SPI_ErrorCallback+0x58>)
 80005d8:	f004 f96b 	bl	80048b2 <HAL_SPI_DeInit>
         HAL_SPI_Init(&ST7735_SPI_PORT);
 80005dc:	4803      	ldr	r0, [pc, #12]	@ (80005ec <HAL_SPI_ErrorCallback+0x58>)
 80005de:	f004 f8c5 	bl	800476c <HAL_SPI_Init>
     }
 }
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000198 	.word	0x20000198
 80005f0:	200000a8 	.word	0x200000a8
 80005f4:	200000ac 	.word	0x200000ac
 80005f8:	20000000 	.word	0x20000000
 80005fc:	200000a5 	.word	0x200000a5

08000600 <HAL_SPI_TxCpltCallback>:

 void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
     if (hspi->Instance == ST7735_SPI_PORT.Instance) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <HAL_SPI_TxCpltCallback+0x4c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	429a      	cmp	r2, r3
 8000612:	d116      	bne.n	8000642 <HAL_SPI_TxCpltCallback+0x42>
         // Free the previous DMA buffer if it exists
         if (dma_buffer != NULL) {
 8000614:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <HAL_SPI_TxCpltCallback+0x50>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00a      	beq.n	8000632 <HAL_SPI_TxCpltCallback+0x32>
             free(dma_buffer);
 800061c:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <HAL_SPI_TxCpltCallback+0x50>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4618      	mov	r0, r3
 8000622:	f006 fec9 	bl	80073b8 <free>
             dma_buffer = NULL;
 8000626:	4b0a      	ldr	r3, [pc, #40]	@ (8000650 <HAL_SPI_TxCpltCallback+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
             dma_buffer_size = 0;
 800062c:	4b09      	ldr	r3, [pc, #36]	@ (8000654 <HAL_SPI_TxCpltCallback+0x54>)
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
         }

         ST7735_Unselect();
 8000632:	f000 f847 	bl	80006c4 <ST7735_Unselect>
         spi_ready = 1;      // SPI is now ready
 8000636:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <HAL_SPI_TxCpltCallback+0x58>)
 8000638:	2201      	movs	r2, #1
 800063a:	701a      	strb	r2, [r3, #0]
         dma_active = 0;     // DMA is no longer active
 800063c:	4b07      	ldr	r3, [pc, #28]	@ (800065c <HAL_SPI_TxCpltCallback+0x5c>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
     }
 }
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000198 	.word	0x20000198
 8000650:	200000a8 	.word	0x200000a8
 8000654:	200000ac 	.word	0x200000ac
 8000658:	20000000 	.word	0x20000000
 800065c:	200000a5 	.word	0x200000a5

08000660 <ST7735_WaitForDMA>:
//          dma_busy = 0;
//          // Optionally trigger next transfer here
//      }
//  }

 void ST7735_WaitForDMA(void) {
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
     uint32_t timeout = 1000;  // Reasonable timeout
 8000666:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800066a:	607b      	str	r3, [r7, #4]
     while(dma_active && timeout--) {
 800066c:	e000      	b.n	8000670 <ST7735_WaitForDMA+0x10>
         __NOP();  // Wait or yield to RTOS if you're using one
 800066e:	bf00      	nop
     while(dma_active && timeout--) {
 8000670:	4b0c      	ldr	r3, [pc, #48]	@ (80006a4 <ST7735_WaitForDMA+0x44>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	2b00      	cmp	r3, #0
 8000678:	d004      	beq.n	8000684 <ST7735_WaitForDMA+0x24>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	1e5a      	subs	r2, r3, #1
 800067e:	607a      	str	r2, [r7, #4]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d1f4      	bne.n	800066e <ST7735_WaitForDMA+0xe>
     }
     if (timeout == 0) {
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d105      	bne.n	8000696 <ST7735_WaitForDMA+0x36>
         // Handle timeout error
         dma_active = 0;
 800068a:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <ST7735_WaitForDMA+0x44>)
 800068c:	2200      	movs	r2, #0
 800068e:	701a      	strb	r2, [r3, #0]
         spi_ready = 1;
 8000690:	4b05      	ldr	r3, [pc, #20]	@ (80006a8 <ST7735_WaitForDMA+0x48>)
 8000692:	2201      	movs	r2, #1
 8000694:	701a      	strb	r2, [r3, #0]
     }
 }
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	200000a5 	.word	0x200000a5
 80006a8:	20000000 	.word	0x20000000

080006ac <ST7735_Select>:


void ST7735_Select()
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);//to select the LCD and start the communication CS=0
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006b6:	4802      	ldr	r0, [pc, #8]	@ (80006c0 <ST7735_Select+0x14>)
 80006b8:	f002 fcc4 	bl	8003044 <HAL_GPIO_WritePin>
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	48000c00 	.word	0x48000c00

080006c4 <ST7735_Unselect>:

void ST7735_Unselect()
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);//to deselect the LCD set CS=1
 80006c8:	2201      	movs	r2, #1
 80006ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006ce:	4802      	ldr	r0, [pc, #8]	@ (80006d8 <ST7735_Unselect+0x14>)
 80006d0:	f002 fcb8 	bl	8003044 <HAL_GPIO_WritePin>
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	48000c00 	.word	0x48000c00

080006dc <ST7735_Reset>:

void ST7735_Reset()
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);//first reset =0
 80006e0:	2200      	movs	r2, #0
 80006e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006e6:	4807      	ldr	r0, [pc, #28]	@ (8000704 <ST7735_Reset+0x28>)
 80006e8:	f002 fcac 	bl	8003044 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80006ec:	2005      	movs	r0, #5
 80006ee:	f001 fa25 	bl	8001b3c <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);//reset=1
 80006f2:	2201      	movs	r2, #1
 80006f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006f8:	4802      	ldr	r0, [pc, #8]	@ (8000704 <ST7735_Reset+0x28>)
 80006fa:	f002 fca3 	bl	8003044 <HAL_GPIO_WritePin>
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	48000c00 	.word	0x48000c00

08000708 <ST7735_WriteCommand>:
//    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);//to send data DC=1
//    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size,HAL_MAX_DELAY);
//	//HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
//
//}
void ST7735_WriteCommand(uint8_t cmd) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
    ST7735_WaitForDMA();  // Wait for any DMA to complete
 8000712:	f7ff ffa5 	bl	8000660 <ST7735_WaitForDMA>

    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800071c:	4806      	ldr	r0, [pc, #24]	@ (8000738 <ST7735_WriteCommand+0x30>)
 800071e:	f002 fc91 	bl	8003044 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, 1, HAL_MAX_DELAY);
 8000722:	1df9      	adds	r1, r7, #7
 8000724:	f04f 33ff 	mov.w	r3, #4294967295
 8000728:	2201      	movs	r2, #1
 800072a:	4804      	ldr	r0, [pc, #16]	@ (800073c <ST7735_WriteCommand+0x34>)
 800072c:	f004 f8e9 	bl	8004902 <HAL_SPI_Transmit>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	48001400 	.word	0x48001400
 800073c:	20000198 	.word	0x20000198

08000740 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
    ST7735_WaitForDMA();  // Wait for any DMA to complete
 800074a:	f7ff ff89 	bl	8000660 <ST7735_WaitForDMA>

    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000754:	4807      	ldr	r0, [pc, #28]	@ (8000774 <ST7735_WriteData+0x34>)
 8000756:	f002 fc75 	bl	8003044 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	b29a      	uxth	r2, r3
 800075e:	f04f 33ff 	mov.w	r3, #4294967295
 8000762:	6879      	ldr	r1, [r7, #4]
 8000764:	4804      	ldr	r0, [pc, #16]	@ (8000778 <ST7735_WriteData+0x38>)
 8000766:	f004 f8cc 	bl	8004902 <HAL_SPI_Transmit>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	48001400 	.word	0x48001400
 8000778:	20000198 	.word	0x20000198

0800077c <DisplayInit>:

void DisplayInit(const uint8_t *addr)//the pointer that points to the series of commands which has the list of commands,arguments total, arguments,optional delay
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;//the number of command is stored in numCommand and the pointer is incremented
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	1c5a      	adds	r2, r3, #1
 8000788:	607a      	str	r2, [r7, #4]
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {// the while loop will follow with command is decremented until total commands is zero
 800078e:	e034      	b.n	80007fa <DisplayInit+0x7e>
        uint8_t cmd = *addr++;//cmd stores the command and pointer is updated
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	1c5a      	adds	r2, r3, #1
 8000794:	607a      	str	r2, [r7, #4]
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);//the command is sent via SPI_DMA
 800079a:	7afb      	ldrb	r3, [r7, #11]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ffb3 	bl	8000708 <ST7735_WriteCommand>

        numArgs = *addr++;//the pointer stores the number of arguments and increments
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	1c5a      	adds	r2, r3, #1
 80007a6:	607a      	str	r2, [r7, #4]
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;//if the delay is calculated by taking AND of number of argument and delay
 80007ac:	7abb      	ldrb	r3, [r7, #10]
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007b4:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;//if delay is same the num argument and the invert of DELAY AND will give zero
 80007b6:	7abb      	ldrb	r3, [r7, #10]
 80007b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80007bc:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {//if it is more then 1 write the arguments
 80007be:	7abb      	ldrb	r3, [r7, #10]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d008      	beq.n	80007d6 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);//send the buffer and buffer's size
 80007c4:	7abb      	ldrb	r3, [r7, #10]
 80007c6:	4619      	mov	r1, r3
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f7ff ffb9 	bl	8000740 <ST7735_WriteData>
            addr += numArgs;//adder pointer is added by numArgs
 80007ce:	7abb      	ldrb	r3, [r7, #10]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	4413      	add	r3, r2
 80007d4:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80007d6:	89bb      	ldrh	r3, [r7, #12]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d00e      	beq.n	80007fa <DisplayInit+0x7e>
            ms = *addr++;//the pointer is pointed in ms then incremented
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	1c5a      	adds	r2, r3, #1
 80007e0:	607a      	str	r2, [r7, #4]
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;//if the ms is 25 update it to 500
 80007e6:	89bb      	ldrh	r3, [r7, #12]
 80007e8:	2bff      	cmp	r3, #255	@ 0xff
 80007ea:	d102      	bne.n	80007f2 <DisplayInit+0x76>
 80007ec:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80007f0:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80007f2:	89bb      	ldrh	r3, [r7, #12]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 f9a1 	bl	8001b3c <HAL_Delay>
    while(numCommands--) {// the while loop will follow with command is decremented until total commands is zero
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	1e5a      	subs	r2, r3, #1
 80007fe:	73fa      	strb	r2, [r7, #15]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d1c5      	bne.n	8000790 <DisplayInit+0x14>
        }
    }
}
 8000804:	bf00      	nop
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	4604      	mov	r4, r0
 8000818:	4608      	mov	r0, r1
 800081a:	4611      	mov	r1, r2
 800081c:	461a      	mov	r2, r3
 800081e:	4623      	mov	r3, r4
 8000820:	71fb      	strb	r3, [r7, #7]
 8000822:	4603      	mov	r3, r0
 8000824:	71bb      	strb	r3, [r7, #6]
 8000826:	460b      	mov	r3, r1
 8000828:	717b      	strb	r3, [r7, #5]
 800082a:	4613      	mov	r3, r2
 800082c:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);//column address
 800082e:	202a      	movs	r0, #42	@ 0x2a
 8000830:	f7ff ff6a 	bl	8000708 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000834:	2300      	movs	r3, #0
 8000836:	733b      	strb	r3, [r7, #12]
 8000838:	4b17      	ldr	r3, [pc, #92]	@ (8000898 <ST7735_SetAddressWindow+0x88>)
 800083a:	781a      	ldrb	r2, [r3, #0]
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	4413      	add	r3, r2
 8000840:	b2db      	uxtb	r3, r3
 8000842:	737b      	strb	r3, [r7, #13]
 8000844:	2300      	movs	r3, #0
 8000846:	73bb      	strb	r3, [r7, #14]
 8000848:	4b13      	ldr	r3, [pc, #76]	@ (8000898 <ST7735_SetAddressWindow+0x88>)
 800084a:	781a      	ldrb	r2, [r3, #0]
 800084c:	797b      	ldrb	r3, [r7, #5]
 800084e:	4413      	add	r3, r2
 8000850:	b2db      	uxtb	r3, r3
 8000852:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	2104      	movs	r1, #4
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ff70 	bl	8000740 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);// row address
 8000860:	202b      	movs	r0, #43	@ 0x2b
 8000862:	f7ff ff51 	bl	8000708 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000866:	4b0d      	ldr	r3, [pc, #52]	@ (800089c <ST7735_SetAddressWindow+0x8c>)
 8000868:	781a      	ldrb	r2, [r3, #0]
 800086a:	79bb      	ldrb	r3, [r7, #6]
 800086c:	4413      	add	r3, r2
 800086e:	b2db      	uxtb	r3, r3
 8000870:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000872:	4b0a      	ldr	r3, [pc, #40]	@ (800089c <ST7735_SetAddressWindow+0x8c>)
 8000874:	781a      	ldrb	r2, [r3, #0]
 8000876:	793b      	ldrb	r3, [r7, #4]
 8000878:	4413      	add	r3, r2
 800087a:	b2db      	uxtb	r3, r3
 800087c:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	2104      	movs	r1, #4
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ff5b 	bl	8000740 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800088a:	202c      	movs	r0, #44	@ 0x2c
 800088c:	f7ff ff3c 	bl	8000708 <ST7735_WriteCommand>
}
 8000890:	bf00      	nop
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	bd90      	pop	{r4, r7, pc}
 8000898:	200000a3 	.word	0x200000a3
 800089c:	200000a4 	.word	0x200000a4

080008a0 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 80008aa:	f7ff feff 	bl	80006ac <ST7735_Select>
    ST7735_Reset();
 80008ae:	f7ff ff15 	bl	80006dc <ST7735_Reset>
    DisplayInit(init_cmds1);
 80008b2:	480c      	ldr	r0, [pc, #48]	@ (80008e4 <ST7735_Init+0x44>)
 80008b4:	f7ff ff62 	bl	800077c <DisplayInit>
    DisplayInit(init_cmds2);
 80008b8:	480b      	ldr	r0, [pc, #44]	@ (80008e8 <ST7735_Init+0x48>)
 80008ba:	f7ff ff5f 	bl	800077c <DisplayInit>
    DisplayInit(init_cmds3);
 80008be:	480b      	ldr	r0, [pc, #44]	@ (80008ec <ST7735_Init+0x4c>)
 80008c0:	f7ff ff5c 	bl	800077c <DisplayInit>
//    The color order (RGB vs BGR).
#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 80008c4:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <ST7735_Init+0x50>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 80008ca:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <ST7735_Init+0x54>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f810 	bl	80008f8 <ST7735_SetRotation>
    ST7735_Unselect();
 80008d8:	f7ff fef4 	bl	80006c4 <ST7735_Unselect>

}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	080076e8 	.word	0x080076e8
 80008e8:	08007720 	.word	0x08007720
 80008ec:	08007730 	.word	0x08007730
 80008f0:	200000a1 	.word	0x200000a1
 80008f4:	200000a2 	.word	0x200000a2

080008f8 <ST7735_SetRotation>:
//
//2: upside-down portrait (rotated 180°)
//
//3: landscape (rotated 270°)
void ST7735_SetRotation(uint8_t m)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	f003 0303 	and.w	r3, r3, #3
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4b33      	ldr	r3, [pc, #204]	@ (80009dc <ST7735_SetRotation+0xe4>)
 8000910:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8000912:	4b32      	ldr	r3, [pc, #200]	@ (80009dc <ST7735_SetRotation+0xe4>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b03      	cmp	r3, #3
 8000918:	d84e      	bhi.n	80009b8 <ST7735_SetRotation+0xc0>
 800091a:	a201      	add	r2, pc, #4	@ (adr r2, 8000920 <ST7735_SetRotation+0x28>)
 800091c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000920:	08000931 	.word	0x08000931
 8000924:	08000953 	.word	0x08000953
 8000928:	08000975 	.word	0x08000975
 800092c:	08000997 	.word	0x08000997
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;//selecting the right madctl bit
 8000930:	23c0      	movs	r3, #192	@ 0xc0
 8000932:	73fb      	strb	r3, [r7, #15]
      //ST7735_MADCTL_MX → mirror X (flip left-right)
//      ST7735_MADCTL_MY → mirror Y (flip top-bottom)
//      ST7735_MADCTL_MV → swap X and Y (transpose image axes)
//      ST7735_MADCTL_BGR / RGB → color order (Blue-Green-Red or Red-Green-Blue)
      _height = ST7735_HEIGHT;
 8000934:	4b2a      	ldr	r3, [pc, #168]	@ (80009e0 <ST7735_SetRotation+0xe8>)
 8000936:	22a0      	movs	r2, #160	@ 0xa0
 8000938:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800093a:	4b2a      	ldr	r3, [pc, #168]	@ (80009e4 <ST7735_SetRotation+0xec>)
 800093c:	2280      	movs	r2, #128	@ 0x80
 800093e:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8000940:	4b29      	ldr	r3, [pc, #164]	@ (80009e8 <ST7735_SetRotation+0xf0>)
 8000942:	781a      	ldrb	r2, [r3, #0]
 8000944:	4b29      	ldr	r3, [pc, #164]	@ (80009ec <ST7735_SetRotation+0xf4>)
 8000946:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8000948:	4b29      	ldr	r3, [pc, #164]	@ (80009f0 <ST7735_SetRotation+0xf8>)
 800094a:	781a      	ldrb	r2, [r3, #0]
 800094c:	4b29      	ldr	r3, [pc, #164]	@ (80009f4 <ST7735_SetRotation+0xfc>)
 800094e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000950:	e032      	b.n	80009b8 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000952:	23a0      	movs	r3, #160	@ 0xa0
 8000954:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000956:	4b23      	ldr	r3, [pc, #140]	@ (80009e4 <ST7735_SetRotation+0xec>)
 8000958:	22a0      	movs	r2, #160	@ 0xa0
 800095a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 800095c:	4b20      	ldr	r3, [pc, #128]	@ (80009e0 <ST7735_SetRotation+0xe8>)
 800095e:	2280      	movs	r2, #128	@ 0x80
 8000960:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000962:	4b21      	ldr	r3, [pc, #132]	@ (80009e8 <ST7735_SetRotation+0xf0>)
 8000964:	781a      	ldrb	r2, [r3, #0]
 8000966:	4b23      	ldr	r3, [pc, #140]	@ (80009f4 <ST7735_SetRotation+0xfc>)
 8000968:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800096a:	4b21      	ldr	r3, [pc, #132]	@ (80009f0 <ST7735_SetRotation+0xf8>)
 800096c:	781a      	ldrb	r2, [r3, #0]
 800096e:	4b1f      	ldr	r3, [pc, #124]	@ (80009ec <ST7735_SetRotation+0xf4>)
 8000970:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000972:	e021      	b.n	80009b8 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8000974:	2300      	movs	r3, #0
 8000976:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000978:	4b19      	ldr	r3, [pc, #100]	@ (80009e0 <ST7735_SetRotation+0xe8>)
 800097a:	22a0      	movs	r2, #160	@ 0xa0
 800097c:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800097e:	4b19      	ldr	r3, [pc, #100]	@ (80009e4 <ST7735_SetRotation+0xec>)
 8000980:	2280      	movs	r2, #128	@ 0x80
 8000982:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8000984:	4b18      	ldr	r3, [pc, #96]	@ (80009e8 <ST7735_SetRotation+0xf0>)
 8000986:	781a      	ldrb	r2, [r3, #0]
 8000988:	4b18      	ldr	r3, [pc, #96]	@ (80009ec <ST7735_SetRotation+0xf4>)
 800098a:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 800098c:	4b18      	ldr	r3, [pc, #96]	@ (80009f0 <ST7735_SetRotation+0xf8>)
 800098e:	781a      	ldrb	r2, [r3, #0]
 8000990:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <ST7735_SetRotation+0xfc>)
 8000992:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000994:	e010      	b.n	80009b8 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000996:	2360      	movs	r3, #96	@ 0x60
 8000998:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800099a:	4b12      	ldr	r3, [pc, #72]	@ (80009e4 <ST7735_SetRotation+0xec>)
 800099c:	22a0      	movs	r2, #160	@ 0xa0
 800099e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <ST7735_SetRotation+0xe8>)
 80009a2:	2280      	movs	r2, #128	@ 0x80
 80009a4:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80009a6:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <ST7735_SetRotation+0xf0>)
 80009a8:	781a      	ldrb	r2, [r3, #0]
 80009aa:	4b12      	ldr	r3, [pc, #72]	@ (80009f4 <ST7735_SetRotation+0xfc>)
 80009ac:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80009ae:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <ST7735_SetRotation+0xf8>)
 80009b0:	781a      	ldrb	r2, [r3, #0]
 80009b2:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <ST7735_SetRotation+0xf4>)
 80009b4:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80009b6:	bf00      	nop
  }
  ST7735_Select();
 80009b8:	f7ff fe78 	bl	80006ac <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 80009bc:	2036      	movs	r0, #54	@ 0x36
 80009be:	f7ff fea3 	bl	8000708 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 80009c2:	f107 030f 	add.w	r3, r7, #15
 80009c6:	2101      	movs	r1, #1
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff feb9 	bl	8000740 <ST7735_WriteData>
  ST7735_Unselect();
 80009ce:	f7ff fe79 	bl	80006c4 <ST7735_Unselect>
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000a0 	.word	0x200000a0
 80009e0:	2000009e 	.word	0x2000009e
 80009e4:	2000009c 	.word	0x2000009c
 80009e8:	200000a1 	.word	0x200000a1
 80009ec:	200000a3 	.word	0x200000a3
 80009f0:	200000a2 	.word	0x200000a2
 80009f4:	200000a4 	.word	0x200000a4

080009f8 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80009f8:	b082      	sub	sp, #8
 80009fa:	b590      	push	{r4, r7, lr}
 80009fc:	b089      	sub	sp, #36	@ 0x24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a02:	4603      	mov	r3, r0
 8000a04:	80fb      	strh	r3, [r7, #6]
 8000a06:	460b      	mov	r3, r1
 8000a08:	80bb      	strh	r3, [r7, #4]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000a0e:	88fb      	ldrh	r3, [r7, #6]
 8000a10:	b2d8      	uxtb	r0, r3
 8000a12:	88bb      	ldrh	r3, [r7, #4]
 8000a14:	b2d9      	uxtb	r1, r3
 8000a16:	88fb      	ldrh	r3, [r7, #6]
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000a1e:	4413      	add	r3, r2
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	3b01      	subs	r3, #1
 8000a24:	b2dc      	uxtb	r4, r3
 8000a26:	88bb      	ldrh	r3, [r7, #4]
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000a2e:	4413      	add	r3, r2
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	3b01      	subs	r3, #1
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	4622      	mov	r2, r4
 8000a38:	f7ff feea 	bl	8000810 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
 8000a40:	e043      	b.n	8000aca <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000a42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a44:	78fb      	ldrb	r3, [r7, #3]
 8000a46:	3b20      	subs	r3, #32
 8000a48:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8000a4c:	fb01 f303 	mul.w	r3, r1, r3
 8000a50:	4619      	mov	r1, r3
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	440b      	add	r3, r1
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	4413      	add	r3, r2
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61bb      	str	r3, [r7, #24]
 8000a62:	e029      	b.n	8000ab8 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000a64:	697a      	ldr	r2, [r7, #20]
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d00e      	beq.n	8000a92 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000a74:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000a76:	0a1b      	lsrs	r3, r3, #8
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	743b      	strb	r3, [r7, #16]
 8000a7e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	2102      	movs	r1, #2
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff fe58 	bl	8000740 <ST7735_WriteData>
 8000a90:	e00f      	b.n	8000ab2 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000a92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000a96:	0a1b      	lsrs	r3, r3, #8
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	733b      	strb	r3, [r7, #12]
 8000a9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	2102      	movs	r1, #2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fe47 	bl	8000740 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	61bb      	str	r3, [r7, #24]
 8000ab8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000abc:	461a      	mov	r2, r3
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d3cf      	bcc.n	8000a64 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	61fb      	str	r3, [r7, #28]
 8000aca:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000ace:	461a      	mov	r2, r3
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d3b5      	bcc.n	8000a42 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000ad6:	bf00      	nop
 8000ad8:	bf00      	nop
 8000ada:	3724      	adds	r7, #36	@ 0x24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000ae2:	b002      	add	sp, #8
 8000ae4:	4770      	bx	lr
	...

08000ae8 <ST7735_WriteString>:
//        str++;
//    }
//
//    ST7735_Unselect();
//}
void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000ae8:	b082      	sub	sp, #8
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b086      	sub	sp, #24
 8000aee:	af04      	add	r7, sp, #16
 8000af0:	603a      	str	r2, [r7, #0]
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	4603      	mov	r3, r0
 8000af6:	80fb      	strh	r3, [r7, #6]
 8000af8:	460b      	mov	r3, r1
 8000afa:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000afc:	f7ff fdd6 	bl	80006ac <ST7735_Select>

    while (*str) {
 8000b00:	e04a      	b.n	8000b98 <ST7735_WriteString+0xb0>
        if (*str == '\r') {
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b0d      	cmp	r3, #13
 8000b08:	d103      	bne.n	8000b12 <ST7735_WriteString+0x2a>
            str++;  // skip carriage return
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	603b      	str	r3, [r7, #0]
            continue;
 8000b10:	e042      	b.n	8000b98 <ST7735_WriteString+0xb0>
        }

        if (*str == '\n') {
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b0a      	cmp	r3, #10
 8000b18:	d112      	bne.n	8000b40 <ST7735_WriteString+0x58>
            x = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000b1e:	7d7b      	ldrb	r3, [r7, #21]
 8000b20:	461a      	mov	r2, r3
 8000b22:	88bb      	ldrh	r3, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	80bb      	strh	r3, [r7, #4]
            if (y + font.height >= _height) {
 8000b28:	88bb      	ldrh	r3, [r7, #4]
 8000b2a:	7d7a      	ldrb	r2, [r7, #21]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	4a23      	ldr	r2, [pc, #140]	@ (8000bbc <ST7735_WriteString+0xd4>)
 8000b30:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b34:	4293      	cmp	r3, r2
 8000b36:	da34      	bge.n	8000ba2 <ST7735_WriteString+0xba>
                break;  // no more space on screen
            }
            str++;
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	603b      	str	r3, [r7, #0]
            continue;
 8000b3e:	e02b      	b.n	8000b98 <ST7735_WriteString+0xb0>
        }

        if (x + font.width >= _width) {
 8000b40:	88fb      	ldrh	r3, [r7, #6]
 8000b42:	7d3a      	ldrb	r2, [r7, #20]
 8000b44:	4413      	add	r3, r2
 8000b46:	4a1e      	ldr	r2, [pc, #120]	@ (8000bc0 <ST7735_WriteString+0xd8>)
 8000b48:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	db0e      	blt.n	8000b6e <ST7735_WriteString+0x86>
            x = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000b54:	7d7b      	ldrb	r3, [r7, #21]
 8000b56:	461a      	mov	r2, r3
 8000b58:	88bb      	ldrh	r3, [r7, #4]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	80bb      	strh	r3, [r7, #4]
            if (y + font.height >= _height) {
 8000b5e:	88bb      	ldrh	r3, [r7, #4]
 8000b60:	7d7a      	ldrb	r2, [r7, #21]
 8000b62:	4413      	add	r3, r2
 8000b64:	4a15      	ldr	r2, [pc, #84]	@ (8000bbc <ST7735_WriteString+0xd4>)
 8000b66:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	da1b      	bge.n	8000ba6 <ST7735_WriteString+0xbe>
                break;
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	781a      	ldrb	r2, [r3, #0]
 8000b72:	88b9      	ldrh	r1, [r7, #4]
 8000b74:	88f8      	ldrh	r0, [r7, #6]
 8000b76:	8c3b      	ldrh	r3, [r7, #32]
 8000b78:	9302      	str	r3, [sp, #8]
 8000b7a:	8bbb      	ldrh	r3, [r7, #28]
 8000b7c:	9301      	str	r3, [sp, #4]
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	f7ff ff38 	bl	80009f8 <ST7735_WriteChar>
        x += font.width;
 8000b88:	7d3b      	ldrb	r3, [r7, #20]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	88fb      	ldrh	r3, [r7, #6]
 8000b8e:	4413      	add	r3, r2
 8000b90:	80fb      	strh	r3, [r7, #6]
        str++;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	3301      	adds	r3, #1
 8000b96:	603b      	str	r3, [r7, #0]
    while (*str) {
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d1b0      	bne.n	8000b02 <ST7735_WriteString+0x1a>
 8000ba0:	e002      	b.n	8000ba8 <ST7735_WriteString+0xc0>
                break;  // no more space on screen
 8000ba2:	bf00      	nop
 8000ba4:	e000      	b.n	8000ba8 <ST7735_WriteString+0xc0>
                break;
 8000ba6:	bf00      	nop
    }

    ST7735_Unselect();
 8000ba8:	f7ff fd8c 	bl	80006c4 <ST7735_Unselect>
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bb6:	b002      	add	sp, #8
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	2000009e 	.word	0x2000009e
 8000bc0:	2000009c 	.word	0x2000009c

08000bc4 <ST7735_FillRectangle>:
}

// Assume you have ST7735 width and height defined globally
// #define ST7735_WIDTH 128
// #define ST7735_HEIGHT 160
void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000bc4:	b590      	push	{r4, r7, lr}
 8000bc6:	b087      	sub	sp, #28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4604      	mov	r4, r0
 8000bcc:	4608      	mov	r0, r1
 8000bce:	4611      	mov	r1, r2
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4623      	mov	r3, r4
 8000bd4:	80fb      	strh	r3, [r7, #6]
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	80bb      	strh	r3, [r7, #4]
 8000bda:	460b      	mov	r3, r1
 8000bdc:	807b      	strh	r3, [r7, #2]
 8000bde:	4613      	mov	r3, r2
 8000be0:	803b      	strh	r3, [r7, #0]
    // Boundary checks
    if ((x >= _width) || (y >= _height)) return;
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	4a54      	ldr	r2, [pc, #336]	@ (8000d38 <ST7735_FillRectangle+0x174>)
 8000be6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000bea:	4293      	cmp	r3, r2
 8000bec:	f280 80a0 	bge.w	8000d30 <ST7735_FillRectangle+0x16c>
 8000bf0:	88bb      	ldrh	r3, [r7, #4]
 8000bf2:	4a52      	ldr	r2, [pc, #328]	@ (8000d3c <ST7735_FillRectangle+0x178>)
 8000bf4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	f280 8099 	bge.w	8000d30 <ST7735_FillRectangle+0x16c>
    if ((x + w - 1) >= _width) w = _width - x;
 8000bfe:	88fa      	ldrh	r2, [r7, #6]
 8000c00:	887b      	ldrh	r3, [r7, #2]
 8000c02:	4413      	add	r3, r2
 8000c04:	4a4c      	ldr	r2, [pc, #304]	@ (8000d38 <ST7735_FillRectangle+0x174>)
 8000c06:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	dd06      	ble.n	8000c1c <ST7735_FillRectangle+0x58>
 8000c0e:	4b4a      	ldr	r3, [pc, #296]	@ (8000d38 <ST7735_FillRectangle+0x174>)
 8000c10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	807b      	strh	r3, [r7, #2]
    if ((y + h - 1) >= _height) h = _height - y;
 8000c1c:	88ba      	ldrh	r2, [r7, #4]
 8000c1e:	883b      	ldrh	r3, [r7, #0]
 8000c20:	4413      	add	r3, r2
 8000c22:	4a46      	ldr	r2, [pc, #280]	@ (8000d3c <ST7735_FillRectangle+0x178>)
 8000c24:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	dd06      	ble.n	8000c3a <ST7735_FillRectangle+0x76>
 8000c2c:	4b43      	ldr	r3, [pc, #268]	@ (8000d3c <ST7735_FillRectangle+0x178>)
 8000c2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	88bb      	ldrh	r3, [r7, #4]
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	803b      	strh	r3, [r7, #0]

    // Wait for any previous DMA to complete
    ST7735_WaitForDMA();
 8000c3a:	f7ff fd11 	bl	8000660 <ST7735_WaitForDMA>

    ST7735_Select();
 8000c3e:	f7ff fd35 	bl	80006ac <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8000c42:	88fb      	ldrh	r3, [r7, #6]
 8000c44:	b2d8      	uxtb	r0, r3
 8000c46:	88bb      	ldrh	r3, [r7, #4]
 8000c48:	b2d9      	uxtb	r1, r3
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	887b      	ldrh	r3, [r7, #2]
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	4413      	add	r3, r2
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	3b01      	subs	r3, #1
 8000c58:	b2dc      	uxtb	r4, r3
 8000c5a:	88bb      	ldrh	r3, [r7, #4]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	883b      	ldrh	r3, [r7, #0]
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	4413      	add	r3, r2
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	3b01      	subs	r3, #1
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	4622      	mov	r2, r4
 8000c6c:	f7ff fdd0 	bl	8000810 <ST7735_SetAddressWindow>

    uint32_t size = w * h;
 8000c70:	887b      	ldrh	r3, [r7, #2]
 8000c72:	883a      	ldrh	r2, [r7, #0]
 8000c74:	fb02 f303 	mul.w	r3, r2, r3
 8000c78:	613b      	str	r3, [r7, #16]
    uint8_t *buffer = malloc(size * 2);  // 2 bytes per pixel (RGB565)
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f006 fb92 	bl	80073a8 <malloc>
 8000c84:	4603      	mov	r3, r0
 8000c86:	60fb      	str	r3, [r7, #12]

    if (buffer == NULL) {
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d102      	bne.n	8000c94 <ST7735_FillRectangle+0xd0>
        ST7735_Unselect();
 8000c8e:	f7ff fd19 	bl	80006c4 <ST7735_Unselect>
        return;
 8000c92:	e04e      	b.n	8000d32 <ST7735_FillRectangle+0x16e>
    }

    // Fill buffer with color
    uint8_t high = color >> 8;
 8000c94:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000c96:	0a1b      	lsrs	r3, r3, #8
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	72fb      	strb	r3, [r7, #11]
    uint8_t low = color & 0xFF;
 8000c9c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000c9e:	72bb      	strb	r3, [r7, #10]
    for (uint32_t i = 0; i < size; i++) {
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	e00f      	b.n	8000cc6 <ST7735_FillRectangle+0x102>
        buffer[i * 2] = high;
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	4413      	add	r3, r2
 8000cae:	7afa      	ldrb	r2, [r7, #11]
 8000cb0:	701a      	strb	r2, [r3, #0]
        buffer[i * 2 + 1] = low;
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	4413      	add	r3, r2
 8000cbc:	7aba      	ldrb	r2, [r7, #10]
 8000cbe:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < size; i++) {
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d3eb      	bcc.n	8000ca6 <ST7735_FillRectangle+0xe2>
    }


    // Set DMA state before starting transfer
    spi_ready = 0;
 8000cce:	4b1c      	ldr	r3, [pc, #112]	@ (8000d40 <ST7735_FillRectangle+0x17c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
    dma_active = 1;
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d44 <ST7735_FillRectangle+0x180>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
    dma_buffer = buffer;
 8000cda:	4a1b      	ldr	r2, [pc, #108]	@ (8000d48 <ST7735_FillRectangle+0x184>)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	6013      	str	r3, [r2, #0]
    dma_buffer_size = size * 2;
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	4a19      	ldr	r2, [pc, #100]	@ (8000d4c <ST7735_FillRectangle+0x188>)
 8000ce6:	6013      	str	r3, [r2, #0]

    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cee:	4818      	ldr	r0, [pc, #96]	@ (8000d50 <ST7735_FillRectangle+0x18c>)
 8000cf0:	f002 f9a8 	bl	8003044 <HAL_GPIO_WritePin>

    if (HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buffer, size * 2) != HAL_OK) {
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	68f9      	ldr	r1, [r7, #12]
 8000d00:	4814      	ldr	r0, [pc, #80]	@ (8000d54 <ST7735_FillRectangle+0x190>)
 8000d02:	f003 ff75 	bl	8004bf0 <HAL_SPI_Transmit_DMA>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d012      	beq.n	8000d32 <ST7735_FillRectangle+0x16e>
        // If DMA start fails, clean up
        free(buffer);
 8000d0c:	68f8      	ldr	r0, [r7, #12]
 8000d0e:	f006 fb53 	bl	80073b8 <free>
        dma_buffer = NULL;
 8000d12:	4b0d      	ldr	r3, [pc, #52]	@ (8000d48 <ST7735_FillRectangle+0x184>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
        dma_buffer_size = 0;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <ST7735_FillRectangle+0x188>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
        spi_ready = 1;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	@ (8000d40 <ST7735_FillRectangle+0x17c>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	701a      	strb	r2, [r3, #0]
        dma_active = 0;
 8000d24:	4b07      	ldr	r3, [pc, #28]	@ (8000d44 <ST7735_FillRectangle+0x180>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
        ST7735_Unselect();
 8000d2a:	f7ff fccb 	bl	80006c4 <ST7735_Unselect>
 8000d2e:	e000      	b.n	8000d32 <ST7735_FillRectangle+0x16e>
    if ((x >= _width) || (y >= _height)) return;
 8000d30:	bf00      	nop
    }
}
 8000d32:	371c      	adds	r7, #28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd90      	pop	{r4, r7, pc}
 8000d38:	2000009c 	.word	0x2000009c
 8000d3c:	2000009e 	.word	0x2000009e
 8000d40:	20000000 	.word	0x20000000
 8000d44:	200000a5 	.word	0x200000a5
 8000d48:	200000a8 	.word	0x200000a8
 8000d4c:	200000ac 	.word	0x200000ac
 8000d50:	48001400 	.word	0x48001400
 8000d54:	20000198 	.word	0x20000198

08000d58 <ByteToHex>:
		ST7735_WriteString(95, 100, "Welcome", Font_11x18, WHITE, BLACK);
		pass_wrong=0;
	}
}
void ByteToHex(uint8_t byte, char *hex)
{
 8000d58:	b4b0      	push	{r4, r5, r7}
 8000d5a:	b089      	sub	sp, #36	@ 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	71fb      	strb	r3, [r7, #7]
    const char hex_chars[] = "0123456789ABCDEF";
 8000d64:	4b10      	ldr	r3, [pc, #64]	@ (8000da8 <ByteToHex+0x50>)
 8000d66:	f107 040c 	add.w	r4, r7, #12
 8000d6a:	461d      	mov	r5, r3
 8000d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d70:	682b      	ldr	r3, [r5, #0]
 8000d72:	7023      	strb	r3, [r4, #0]
    hex[0] = hex_chars[(byte >> 4) & 0x0F];
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	091b      	lsrs	r3, r3, #4
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	3320      	adds	r3, #32
 8000d80:	443b      	add	r3, r7
 8000d82:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	701a      	strb	r2, [r3, #0]
    hex[1] = hex_chars[byte & 0x0F];
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f003 020f 	and.w	r2, r3, #15
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	3301      	adds	r3, #1
 8000d94:	3220      	adds	r2, #32
 8000d96:	443a      	add	r2, r7
 8000d98:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8000d9c:	701a      	strb	r2, [r3, #0]
}
 8000d9e:	bf00      	nop
 8000da0:	3724      	adds	r7, #36	@ 0x24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bcb0      	pop	{r4, r5, r7}
 8000da6:	4770      	bx	lr
 8000da8:	08007694 	.word	0x08007694

08000dac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b08b      	sub	sp, #44	@ 0x2c
 8000db0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db2:	f000 fe4e 	bl	8001a52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db6:	f000 f945 	bl	8001044 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dba:	f000 fae1 	bl	8001380 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dbe:	f000 fab9 	bl	8001334 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000dc2:	f000 f9bd 	bl	8001140 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8000dc6:	f000 f9e7 	bl	8001198 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000dca:	f000 fa23 	bl	8001214 <MX_TIM1_Init>
  MX_AES_Init();
 8000dce:	f000 f98b 	bl	80010e8 <MX_AES_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	488a      	ldr	r0, [pc, #552]	@ (8001000 <main+0x254>)
 8000dd6:	f004 fa41 	bl	800525c <HAL_TIM_PWM_Start>

  // Test: set brightness to 50%
  set_backlight_brightness(brightness);
 8000dda:	4b8a      	ldr	r3, [pc, #552]	@ (8001004 <main+0x258>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 fb74 	bl	80014cc <set_backlight_brightness>
  ST7735_Init(0);
 8000de4:	2000      	movs	r0, #0
 8000de6:	f7ff fd5b 	bl	80008a0 <ST7735_Init>
  fillScreen(BLACK);
 8000dea:	2000      	movs	r0, #0
 8000dec:	f7ff fbb8 	bl	8000560 <fillScreen>
  //ST7735_SetRotation (1);
  //draw_menu(selected);
//  char rx_buffer[8]
  // Encrypt
  if (HAL_CRYP_AESCBC_Encrypt(&hcryp,plain_text, buffersize, encrypted_text, HAL_MAX_DELAY) != HAL_OK) {
 8000df0:	f04f 33ff 	mov.w	r3, #4294967295
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	4b84      	ldr	r3, [pc, #528]	@ (8001008 <main+0x25c>)
 8000df8:	2210      	movs	r2, #16
 8000dfa:	4984      	ldr	r1, [pc, #528]	@ (800100c <main+0x260>)
 8000dfc:	4884      	ldr	r0, [pc, #528]	@ (8001010 <main+0x264>)
 8000dfe:	f001 f8dc 	bl	8001fba <HAL_CRYP_AESCBC_Encrypt>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <main+0x60>
   	                             Error_Handler();
 8000e08:	f000 fb5a 	bl	80014c0 <Error_Handler>
   	                         }
  if (HAL_CRYP_AESCBC_Decrypt(&hcryp, encrypted_text, 32, decrypted_text, HAL_MAX_DELAY) != HAL_OK) {
 8000e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	4b80      	ldr	r3, [pc, #512]	@ (8001014 <main+0x268>)
 8000e14:	2220      	movs	r2, #32
 8000e16:	497c      	ldr	r1, [pc, #496]	@ (8001008 <main+0x25c>)
 8000e18:	487d      	ldr	r0, [pc, #500]	@ (8001010 <main+0x264>)
 8000e1a:	f001 f8fc 	bl	8002016 <HAL_CRYP_AESCBC_Decrypt>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <main+0x7c>
    	                            Error_Handler();
 8000e24:	f000 fb4c 	bl	80014c0 <Error_Handler>
    }
  	   ST7735_WriteString(0, 0,"Decrypted: ",Font_11x18 , GREEN, BLACK);
 8000e28:	4b7b      	ldr	r3, [pc, #492]	@ (8001018 <main+0x26c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	9202      	str	r2, [sp, #8]
 8000e2e:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000e32:	9201      	str	r2, [sp, #4]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	9200      	str	r2, [sp, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a78      	ldr	r2, [pc, #480]	@ (800101c <main+0x270>)
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f7ff fe52 	bl	8000ae8 <ST7735_WriteString>
       ST7735_WriteString(0, 20,(const char*)decrypted_text, Font_11x18, WHITE, BLACK);
 8000e44:	4b74      	ldr	r3, [pc, #464]	@ (8001018 <main+0x26c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	9202      	str	r2, [sp, #8]
 8000e4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e4e:	9201      	str	r2, [sp, #4]
 8000e50:	685a      	ldr	r2, [r3, #4]
 8000e52:	9200      	str	r2, [sp, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a6f      	ldr	r2, [pc, #444]	@ (8001014 <main+0x268>)
 8000e58:	2114      	movs	r1, #20
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f7ff fe44 	bl	8000ae8 <ST7735_WriteString>



       //HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Encrypted Text: ", strlen("Encrypted Text: "), HAL_MAX_DELAY);
       ST7735_WriteString(0, 60,"Encrypted: ",Font_11x18 , RED, BLACK);
 8000e60:	4b6d      	ldr	r3, [pc, #436]	@ (8001018 <main+0x26c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	9202      	str	r2, [sp, #8]
 8000e66:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000e6a:	9201      	str	r2, [sp, #4]
 8000e6c:	685a      	ldr	r2, [r3, #4]
 8000e6e:	9200      	str	r2, [sp, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a6b      	ldr	r2, [pc, #428]	@ (8001020 <main+0x274>)
 8000e74:	213c      	movs	r1, #60	@ 0x3c
 8000e76:	2000      	movs	r0, #0
 8000e78:	f7ff fe36 	bl	8000ae8 <ST7735_WriteString>
       uint16_t x = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	82fb      	strh	r3, [r7, #22]
       uint16_t y = 80; // Starting y-position
 8000e80:	2350      	movs	r3, #80	@ 0x50
 8000e82:	82bb      	strh	r3, [r7, #20]
       const uint16_t char_width = 20;  // width of each hex character block
 8000e84:	2314      	movs	r3, #20
 8000e86:	81bb      	strh	r3, [r7, #12]
       const uint16_t char_height = 18; // height of the font (Font_11x18)
 8000e88:	2312      	movs	r3, #18
 8000e8a:	817b      	strh	r3, [r7, #10]

       for (int i = 0; i < buffersize; i++) {
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	e02b      	b.n	8000eea <main+0x13e>
           char hex[3];  // Ensure it's large enough for 2 hex digits + null terminator
           hex[2] = '\0'; // for safety
 8000e92:	2300      	movs	r3, #0
 8000e94:	71bb      	strb	r3, [r7, #6]
           ByteToHex(encrypted_text[i], hex);
 8000e96:	4a5c      	ldr	r2, [pc, #368]	@ (8001008 <main+0x25c>)
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	1d3a      	adds	r2, r7, #4
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff ff58 	bl	8000d58 <ByteToHex>

           ST7735_WriteString(x, y, (const char*)hex, Font_11x18, WHITE, BLACK);
 8000ea8:	4b5b      	ldr	r3, [pc, #364]	@ (8001018 <main+0x26c>)
 8000eaa:	1d3c      	adds	r4, r7, #4
 8000eac:	8ab9      	ldrh	r1, [r7, #20]
 8000eae:	8af8      	ldrh	r0, [r7, #22]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	9202      	str	r2, [sp, #8]
 8000eb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000eb8:	9201      	str	r2, [sp, #4]
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	9200      	str	r2, [sp, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4622      	mov	r2, r4
 8000ec2:	f7ff fe11 	bl	8000ae8 <ST7735_WriteString>

           x += char_width;
 8000ec6:	8afa      	ldrh	r2, [r7, #22]
 8000ec8:	89bb      	ldrh	r3, [r7, #12]
 8000eca:	4413      	add	r3, r2
 8000ecc:	82fb      	strh	r3, [r7, #22]
           if (x + char_width > ST7735_WIDTH) {
 8000ece:	8afa      	ldrh	r2, [r7, #22]
 8000ed0:	89bb      	ldrh	r3, [r7, #12]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	2b80      	cmp	r3, #128	@ 0x80
 8000ed6:	dd05      	ble.n	8000ee4 <main+0x138>
               x = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	82fb      	strh	r3, [r7, #22]
               y += char_height;
 8000edc:	8aba      	ldrh	r2, [r7, #20]
 8000ede:	897b      	ldrh	r3, [r7, #10]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	82bb      	strh	r3, [r7, #20]
       for (int i = 0; i < buffersize; i++) {
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	2b0f      	cmp	r3, #15
 8000eee:	ddd0      	ble.n	8000e92 <main+0xe6>
           }
       }


     HAL_UART_Transmit(&hlpuart1, (uint8_t *)"\n\r", 2, HAL_MAX_DELAY);
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef4:	2202      	movs	r2, #2
 8000ef6:	494b      	ldr	r1, [pc, #300]	@ (8001024 <main+0x278>)
 8000ef8:	484b      	ldr	r0, [pc, #300]	@ (8001028 <main+0x27c>)
 8000efa:	f005 f8bf 	bl	800607c <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  memset(rx_buffer, 0, sizeof(rx_buffer));//initialise
 8000efe:	2210      	movs	r2, #16
 8000f00:	2100      	movs	r1, #0
 8000f02:	484a      	ldr	r0, [pc, #296]	@ (800102c <main+0x280>)
 8000f04:	f006 fb1e 	bl	8007544 <memset>
	  memset(user_encrypted_text, 0, sizeof(user_encrypted_text));//initialise
 8000f08:	2210      	movs	r2, #16
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4848      	ldr	r0, [pc, #288]	@ (8001030 <main+0x284>)
 8000f0e:	f006 fb19 	bl	8007544 <memset>

		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\r\n", 2,HAL_MAX_DELAY);
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295
 8000f16:	2202      	movs	r2, #2
 8000f18:	4946      	ldr	r1, [pc, #280]	@ (8001034 <main+0x288>)
 8000f1a:	4843      	ldr	r0, [pc, #268]	@ (8001028 <main+0x27c>)
 8000f1c:	f005 f8ae 	bl	800607c <HAL_UART_Transmit>

		HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Enter Password: ", strlen("Enter Password: "),HAL_MAX_DELAY);
 8000f20:	f04f 33ff 	mov.w	r3, #4294967295
 8000f24:	2210      	movs	r2, #16
 8000f26:	4944      	ldr	r1, [pc, #272]	@ (8001038 <main+0x28c>)
 8000f28:	483f      	ldr	r0, [pc, #252]	@ (8001028 <main+0x27c>)
 8000f2a:	f005 f8a7 	bl	800607c <HAL_UART_Transmit>
		uint8_t idx = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	73fb      	strb	r3, [r7, #15]
		uint8_t ch;

				while (1)//taking password
				{
					// Receive one character
					HAL_UART_Receive(&hlpuart1, &ch, 1,HAL_MAX_DELAY);
 8000f32:	1cf9      	adds	r1, r7, #3
 8000f34:	f04f 33ff 	mov.w	r3, #4294967295
 8000f38:	2201      	movs	r2, #1
 8000f3a:	483b      	ldr	r0, [pc, #236]	@ (8001028 <main+0x27c>)
 8000f3c:	f005 f927 	bl	800618e <HAL_UART_Receive>

					// Echo the character back
					HAL_UART_Transmit(&hlpuart1, &ch, 1,HAL_MAX_DELAY);
 8000f40:	1cf9      	adds	r1, r7, #3
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	2201      	movs	r2, #1
 8000f48:	4837      	ldr	r0, [pc, #220]	@ (8001028 <main+0x27c>)
 8000f4a:	f005 f897 	bl	800607c <HAL_UART_Transmit>

					// Store into buffer
					rx_buffer[idx++] = ch;
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	1c5a      	adds	r2, r3, #1
 8000f52:	73fa      	strb	r2, [r7, #15]
 8000f54:	461a      	mov	r2, r3
 8000f56:	78f9      	ldrb	r1, [r7, #3]
 8000f58:	4b34      	ldr	r3, [pc, #208]	@ (800102c <main+0x280>)
 8000f5a:	5499      	strb	r1, [r3, r2]

					// Break on newline or carriage return
					if (ch == '\r' || ch == '\n' || idx >= sizeof(rx_buffer) - 1)
 8000f5c:	78fb      	ldrb	r3, [r7, #3]
 8000f5e:	2b0d      	cmp	r3, #13
 8000f60:	d005      	beq.n	8000f6e <main+0x1c2>
 8000f62:	78fb      	ldrb	r3, [r7, #3]
 8000f64:	2b0a      	cmp	r3, #10
 8000f66:	d002      	beq.n	8000f6e <main+0x1c2>
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	2b0e      	cmp	r3, #14
 8000f6c:	d9e1      	bls.n	8000f32 <main+0x186>
					{
	//	                            rx_buffer[idx] = '\0'; // Null-terminate the string
						if(idx<sizeof(rx_buffer)){
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d809      	bhi.n	8000f88 <main+0x1dc>
							memset(&rx_buffer[idx],0x00,sizeof(rx_buffer)-idx);
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	4a2d      	ldr	r2, [pc, #180]	@ (800102c <main+0x280>)
 8000f78:	1898      	adds	r0, r3, r2
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	f1c3 0310 	rsb	r3, r3, #16
 8000f80:	461a      	mov	r2, r3
 8000f82:	2100      	movs	r1, #0
 8000f84:	f006 fade 	bl	8007544 <memset>
						}
						break;
 8000f88:	bf00      	nop
					}
				}


				if (HAL_CRYP_AESCBC_Encrypt(&hcryp, (uint8_t*)rx_buffer, buffersize, user_encrypted_text, HAL_MAX_DELAY) != HAL_OK) {
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	4b27      	ldr	r3, [pc, #156]	@ (8001030 <main+0x284>)
 8000f92:	2210      	movs	r2, #16
 8000f94:	4925      	ldr	r1, [pc, #148]	@ (800102c <main+0x280>)
 8000f96:	481e      	ldr	r0, [pc, #120]	@ (8001010 <main+0x264>)
 8000f98:	f001 f80f 	bl	8001fba <HAL_CRYP_AESCBC_Encrypt>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <main+0x1fa>
						 Error_Handler();
 8000fa2:	f000 fa8d 	bl	80014c0 <Error_Handler>
					 }

                // send a newline after the echo
                HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000faa:	2202      	movs	r2, #2
 8000fac:	4921      	ldr	r1, [pc, #132]	@ (8001034 <main+0x288>)
 8000fae:	481e      	ldr	r0, [pc, #120]	@ (8001028 <main+0x27c>)
 8000fb0:	f005 f864 	bl	800607c <HAL_UART_Transmit>

                if (HAL_CRYP_AESCBC_Encrypt(&hcryp, (uint8_t*)rx_buffer, buffersize, user_encrypted_text, HAL_MAX_DELAY) != HAL_OK) {
 8000fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	4b1d      	ldr	r3, [pc, #116]	@ (8001030 <main+0x284>)
 8000fbc:	2210      	movs	r2, #16
 8000fbe:	491b      	ldr	r1, [pc, #108]	@ (800102c <main+0x280>)
 8000fc0:	4813      	ldr	r0, [pc, #76]	@ (8001010 <main+0x264>)
 8000fc2:	f000 fffa 	bl	8001fba <HAL_CRYP_AESCBC_Encrypt>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <main+0x224>
                         Error_Handler();
 8000fcc:	f000 fa78 	bl	80014c0 <Error_Handler>
                     }
                if(memcmp(user_encrypted_text,encrypted_text,buffersize)!=0){
 8000fd0:	2210      	movs	r2, #16
 8000fd2:	490d      	ldr	r1, [pc, #52]	@ (8001008 <main+0x25c>)
 8000fd4:	4816      	ldr	r0, [pc, #88]	@ (8001030 <main+0x284>)
 8000fd6:	f006 faa5 	bl	8007524 <memcmp>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d007      	beq.n	8000ff0 <main+0x244>
             	   HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Invalid Password", strlen("Invalid Password"), HAL_MAX_DELAY);
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe4:	2210      	movs	r2, #16
 8000fe6:	4915      	ldr	r1, [pc, #84]	@ (800103c <main+0x290>)
 8000fe8:	480f      	ldr	r0, [pc, #60]	@ (8001028 <main+0x27c>)
 8000fea:	f005 f847 	bl	800607c <HAL_UART_Transmit>
 8000fee:	e786      	b.n	8000efe <main+0x152>
                }else{
                	HAL_UART_Transmit(&hlpuart1, (uint8_t *)"WELCOME!!", strlen("WELCOME!!"), HAL_MAX_DELAY);
 8000ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff4:	2209      	movs	r2, #9
 8000ff6:	4912      	ldr	r1, [pc, #72]	@ (8001040 <main+0x294>)
 8000ff8:	480b      	ldr	r0, [pc, #44]	@ (8001028 <main+0x27c>)
 8000ffa:	f005 f83f 	bl	800607c <HAL_UART_Transmit>
  {
 8000ffe:	e77e      	b.n	8000efe <main+0x152>
 8001000:	2000028c 	.word	0x2000028c
 8001004:	2000001c 	.word	0x2000001c
 8001008:	200002d8 	.word	0x200002d8
 800100c:	2000000c 	.word	0x2000000c
 8001010:	200000b0 	.word	0x200000b0
 8001014:	20000308 	.word	0x20000308
 8001018:	20000004 	.word	0x20000004
 800101c:	080076a8 	.word	0x080076a8
 8001020:	080076b4 	.word	0x080076b4
 8001024:	080076c0 	.word	0x080076c0
 8001028:	20000110 	.word	0x20000110
 800102c:	200002f8 	.word	0x200002f8
 8001030:	200002e8 	.word	0x200002e8
 8001034:	080076c4 	.word	0x080076c4
 8001038:	080076c8 	.word	0x080076c8
 800103c:	08007678 	.word	0x08007678
 8001040:	080076dc 	.word	0x080076dc

08001044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b096      	sub	sp, #88	@ 0x58
 8001048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	2244      	movs	r2, #68	@ 0x44
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f006 fa76 	bl	8007544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001058:	463b      	mov	r3, r7
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001066:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800106a:	f002 f811 	bl	8003090 <HAL_PWREx_ControlVoltageScaling>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001074:	f000 fa24 	bl	80014c0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001078:	2302      	movs	r3, #2
 800107a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800107c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001080:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001082:	2340      	movs	r3, #64	@ 0x40
 8001084:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001086:	2302      	movs	r3, #2
 8001088:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800108a:	2302      	movs	r3, #2
 800108c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800108e:	2301      	movs	r3, #1
 8001090:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001092:	230a      	movs	r3, #10
 8001094:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001096:	2302      	movs	r3, #2
 8001098:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800109a:	2302      	movs	r3, #2
 800109c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800109e:	2302      	movs	r3, #2
 80010a0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4618      	mov	r0, r3
 80010a8:	f002 f858 	bl	800315c <HAL_RCC_OscConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80010b2:	f000 fa05 	bl	80014c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b6:	230f      	movs	r3, #15
 80010b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ba:	2303      	movs	r3, #3
 80010bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010ca:	463b      	mov	r3, r7
 80010cc:	2104      	movs	r1, #4
 80010ce:	4618      	mov	r0, r3
 80010d0:	f002 fc5e 	bl	8003990 <HAL_RCC_ClockConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010da:	f000 f9f1 	bl	80014c0 <Error_Handler>
  }
}
 80010de:	bf00      	nop
 80010e0:	3758      	adds	r7, #88	@ 0x58
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <MX_AES_Init>:
  * @brief AES Initialization Function
  * @param None
  * @retval None
  */
static void MX_AES_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END AES_Init 0 */

  /* USER CODE BEGIN AES_Init 1 */

  /* USER CODE END AES_Init 1 */
  hcryp.Instance = AES;
 80010ec:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <MX_AES_Init+0x48>)
 80010ee:	4a11      	ldr	r2, [pc, #68]	@ (8001134 <MX_AES_Init+0x4c>)
 80010f0:	601a      	str	r2, [r3, #0]
  hcryp.Init.DataType = CRYP_DATATYPE_8B;
 80010f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <MX_AES_Init+0x48>)
 80010f4:	2204      	movs	r2, #4
 80010f6:	609a      	str	r2, [r3, #8]
  hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
 80010f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <MX_AES_Init+0x48>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  hcryp.Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
 80010fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <MX_AES_Init+0x48>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  hcryp.Init.ChainingMode = CRYP_CHAINMODE_AES_CBC;
 8001104:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <MX_AES_Init+0x48>)
 8001106:	2220      	movs	r2, #32
 8001108:	615a      	str	r2, [r3, #20]
  hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 800110a:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <MX_AES_Init+0x48>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  hcryp.Init.pKey = (uint8_t *)pKeyAES;
 8001110:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <MX_AES_Init+0x48>)
 8001112:	4a09      	ldr	r2, [pc, #36]	@ (8001138 <MX_AES_Init+0x50>)
 8001114:	621a      	str	r2, [r3, #32]
  hcryp.Init.pInitVect = (uint8_t *)pInitVectAES;
 8001116:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <MX_AES_Init+0x48>)
 8001118:	4a08      	ldr	r2, [pc, #32]	@ (800113c <MX_AES_Init+0x54>)
 800111a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 800111c:	4804      	ldr	r0, [pc, #16]	@ (8001130 <MX_AES_Init+0x48>)
 800111e:	f000 fe42 	bl	8001da6 <HAL_CRYP_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_AES_Init+0x44>
  {
    Error_Handler();
 8001128:	f000 f9ca 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN AES_Init 2 */

  /* USER CODE END AES_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200000b0 	.word	0x200000b0
 8001134:	50060000 	.word	0x50060000
 8001138:	080084b8 	.word	0x080084b8
 800113c:	080084c8 	.word	0x080084c8

08001140 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001144:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <MX_LPUART1_UART_Init+0x50>)
 8001146:	4a13      	ldr	r2, [pc, #76]	@ (8001194 <MX_LPUART1_UART_Init+0x54>)
 8001148:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800114a:	4b11      	ldr	r3, [pc, #68]	@ (8001190 <MX_LPUART1_UART_Init+0x50>)
 800114c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001150:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001152:	4b0f      	ldr	r3, [pc, #60]	@ (8001190 <MX_LPUART1_UART_Init+0x50>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001158:	4b0d      	ldr	r3, [pc, #52]	@ (8001190 <MX_LPUART1_UART_Init+0x50>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800115e:	4b0c      	ldr	r3, [pc, #48]	@ (8001190 <MX_LPUART1_UART_Init+0x50>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001164:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <MX_LPUART1_UART_Init+0x50>)
 8001166:	220c      	movs	r2, #12
 8001168:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116a:	4b09      	ldr	r3, [pc, #36]	@ (8001190 <MX_LPUART1_UART_Init+0x50>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001170:	4b07      	ldr	r3, [pc, #28]	@ (8001190 <MX_LPUART1_UART_Init+0x50>)
 8001172:	2200      	movs	r2, #0
 8001174:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001176:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <MX_LPUART1_UART_Init+0x50>)
 8001178:	2200      	movs	r2, #0
 800117a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800117c:	4804      	ldr	r0, [pc, #16]	@ (8001190 <MX_LPUART1_UART_Init+0x50>)
 800117e:	f004 ff2f 	bl	8005fe0 <HAL_UART_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001188:	f000 f99a 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000110 	.word	0x20000110
 8001194:	40008000 	.word	0x40008000

08001198 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800119c:	4b1b      	ldr	r3, [pc, #108]	@ (800120c <MX_SPI1_Init+0x74>)
 800119e:	4a1c      	ldr	r2, [pc, #112]	@ (8001210 <MX_SPI1_Init+0x78>)
 80011a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011a2:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <MX_SPI1_Init+0x74>)
 80011a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011aa:	4b18      	ldr	r3, [pc, #96]	@ (800120c <MX_SPI1_Init+0x74>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011b0:	4b16      	ldr	r3, [pc, #88]	@ (800120c <MX_SPI1_Init+0x74>)
 80011b2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80011b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011b8:	4b14      	ldr	r3, [pc, #80]	@ (800120c <MX_SPI1_Init+0x74>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011be:	4b13      	ldr	r3, [pc, #76]	@ (800120c <MX_SPI1_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011c4:	4b11      	ldr	r3, [pc, #68]	@ (800120c <MX_SPI1_Init+0x74>)
 80011c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <MX_SPI1_Init+0x74>)
 80011ce:	2218      	movs	r2, #24
 80011d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <MX_SPI1_Init+0x74>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <MX_SPI1_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011de:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <MX_SPI1_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011e4:	4b09      	ldr	r3, [pc, #36]	@ (800120c <MX_SPI1_Init+0x74>)
 80011e6:	2207      	movs	r2, #7
 80011e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <MX_SPI1_Init+0x74>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <MX_SPI1_Init+0x74>)
 80011f2:	2208      	movs	r2, #8
 80011f4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011f6:	4805      	ldr	r0, [pc, #20]	@ (800120c <MX_SPI1_Init+0x74>)
 80011f8:	f003 fab8 	bl	800476c <HAL_SPI_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001202:	f000 f95d 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000198 	.word	0x20000198
 8001210:	40013000 	.word	0x40013000

08001214 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b096      	sub	sp, #88	@ 0x58
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001226:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
 8001234:	611a      	str	r2, [r3, #16]
 8001236:	615a      	str	r2, [r3, #20]
 8001238:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	222c      	movs	r2, #44	@ 0x2c
 800123e:	2100      	movs	r1, #0
 8001240:	4618      	mov	r0, r3
 8001242:	f006 f97f 	bl	8007544 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001246:	4b39      	ldr	r3, [pc, #228]	@ (800132c <MX_TIM1_Init+0x118>)
 8001248:	4a39      	ldr	r2, [pc, #228]	@ (8001330 <MX_TIM1_Init+0x11c>)
 800124a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 800124c:	4b37      	ldr	r3, [pc, #220]	@ (800132c <MX_TIM1_Init+0x118>)
 800124e:	2207      	movs	r2, #7
 8001250:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001252:	4b36      	ldr	r3, [pc, #216]	@ (800132c <MX_TIM1_Init+0x118>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001258:	4b34      	ldr	r3, [pc, #208]	@ (800132c <MX_TIM1_Init+0x118>)
 800125a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800125e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001260:	4b32      	ldr	r3, [pc, #200]	@ (800132c <MX_TIM1_Init+0x118>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001266:	4b31      	ldr	r3, [pc, #196]	@ (800132c <MX_TIM1_Init+0x118>)
 8001268:	2200      	movs	r2, #0
 800126a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126c:	4b2f      	ldr	r3, [pc, #188]	@ (800132c <MX_TIM1_Init+0x118>)
 800126e:	2200      	movs	r2, #0
 8001270:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001272:	482e      	ldr	r0, [pc, #184]	@ (800132c <MX_TIM1_Init+0x118>)
 8001274:	f003 ff9a 	bl	80051ac <HAL_TIM_PWM_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800127e:	f000 f91f 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001282:	2300      	movs	r3, #0
 8001284:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001286:	2300      	movs	r3, #0
 8001288:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800128e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001292:	4619      	mov	r1, r3
 8001294:	4825      	ldr	r0, [pc, #148]	@ (800132c <MX_TIM1_Init+0x118>)
 8001296:	f004 fd9d 	bl	8005dd4 <HAL_TIMEx_MasterConfigSynchronization>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80012a0:	f000 f90e 	bl	80014c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a4:	2360      	movs	r3, #96	@ 0x60
 80012a6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ac:	2300      	movs	r3, #0
 80012ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012b0:	2300      	movs	r3, #0
 80012b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012b8:	2300      	movs	r3, #0
 80012ba:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012bc:	2300      	movs	r3, #0
 80012be:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012c0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012c4:	2200      	movs	r2, #0
 80012c6:	4619      	mov	r1, r3
 80012c8:	4818      	ldr	r0, [pc, #96]	@ (800132c <MX_TIM1_Init+0x118>)
 80012ca:	f004 f8cd 	bl	8005468 <HAL_TIM_PWM_ConfigChannel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80012d4:	f000 f8f4 	bl	80014c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012fe:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	4619      	mov	r1, r3
 800130c:	4807      	ldr	r0, [pc, #28]	@ (800132c <MX_TIM1_Init+0x118>)
 800130e:	f004 fde9 	bl	8005ee4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001318:	f000 f8d2 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800131c:	4803      	ldr	r0, [pc, #12]	@ (800132c <MX_TIM1_Init+0x118>)
 800131e:	f000 faa1 	bl	8001864 <HAL_TIM_MspPostInit>

}
 8001322:	bf00      	nop
 8001324:	3758      	adds	r7, #88	@ 0x58
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000028c 	.word	0x2000028c
 8001330:	40012c00 	.word	0x40012c00

08001334 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800133a:	4b10      	ldr	r3, [pc, #64]	@ (800137c <MX_DMA_Init+0x48>)
 800133c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800133e:	4a0f      	ldr	r2, [pc, #60]	@ (800137c <MX_DMA_Init+0x48>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6493      	str	r3, [r2, #72]	@ 0x48
 8001346:	4b0d      	ldr	r3, [pc, #52]	@ (800137c <MX_DMA_Init+0x48>)
 8001348:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	200c      	movs	r0, #12
 8001358:	f000 fcef 	bl	8001d3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800135c:	200c      	movs	r0, #12
 800135e:	f000 fd08 	bl	8001d72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2100      	movs	r1, #0
 8001366:	200d      	movs	r0, #13
 8001368:	f000 fce7 	bl	8001d3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800136c:	200d      	movs	r0, #13
 800136e:	f000 fd00 	bl	8001d72 <HAL_NVIC_EnableIRQ>

}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40021000 	.word	0x40021000

08001380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08c      	sub	sp, #48	@ 0x30
 8001384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001386:	f107 031c 	add.w	r3, r7, #28
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
 8001394:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	4b46      	ldr	r3, [pc, #280]	@ (80014b0 <MX_GPIO_Init+0x130>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139a:	4a45      	ldr	r2, [pc, #276]	@ (80014b0 <MX_GPIO_Init+0x130>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a2:	4b43      	ldr	r3, [pc, #268]	@ (80014b0 <MX_GPIO_Init+0x130>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	61bb      	str	r3, [r7, #24]
 80013ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ae:	4b40      	ldr	r3, [pc, #256]	@ (80014b0 <MX_GPIO_Init+0x130>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b2:	4a3f      	ldr	r2, [pc, #252]	@ (80014b0 <MX_GPIO_Init+0x130>)
 80013b4:	f043 0320 	orr.w	r3, r3, #32
 80013b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ba:	4b3d      	ldr	r3, [pc, #244]	@ (80014b0 <MX_GPIO_Init+0x130>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013be:	f003 0320 	and.w	r3, r3, #32
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013c6:	4b3a      	ldr	r3, [pc, #232]	@ (80014b0 <MX_GPIO_Init+0x130>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ca:	4a39      	ldr	r2, [pc, #228]	@ (80014b0 <MX_GPIO_Init+0x130>)
 80013cc:	f043 0310 	orr.w	r3, r3, #16
 80013d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013d2:	4b37      	ldr	r3, [pc, #220]	@ (80014b0 <MX_GPIO_Init+0x130>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013de:	4b34      	ldr	r3, [pc, #208]	@ (80014b0 <MX_GPIO_Init+0x130>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e2:	4a33      	ldr	r2, [pc, #204]	@ (80014b0 <MX_GPIO_Init+0x130>)
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ea:	4b31      	ldr	r3, [pc, #196]	@ (80014b0 <MX_GPIO_Init+0x130>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f6:	4b2e      	ldr	r3, [pc, #184]	@ (80014b0 <MX_GPIO_Init+0x130>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fa:	4a2d      	ldr	r2, [pc, #180]	@ (80014b0 <MX_GPIO_Init+0x130>)
 80013fc:	f043 0308 	orr.w	r3, r3, #8
 8001400:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001402:	4b2b      	ldr	r3, [pc, #172]	@ (80014b0 <MX_GPIO_Init+0x130>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800140e:	4b28      	ldr	r3, [pc, #160]	@ (80014b0 <MX_GPIO_Init+0x130>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001412:	4a27      	ldr	r2, [pc, #156]	@ (80014b0 <MX_GPIO_Init+0x130>)
 8001414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001418:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800141a:	4b25      	ldr	r3, [pc, #148]	@ (80014b0 <MX_GPIO_Init+0x130>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001426:	f001 fe89 	bl	800313c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001430:	4820      	ldr	r0, [pc, #128]	@ (80014b4 <MX_GPIO_Init+0x134>)
 8001432:	f001 fe07 	bl	8003044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800143c:	481e      	ldr	r0, [pc, #120]	@ (80014b8 <MX_GPIO_Init+0x138>)
 800143e:	f001 fe01 	bl	8003044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS_Pin|reset_Pin, GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001448:	481c      	ldr	r0, [pc, #112]	@ (80014bc <MX_GPIO_Init+0x13c>)
 800144a:	f001 fdfb 	bl	8003044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DC_Pin */
  GPIO_InitStruct.Pin = DC_Pin;
 800144e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	4619      	mov	r1, r3
 8001466:	4813      	ldr	r0, [pc, #76]	@ (80014b4 <MX_GPIO_Init+0x134>)
 8001468:	f001 fb68 	bl	8002b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800146c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	4619      	mov	r1, r3
 8001484:	480c      	ldr	r0, [pc, #48]	@ (80014b8 <MX_GPIO_Init+0x138>)
 8001486:	f001 fb59 	bl	8002b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin reset_Pin */
  GPIO_InitStruct.Pin = CS_Pin|reset_Pin;
 800148a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800148e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001490:	2301      	movs	r3, #1
 8001492:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2300      	movs	r3, #0
 800149a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	4619      	mov	r1, r3
 80014a2:	4806      	ldr	r0, [pc, #24]	@ (80014bc <MX_GPIO_Init+0x13c>)
 80014a4:	f001 fb4a 	bl	8002b3c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014a8:	bf00      	nop
 80014aa:	3730      	adds	r7, #48	@ 0x30
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40021000 	.word	0x40021000
 80014b4:	48001400 	.word	0x48001400
 80014b8:	48000400 	.word	0x48000400
 80014bc:	48000c00 	.word	0x48000c00

080014c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <Error_Handler+0x8>

080014cc <set_backlight_brightness>:

}



void set_backlight_brightness(uint8_t percent) {
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
    if (percent > 100) percent = 100;
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	2b64      	cmp	r3, #100	@ 0x64
 80014da:	d901      	bls.n	80014e0 <set_backlight_brightness+0x14>
 80014dc:	2364      	movs	r3, #100	@ 0x64
 80014de:	71fb      	strb	r3, [r7, #7]
    uint32_t pulse = (htim1.Init.Period + 1) * percent / 100;
 80014e0:	4b0a      	ldr	r3, [pc, #40]	@ (800150c <set_backlight_brightness+0x40>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	3301      	adds	r3, #1
 80014e6:	79fa      	ldrb	r2, [r7, #7]
 80014e8:	fb02 f303 	mul.w	r3, r2, r3
 80014ec:	4a08      	ldr	r2, [pc, #32]	@ (8001510 <set_backlight_brightness+0x44>)
 80014ee:	fba2 2303 	umull	r2, r3, r2, r3
 80014f2:	095b      	lsrs	r3, r3, #5
 80014f4:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 80014f6:	4b05      	ldr	r3, [pc, #20]	@ (800150c <set_backlight_brightness+0x40>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	635a      	str	r2, [r3, #52]	@ 0x34


}
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	2000028c 	.word	0x2000028c
 8001510:	51eb851f 	.word	0x51eb851f

08001514 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151a:	4b0f      	ldr	r3, [pc, #60]	@ (8001558 <HAL_MspInit+0x44>)
 800151c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800151e:	4a0e      	ldr	r2, [pc, #56]	@ (8001558 <HAL_MspInit+0x44>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6613      	str	r3, [r2, #96]	@ 0x60
 8001526:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <HAL_MspInit+0x44>)
 8001528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	4b09      	ldr	r3, [pc, #36]	@ (8001558 <HAL_MspInit+0x44>)
 8001534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001536:	4a08      	ldr	r2, [pc, #32]	@ (8001558 <HAL_MspInit+0x44>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800153c:	6593      	str	r3, [r2, #88]	@ 0x58
 800153e:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <HAL_MspInit+0x44>)
 8001540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000

0800155c <HAL_CRYP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcryp: CRYP handle pointer
  * @retval None
  */
void HAL_CRYP_MspInit(CRYP_HandleTypeDef* hcryp)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  if(hcryp->Instance==AES)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0a      	ldr	r2, [pc, #40]	@ (8001594 <HAL_CRYP_MspInit+0x38>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d10b      	bne.n	8001586 <HAL_CRYP_MspInit+0x2a>
  {
    /* USER CODE BEGIN AES_MspInit 0 */

    /* USER CODE END AES_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 800156e:	4b0a      	ldr	r3, [pc, #40]	@ (8001598 <HAL_CRYP_MspInit+0x3c>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001572:	4a09      	ldr	r2, [pc, #36]	@ (8001598 <HAL_CRYP_MspInit+0x3c>)
 8001574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001578:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800157a:	4b07      	ldr	r3, [pc, #28]	@ (8001598 <HAL_CRYP_MspInit+0x3c>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END AES_MspInit 1 */

  }

}
 8001586:	bf00      	nop
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	50060000 	.word	0x50060000
 8001598:	40021000 	.word	0x40021000

0800159c <HAL_CRYP_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hcryp: CRYP handle pointer
  * @retval None
  */
void HAL_CRYP_MspDeInit(CRYP_HandleTypeDef* hcryp)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  if(hcryp->Instance==AES)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a07      	ldr	r2, [pc, #28]	@ (80015c8 <HAL_CRYP_MspDeInit+0x2c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d105      	bne.n	80015ba <HAL_CRYP_MspDeInit+0x1e>
  {
    /* USER CODE BEGIN AES_MspDeInit 0 */

    /* USER CODE END AES_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_AES_CLK_DISABLE();
 80015ae:	4b07      	ldr	r3, [pc, #28]	@ (80015cc <HAL_CRYP_MspDeInit+0x30>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b2:	4a06      	ldr	r2, [pc, #24]	@ (80015cc <HAL_CRYP_MspDeInit+0x30>)
 80015b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
    /* USER CODE BEGIN AES_MspDeInit 1 */

    /* USER CODE END AES_MspDeInit 1 */
  }

}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	50060000 	.word	0x50060000
 80015cc:	40021000 	.word	0x40021000

080015d0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b0ac      	sub	sp, #176	@ 0xb0
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	228c      	movs	r2, #140	@ 0x8c
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f005 ffa7 	bl	8007544 <memset>
  if(huart->Instance==LPUART1)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a26      	ldr	r2, [pc, #152]	@ (8001694 <HAL_UART_MspInit+0xc4>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d145      	bne.n	800168c <HAL_UART_MspInit+0xbc>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001600:	2320      	movs	r3, #32
 8001602:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001604:	2300      	movs	r3, #0
 8001606:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001608:	f107 0310 	add.w	r3, r7, #16
 800160c:	4618      	mov	r0, r3
 800160e:	f002 fbe3 	bl	8003dd8 <HAL_RCCEx_PeriphCLKConfig>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001618:	f7ff ff52 	bl	80014c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800161c:	4b1e      	ldr	r3, [pc, #120]	@ (8001698 <HAL_UART_MspInit+0xc8>)
 800161e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001620:	4a1d      	ldr	r2, [pc, #116]	@ (8001698 <HAL_UART_MspInit+0xc8>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001628:	4b1b      	ldr	r3, [pc, #108]	@ (8001698 <HAL_UART_MspInit+0xc8>)
 800162a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001634:	4b18      	ldr	r3, [pc, #96]	@ (8001698 <HAL_UART_MspInit+0xc8>)
 8001636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001638:	4a17      	ldr	r2, [pc, #92]	@ (8001698 <HAL_UART_MspInit+0xc8>)
 800163a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800163e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001640:	4b15      	ldr	r3, [pc, #84]	@ (8001698 <HAL_UART_MspInit+0xc8>)
 8001642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 800164c:	f001 fd76 	bl	800313c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001650:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001654:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001664:	2303      	movs	r3, #3
 8001666:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800166a:	2308      	movs	r3, #8
 800166c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001670:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001674:	4619      	mov	r1, r3
 8001676:	4809      	ldr	r0, [pc, #36]	@ (800169c <HAL_UART_MspInit+0xcc>)
 8001678:	f001 fa60 	bl	8002b3c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800167c:	2200      	movs	r2, #0
 800167e:	2100      	movs	r1, #0
 8001680:	2046      	movs	r0, #70	@ 0x46
 8001682:	f000 fb5a 	bl	8001d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001686:	2046      	movs	r0, #70	@ 0x46
 8001688:	f000 fb73 	bl	8001d72 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 800168c:	bf00      	nop
 800168e:	37b0      	adds	r7, #176	@ 0xb0
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40008000 	.word	0x40008000
 8001698:	40021000 	.word	0x40021000
 800169c:	48001800 	.word	0x48001800

080016a0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	@ 0x28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a40      	ldr	r2, [pc, #256]	@ (80017c0 <HAL_SPI_MspInit+0x120>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d17a      	bne.n	80017b8 <HAL_SPI_MspInit+0x118>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016c2:	4b40      	ldr	r3, [pc, #256]	@ (80017c4 <HAL_SPI_MspInit+0x124>)
 80016c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016c6:	4a3f      	ldr	r2, [pc, #252]	@ (80017c4 <HAL_SPI_MspInit+0x124>)
 80016c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80016ce:	4b3d      	ldr	r3, [pc, #244]	@ (80017c4 <HAL_SPI_MspInit+0x124>)
 80016d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	4b3a      	ldr	r3, [pc, #232]	@ (80017c4 <HAL_SPI_MspInit+0x124>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016de:	4a39      	ldr	r2, [pc, #228]	@ (80017c4 <HAL_SPI_MspInit+0x124>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e6:	4b37      	ldr	r3, [pc, #220]	@ (80017c4 <HAL_SPI_MspInit+0x124>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016f2:	23e0      	movs	r3, #224	@ 0xe0
 80016f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fe:	2303      	movs	r3, #3
 8001700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001702:	2305      	movs	r3, #5
 8001704:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001710:	f001 fa14 	bl	8002b3c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001714:	4b2c      	ldr	r3, [pc, #176]	@ (80017c8 <HAL_SPI_MspInit+0x128>)
 8001716:	4a2d      	ldr	r2, [pc, #180]	@ (80017cc <HAL_SPI_MspInit+0x12c>)
 8001718:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 800171a:	4b2b      	ldr	r3, [pc, #172]	@ (80017c8 <HAL_SPI_MspInit+0x128>)
 800171c:	2201      	movs	r2, #1
 800171e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001720:	4b29      	ldr	r3, [pc, #164]	@ (80017c8 <HAL_SPI_MspInit+0x128>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001726:	4b28      	ldr	r3, [pc, #160]	@ (80017c8 <HAL_SPI_MspInit+0x128>)
 8001728:	2200      	movs	r2, #0
 800172a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800172c:	4b26      	ldr	r3, [pc, #152]	@ (80017c8 <HAL_SPI_MspInit+0x128>)
 800172e:	2280      	movs	r2, #128	@ 0x80
 8001730:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001732:	4b25      	ldr	r3, [pc, #148]	@ (80017c8 <HAL_SPI_MspInit+0x128>)
 8001734:	2200      	movs	r2, #0
 8001736:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001738:	4b23      	ldr	r3, [pc, #140]	@ (80017c8 <HAL_SPI_MspInit+0x128>)
 800173a:	2200      	movs	r2, #0
 800173c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800173e:	4b22      	ldr	r3, [pc, #136]	@ (80017c8 <HAL_SPI_MspInit+0x128>)
 8001740:	2200      	movs	r2, #0
 8001742:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001744:	4b20      	ldr	r3, [pc, #128]	@ (80017c8 <HAL_SPI_MspInit+0x128>)
 8001746:	2200      	movs	r2, #0
 8001748:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800174a:	481f      	ldr	r0, [pc, #124]	@ (80017c8 <HAL_SPI_MspInit+0x128>)
 800174c:	f000 feee 	bl	800252c <HAL_DMA_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8001756:	f7ff feb3 	bl	80014c0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a1a      	ldr	r2, [pc, #104]	@ (80017c8 <HAL_SPI_MspInit+0x128>)
 800175e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001760:	4a19      	ldr	r2, [pc, #100]	@ (80017c8 <HAL_SPI_MspInit+0x128>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001766:	4b1a      	ldr	r3, [pc, #104]	@ (80017d0 <HAL_SPI_MspInit+0x130>)
 8001768:	4a1a      	ldr	r2, [pc, #104]	@ (80017d4 <HAL_SPI_MspInit+0x134>)
 800176a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 800176c:	4b18      	ldr	r3, [pc, #96]	@ (80017d0 <HAL_SPI_MspInit+0x130>)
 800176e:	2201      	movs	r2, #1
 8001770:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001772:	4b17      	ldr	r3, [pc, #92]	@ (80017d0 <HAL_SPI_MspInit+0x130>)
 8001774:	2210      	movs	r2, #16
 8001776:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001778:	4b15      	ldr	r3, [pc, #84]	@ (80017d0 <HAL_SPI_MspInit+0x130>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800177e:	4b14      	ldr	r3, [pc, #80]	@ (80017d0 <HAL_SPI_MspInit+0x130>)
 8001780:	2280      	movs	r2, #128	@ 0x80
 8001782:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001784:	4b12      	ldr	r3, [pc, #72]	@ (80017d0 <HAL_SPI_MspInit+0x130>)
 8001786:	2200      	movs	r2, #0
 8001788:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800178a:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <HAL_SPI_MspInit+0x130>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001790:	4b0f      	ldr	r3, [pc, #60]	@ (80017d0 <HAL_SPI_MspInit+0x130>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001796:	4b0e      	ldr	r3, [pc, #56]	@ (80017d0 <HAL_SPI_MspInit+0x130>)
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800179c:	480c      	ldr	r0, [pc, #48]	@ (80017d0 <HAL_SPI_MspInit+0x130>)
 800179e:	f000 fec5 	bl	800252c <HAL_DMA_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 80017a8:	f7ff fe8a 	bl	80014c0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a08      	ldr	r2, [pc, #32]	@ (80017d0 <HAL_SPI_MspInit+0x130>)
 80017b0:	655a      	str	r2, [r3, #84]	@ 0x54
 80017b2:	4a07      	ldr	r2, [pc, #28]	@ (80017d0 <HAL_SPI_MspInit+0x130>)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80017b8:	bf00      	nop
 80017ba:	3728      	adds	r7, #40	@ 0x28
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40013000 	.word	0x40013000
 80017c4:	40021000 	.word	0x40021000
 80017c8:	200001fc 	.word	0x200001fc
 80017cc:	4002001c 	.word	0x4002001c
 80017d0:	20000244 	.word	0x20000244
 80017d4:	40020030 	.word	0x40020030

080017d8 <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0d      	ldr	r2, [pc, #52]	@ (800181c <HAL_SPI_MspDeInit+0x44>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d114      	bne.n	8001814 <HAL_SPI_MspDeInit+0x3c>
  {
    /* USER CODE BEGIN SPI1_MspDeInit 0 */

    /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80017ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001820 <HAL_SPI_MspDeInit+0x48>)
 80017ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001820 <HAL_SPI_MspDeInit+0x48>)
 80017f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80017f4:	6613      	str	r3, [r2, #96]	@ 0x60
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 80017f6:	21e0      	movs	r1, #224	@ 0xe0
 80017f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017fc:	f001 fb30 	bl	8002e60 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmarx);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001804:	4618      	mov	r0, r3
 8001806:	f000 ff49 	bl	800269c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800180e:	4618      	mov	r0, r3
 8001810:	f000 ff44 	bl	800269c <HAL_DMA_DeInit>
    /* USER CODE BEGIN SPI1_MspDeInit 1 */

    /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40013000 	.word	0x40013000
 8001820:	40021000 	.word	0x40021000

08001824 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0a      	ldr	r2, [pc, #40]	@ (800185c <HAL_TIM_PWM_MspInit+0x38>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d10b      	bne.n	800184e <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001836:	4b0a      	ldr	r3, [pc, #40]	@ (8001860 <HAL_TIM_PWM_MspInit+0x3c>)
 8001838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800183a:	4a09      	ldr	r2, [pc, #36]	@ (8001860 <HAL_TIM_PWM_MspInit+0x3c>)
 800183c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001840:	6613      	str	r3, [r2, #96]	@ 0x60
 8001842:	4b07      	ldr	r3, [pc, #28]	@ (8001860 <HAL_TIM_PWM_MspInit+0x3c>)
 8001844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001846:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800184e:	bf00      	nop
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40012c00 	.word	0x40012c00
 8001860:	40021000 	.word	0x40021000

08001864 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 030c 	add.w	r3, r7, #12
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a11      	ldr	r2, [pc, #68]	@ (80018c8 <HAL_TIM_MspPostInit+0x64>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d11c      	bne.n	80018c0 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001886:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <HAL_TIM_MspPostInit+0x68>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188a:	4a10      	ldr	r2, [pc, #64]	@ (80018cc <HAL_TIM_MspPostInit+0x68>)
 800188c:	f043 0310 	orr.w	r3, r3, #16
 8001890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001892:	4b0e      	ldr	r3, [pc, #56]	@ (80018cc <HAL_TIM_MspPostInit+0x68>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800189e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018b0:	2301      	movs	r3, #1
 80018b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	4619      	mov	r1, r3
 80018ba:	4805      	ldr	r0, [pc, #20]	@ (80018d0 <HAL_TIM_MspPostInit+0x6c>)
 80018bc:	f001 f93e 	bl	8002b3c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018c0:	bf00      	nop
 80018c2:	3720      	adds	r7, #32
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40012c00 	.word	0x40012c00
 80018cc:	40021000 	.word	0x40021000
 80018d0:	48001000 	.word	0x48001000

080018d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <NMI_Handler+0x4>

080018dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <HardFault_Handler+0x4>

080018e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e8:	bf00      	nop
 80018ea:	e7fd      	b.n	80018e8 <MemManage_Handler+0x4>

080018ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <BusFault_Handler+0x4>

080018f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <UsageFault_Handler+0x4>

080018fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800192a:	f000 f8e7 	bl	8001afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001938:	4802      	ldr	r0, [pc, #8]	@ (8001944 <DMA1_Channel2_IRQHandler+0x10>)
 800193a:	f001 f820 	bl	800297e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	200001fc 	.word	0x200001fc

08001948 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800194c:	4802      	ldr	r0, [pc, #8]	@ (8001958 <DMA1_Channel3_IRQHandler+0x10>)
 800194e:	f001 f816 	bl	800297e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000244 	.word	0x20000244

0800195c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001960:	4802      	ldr	r0, [pc, #8]	@ (800196c <LPUART1_IRQHandler+0x10>)
 8001962:	f004 fcdd 	bl	8006320 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000110 	.word	0x20000110

08001970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001978:	4a14      	ldr	r2, [pc, #80]	@ (80019cc <_sbrk+0x5c>)
 800197a:	4b15      	ldr	r3, [pc, #84]	@ (80019d0 <_sbrk+0x60>)
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001984:	4b13      	ldr	r3, [pc, #76]	@ (80019d4 <_sbrk+0x64>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d102      	bne.n	8001992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800198c:	4b11      	ldr	r3, [pc, #68]	@ (80019d4 <_sbrk+0x64>)
 800198e:	4a12      	ldr	r2, [pc, #72]	@ (80019d8 <_sbrk+0x68>)
 8001990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001992:	4b10      	ldr	r3, [pc, #64]	@ (80019d4 <_sbrk+0x64>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	429a      	cmp	r2, r3
 800199e:	d207      	bcs.n	80019b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a0:	f005 fde8 	bl	8007574 <__errno>
 80019a4:	4603      	mov	r3, r0
 80019a6:	220c      	movs	r2, #12
 80019a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
 80019ae:	e009      	b.n	80019c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b0:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019b6:	4b07      	ldr	r3, [pc, #28]	@ (80019d4 <_sbrk+0x64>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	4a05      	ldr	r2, [pc, #20]	@ (80019d4 <_sbrk+0x64>)
 80019c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019c2:	68fb      	ldr	r3, [r7, #12]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20050000 	.word	0x20050000
 80019d0:	00000400 	.word	0x00000400
 80019d4:	20000318 	.word	0x20000318
 80019d8:	20000468 	.word	0x20000468

080019dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019e0:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <SystemInit+0x20>)
 80019e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019e6:	4a05      	ldr	r2, [pc, #20]	@ (80019fc <SystemInit+0x20>)
 80019e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a04:	f7ff ffea 	bl	80019dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a08:	480c      	ldr	r0, [pc, #48]	@ (8001a3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a0a:	490d      	ldr	r1, [pc, #52]	@ (8001a40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a44 <LoopForever+0xe>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a10:	e002      	b.n	8001a18 <LoopCopyDataInit>

08001a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a16:	3304      	adds	r3, #4

08001a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a1c:	d3f9      	bcc.n	8001a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a20:	4c0a      	ldr	r4, [pc, #40]	@ (8001a4c <LoopForever+0x16>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a24:	e001      	b.n	8001a2a <LoopFillZerobss>

08001a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a28:	3204      	adds	r2, #4

08001a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a2c:	d3fb      	bcc.n	8001a26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a2e:	f005 fda7 	bl	8007580 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a32:	f7ff f9bb 	bl	8000dac <main>

08001a36 <LoopForever>:

LoopForever:
    b LoopForever
 8001a36:	e7fe      	b.n	8001a36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a38:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a40:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001a44:	08008530 	.word	0x08008530
  ldr r2, =_sbss
 8001a48:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001a4c:	20000468 	.word	0x20000468

08001a50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a50:	e7fe      	b.n	8001a50 <ADC1_2_IRQHandler>

08001a52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a5c:	2003      	movs	r0, #3
 8001a5e:	f000 f961 	bl	8001d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a62:	200f      	movs	r0, #15
 8001a64:	f000 f80e 	bl	8001a84 <HAL_InitTick>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	71fb      	strb	r3, [r7, #7]
 8001a72:	e001      	b.n	8001a78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a74:	f7ff fd4e 	bl	8001514 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a78:	79fb      	ldrb	r3, [r7, #7]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a90:	4b17      	ldr	r3, [pc, #92]	@ (8001af0 <HAL_InitTick+0x6c>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d023      	beq.n	8001ae0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a98:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <HAL_InitTick+0x70>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b14      	ldr	r3, [pc, #80]	@ (8001af0 <HAL_InitTick+0x6c>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 f96d 	bl	8001d8e <HAL_SYSTICK_Config>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10f      	bne.n	8001ada <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b0f      	cmp	r3, #15
 8001abe:	d809      	bhi.n	8001ad4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac8:	f000 f937 	bl	8001d3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001acc:	4a0a      	ldr	r2, [pc, #40]	@ (8001af8 <HAL_InitTick+0x74>)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e007      	b.n	8001ae4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
 8001ad8:	e004      	b.n	8001ae4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	73fb      	strb	r3, [r7, #15]
 8001ade:	e001      	b.n	8001ae4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000028 	.word	0x20000028
 8001af4:	20000020 	.word	0x20000020
 8001af8:	20000024 	.word	0x20000024

08001afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b00:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <HAL_IncTick+0x20>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <HAL_IncTick+0x24>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	4a04      	ldr	r2, [pc, #16]	@ (8001b20 <HAL_IncTick+0x24>)
 8001b0e:	6013      	str	r3, [r2, #0]
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000028 	.word	0x20000028
 8001b20:	2000031c 	.word	0x2000031c

08001b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return uwTick;
 8001b28:	4b03      	ldr	r3, [pc, #12]	@ (8001b38 <HAL_GetTick+0x14>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	2000031c 	.word	0x2000031c

08001b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b44:	f7ff ffee 	bl	8001b24 <HAL_GetTick>
 8001b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b54:	d005      	beq.n	8001b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b56:	4b0a      	ldr	r3, [pc, #40]	@ (8001b80 <HAL_Delay+0x44>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4413      	add	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b62:	bf00      	nop
 8001b64:	f7ff ffde 	bl	8001b24 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d8f7      	bhi.n	8001b64 <HAL_Delay+0x28>
  {
  }
}
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000028 	.word	0x20000028

08001b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b94:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bb6:	4a04      	ldr	r2, [pc, #16]	@ (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	60d3      	str	r3, [r2, #12]
}
 8001bbc:	bf00      	nop
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd0:	4b04      	ldr	r3, [pc, #16]	@ (8001be4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	f003 0307 	and.w	r3, r3, #7
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	db0b      	blt.n	8001c12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	f003 021f 	and.w	r2, r3, #31
 8001c00:	4907      	ldr	r1, [pc, #28]	@ (8001c20 <__NVIC_EnableIRQ+0x38>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	2001      	movs	r0, #1
 8001c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000e100 	.word	0xe000e100

08001c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	6039      	str	r1, [r7, #0]
 8001c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	db0a      	blt.n	8001c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	490c      	ldr	r1, [pc, #48]	@ (8001c70 <__NVIC_SetPriority+0x4c>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	0112      	lsls	r2, r2, #4
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	440b      	add	r3, r1
 8001c48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c4c:	e00a      	b.n	8001c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4908      	ldr	r1, [pc, #32]	@ (8001c74 <__NVIC_SetPriority+0x50>)
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	3b04      	subs	r3, #4
 8001c5c:	0112      	lsls	r2, r2, #4
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	440b      	add	r3, r1
 8001c62:	761a      	strb	r2, [r3, #24]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000e100 	.word	0xe000e100
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	@ 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f1c3 0307 	rsb	r3, r3, #7
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	bf28      	it	cs
 8001c96:	2304      	movcs	r3, #4
 8001c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	2b06      	cmp	r3, #6
 8001ca0:	d902      	bls.n	8001ca8 <NVIC_EncodePriority+0x30>
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3b03      	subs	r3, #3
 8001ca6:	e000      	b.n	8001caa <NVIC_EncodePriority+0x32>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cac:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	401a      	ands	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	43d9      	mvns	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	4313      	orrs	r3, r2
         );
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3724      	adds	r7, #36	@ 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cf0:	d301      	bcc.n	8001cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00f      	b.n	8001d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d20 <SysTick_Config+0x40>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfe:	210f      	movs	r1, #15
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295
 8001d04:	f7ff ff8e 	bl	8001c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d08:	4b05      	ldr	r3, [pc, #20]	@ (8001d20 <SysTick_Config+0x40>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0e:	4b04      	ldr	r3, [pc, #16]	@ (8001d20 <SysTick_Config+0x40>)
 8001d10:	2207      	movs	r2, #7
 8001d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	e000e010 	.word	0xe000e010

08001d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff ff29 	bl	8001b84 <__NVIC_SetPriorityGrouping>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4603      	mov	r3, r0
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
 8001d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d4c:	f7ff ff3e 	bl	8001bcc <__NVIC_GetPriorityGrouping>
 8001d50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	6978      	ldr	r0, [r7, #20]
 8001d58:	f7ff ff8e 	bl	8001c78 <NVIC_EncodePriority>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d62:	4611      	mov	r1, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff ff5d 	bl	8001c24 <__NVIC_SetPriority>
}
 8001d6a:	bf00      	nop
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff31 	bl	8001be8 <__NVIC_EnableIRQ>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ffa2 	bl	8001ce0 <SysTick_Config>
 8001d9c:	4603      	mov	r3, r0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_CRYP_Init>:
  *       stored in the MCU memory before calling HAL_CRYP_Init(). Refer to explanations
  *       hereabove.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if(hcryp == NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e0cd      	b.n	8001f54 <HAL_CRYP_Init+0x1ae>
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
         ((hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CTR)           \
       || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_GCM_GMAC)      \
       || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CCM)))
#else
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	2b18      	cmp	r3, #24
 8001dbe:	d10e      	bne.n	8001dde <HAL_CRYP_Init+0x38>
         ((hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CTR)           \
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	695b      	ldr	r3, [r3, #20]
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
 8001dc4:	2b40      	cmp	r3, #64	@ 0x40
 8001dc6:	d008      	beq.n	8001dda <HAL_CRYP_Init+0x34>
       || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_GCM_GMAC)      \
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	2b60      	cmp	r3, #96	@ 0x60
 8001dce:	d004      	beq.n	8001dda <HAL_CRYP_Init+0x34>
       || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC)))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dd8:	d101      	bne.n	8001dde <HAL_CRYP_Init+0x38>
#endif
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e0ba      	b.n	8001f54 <HAL_CRYP_Init+0x1ae>
  /* Check that key derivation is not set in CMAC mode or CCM mode when applicable */
#if defined(AES_CR_NPBLB)
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
   && (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CCM))
#else
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	2b08      	cmp	r3, #8
 8001de4:	d106      	bne.n	8001df4 <HAL_CRYP_Init+0x4e>
   && (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dee:	d101      	bne.n	8001df4 <HAL_CRYP_Init+0x4e>
#endif
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0af      	b.n	8001f54 <HAL_CRYP_Init+0x1ae>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if(hcryp->State == HAL_CRYP_STATE_RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d106      	bne.n	8001e0e <HAL_CRYP_Init+0x68>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff fba7 	bl	800155c <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_BUSY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2202      	movs	r2, #2
 8001e12:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  /* Disable the Peripheral */
  __HAL_CRYP_DISABLE(hcryp);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0201 	bic.w	r2, r2, #1
 8001e24:	601a      	str	r2, [r3, #0]

  /*=============================================================*/
  /* AES initialization common to all operating modes            */
  /*=============================================================*/
  /* Set the Key size selection */
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68da      	ldr	r2, [r3, #12]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]

  /* Set the default CRYP phase when this parameter is not used.
     Phase is updated below in case of GCM/GMAC(/CMAC)(/CCM) setting. */
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	220a      	movs	r2, #10
 8001e40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /*=============================================================*/
  /* Carry on the initialization based on the AES operating mode */
  /*=============================================================*/
  /* Key derivation */
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d111      	bne.n	8001e70 <HAL_CRYP_Init+0xca>
  {
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_ALGOMODE_KEYDERIVATION);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 0218 	bic.w	r2, r3, #24
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f042 0208 	orr.w	r2, r2, #8
 8001e5e:	601a      	str	r2, [r3, #0]

    /* Configure the Key registers */
    if (CRYP_SetKey(hcryp) != HAL_OK)
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f906 	bl	8002072 <CRYP_SetKey>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d059      	beq.n	8001f20 <HAL_CRYP_Init+0x17a>
    {
      return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e071      	b.n	8001f54 <HAL_CRYP_Init+0x1ae>
  /* Encryption / Decryption (with or without key derivation) / authentication */
  {
#if !defined(AES_CR_NPBLB)
    /* Set data type, operating and chaining modes.
       In case of GCM or GMAC, data type is forced to 0b00 */
    if (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_GCM_GMAC)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	2b60      	cmp	r3, #96	@ 0x60
 8001e76:	d110      	bne.n	8001e9a <HAL_CRYP_Init+0xf4>
    {
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e82:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6911      	ldr	r1, [r2, #16]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6952      	ldr	r2, [r2, #20]
 8001e8e:	4311      	orrs	r1, r2
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	430b      	orrs	r3, r1
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	e012      	b.n	8001ec0 <HAL_CRYP_Init+0x11a>
    }
    else
#endif
    {
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ea4:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6891      	ldr	r1, [r2, #8]
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6912      	ldr	r2, [r2, #16]
 8001eb0:	4311      	orrs	r1, r2
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6952      	ldr	r2, [r2, #20]
 8001eb6:	4311      	orrs	r1, r2
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	430b      	orrs	r3, r1
 8001ebe:	6013      	str	r3, [r2, #0]
      or Counter with Cipher Mode (CCM) when applicable */
#if defined(AES_CR_NPBLB)
   if ((hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_GCM_GMAC)
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CCM))
#else
   if ((hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_GCM_GMAC)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	2b60      	cmp	r3, #96	@ 0x60
 8001ec6:	d004      	beq.n	8001ed2 <HAL_CRYP_Init+0x12c>
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ed0:	d10e      	bne.n	8001ef0 <HAL_CRYP_Init+0x14a>
#endif
    {
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f423 41c0 	bic.w	r1, r3, #24576	@ 0x6000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69da      	ldr	r2, [r3, #28]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2203      	movs	r2, #3
 8001eec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    }


    /* Configure the Key registers if no need to bypass this step */
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d107      	bne.n	8001f08 <HAL_CRYP_Init+0x162>
    {
      if (CRYP_SetKey(hcryp) != HAL_OK)
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f8ba 	bl	8002072 <CRYP_SetKey>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <HAL_CRYP_Init+0x162>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e025      	b.n	8001f54 <HAL_CRYP_Init+0x1ae>
      }
    }

    /* If applicable, configure the Initialization Vector */
    if (hcryp->Init.ChainingMode != CRYP_CHAINMODE_AES_ECB)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d007      	beq.n	8001f20 <HAL_CRYP_Init+0x17a>
    {
      if (CRYP_SetInitVector(hcryp) != HAL_OK)
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f91c 	bl	800214e <CRYP_SetInitVector>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <HAL_CRYP_Init+0x17a>
      {
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e019      	b.n	8001f54 <HAL_CRYP_Init+0x1ae>
  /* Clear NPBLB field */
  CLEAR_BIT(hcryp->Instance->CR, AES_CR_NPBLB);
#endif

  /* Reset CrypInCount and CrypOutCount */
  hcryp->CrypInCount = 0;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	641a      	str	r2, [r3, #64]	@ 0x40
  hcryp->CrypOutCount = 0;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset ErrorCode field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Reset Mode suspension request */
  hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  /* Enable the Peripheral */
  __HAL_CRYP_ENABLE(hcryp);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 0201 	orr.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_CRYP_DeInit>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_DeInit(CRYP_HandleTypeDef *hcryp)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if(hcryp == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_CRYP_DeInit+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e021      	b.n	8001fb2 <HAL_CRYP_DeInit+0x56>
  }

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_BUSY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2202      	movs	r2, #2
 8001f72:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  /* Set the default CRYP phase */
  hcryp->Phase = HAL_CRYP_PHASE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Reset CrypInCount and CrypOutCount */
  hcryp->CrypInCount = 0;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	641a      	str	r2, [r3, #64]	@ 0x40
  hcryp->CrypOutCount = 0;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the CRYP Peripheral Clock */
  __HAL_CRYP_DISABLE(hcryp);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0201 	bic.w	r2, r2, #1
 8001f98:	601a      	str	r2, [r3, #0]

    /* DeInit the low level hardware */
    hcryp->MspDeInitCallback(hcryp);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_CRYP_MspDeInit(hcryp);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff fafe 	bl	800159c <HAL_CRYP_MspDeInit>
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_RESET;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  /* Release Lock */
  __HAL_UNLOCK(hcryp);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_CRYP_AESCBC_Encrypt>:
  * @note   This API is provided only to maintain compatibility with legacy software. Users should directly
  *         resort to generic HAL_CRYPEx_AES() API instead (usage recommended).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_AESCBC_Encrypt(CRYP_HandleTypeDef *hcryp, uint8_t *pPlainData, uint16_t Size, uint8_t *pCypherData, uint32_t Timeout)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b086      	sub	sp, #24
 8001fbe:	af02      	add	r7, sp, #8
 8001fc0:	60f8      	str	r0, [r7, #12]
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	603b      	str	r3, [r7, #0]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	80fb      	strh	r3, [r7, #6]
  /* Re-initialize AES IP with proper parameters */
  if (HAL_CRYP_DeInit(hcryp) != HAL_OK)
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f7ff ffc6 	bl	8001f5c <HAL_CRYP_DeInit>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_CRYP_AESCBC_Encrypt+0x20>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e019      	b.n	800200e <HAL_CRYP_AESCBC_Encrypt+0x54>
  }
  hcryp->Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
  hcryp->Init.ChainingMode = CRYP_CHAINMODE_AES_CBC;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	615a      	str	r2, [r3, #20]
  hcryp->Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	619a      	str	r2, [r3, #24]
  if (HAL_CRYP_Init(hcryp) != HAL_OK)
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f7ff feda 	bl	8001da6 <HAL_CRYP_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <HAL_CRYP_AESCBC_Encrypt+0x42>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e008      	b.n	800200e <HAL_CRYP_AESCBC_Encrypt+0x54>
  }

  return HAL_CRYPEx_AES(hcryp, pPlainData, Size, pCypherData, Timeout);
 8001ffc:	88fa      	ldrh	r2, [r7, #6]
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 f8f4 	bl	80021f4 <HAL_CRYPEx_AES>
 800200c:	4603      	mov	r3, r0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_CRYP_AESCBC_Decrypt>:
  * @note   This API is provided only to maintain compatibility with legacy software. Users should directly
  *         resort to generic HAL_CRYPEx_AES() API instead (usage recommended).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_AESCBC_Decrypt(CRYP_HandleTypeDef *hcryp, uint8_t *pCypherData, uint16_t Size, uint8_t *pPlainData, uint32_t Timeout)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b086      	sub	sp, #24
 800201a:	af02      	add	r7, sp, #8
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	603b      	str	r3, [r7, #0]
 8002022:	4613      	mov	r3, r2
 8002024:	80fb      	strh	r3, [r7, #6]
  /* Re-initialize AES IP with proper parameters */
  if (HAL_CRYP_DeInit(hcryp) != HAL_OK)
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f7ff ff98 	bl	8001f5c <HAL_CRYP_DeInit>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_CRYP_AESCBC_Decrypt+0x20>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e019      	b.n	800206a <HAL_CRYP_AESCBC_Decrypt+0x54>
  }
  hcryp->Init.OperatingMode = CRYP_ALGOMODE_KEYDERIVATION_DECRYPT;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2218      	movs	r2, #24
 800203a:	611a      	str	r2, [r3, #16]
  hcryp->Init.ChainingMode = CRYP_CHAINMODE_AES_CBC;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2220      	movs	r2, #32
 8002040:	615a      	str	r2, [r3, #20]
  hcryp->Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	619a      	str	r2, [r3, #24]
  if (HAL_CRYP_Init(hcryp) != HAL_OK)
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f7ff feac 	bl	8001da6 <HAL_CRYP_Init>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <HAL_CRYP_AESCBC_Decrypt+0x42>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e008      	b.n	800206a <HAL_CRYP_AESCBC_Decrypt+0x54>
  }

  return HAL_CRYPEx_AES(hcryp, pCypherData, Size, pPlainData, Timeout);
 8002058:	88fa      	ldrh	r2, [r7, #6]
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 f8c6 	bl	80021f4 <HAL_CRYPEx_AES>
 8002068:	4603      	mov	r3, r0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <CRYP_SetKey>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval None
  */
static HAL_StatusTypeDef  CRYP_SetKey(CRYP_HandleTypeDef *hcryp)
{
 8002072:	b480      	push	{r7}
 8002074:	b08d      	sub	sp, #52	@ 0x34
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  uint32_t keyaddr;

  if (hcryp->Init.pKey == NULL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <CRYP_SetKey+0x14>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e05d      	b.n	8002142 <CRYP_SetKey+0xd0>
  }


  keyaddr = (uint32_t)(hcryp->Init.pKey);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002094:	d12b      	bne.n	80020ee <CRYP_SetKey+0x7c>
  {
    hcryp->Instance->KEYR7 = __REV(*(uint32_t*)(keyaddr));
 8002096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	61fa      	str	r2, [r7, #28]
  \return               Reversed value
 */
__STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 80020a0:	69fa      	ldr	r2, [r7, #28]
 80020a2:	ba12      	rev	r2, r2
 80020a4:	63da      	str	r2, [r3, #60]	@ 0x3c
    keyaddr+=4U;
 80020a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020a8:	3304      	adds	r3, #4
 80020aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    hcryp->Instance->KEYR6 = __REV(*(uint32_t*)(keyaddr));
 80020ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	623a      	str	r2, [r7, #32]
 80020b6:	6a3a      	ldr	r2, [r7, #32]
 80020b8:	ba12      	rev	r2, r2
 80020ba:	639a      	str	r2, [r3, #56]	@ 0x38
    keyaddr+=4U;
 80020bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020be:	3304      	adds	r3, #4
 80020c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    hcryp->Instance->KEYR5 = __REV(*(uint32_t*)(keyaddr));
 80020c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	627a      	str	r2, [r7, #36]	@ 0x24
 80020cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020ce:	ba12      	rev	r2, r2
 80020d0:	635a      	str	r2, [r3, #52]	@ 0x34
    keyaddr+=4U;
 80020d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020d4:	3304      	adds	r3, #4
 80020d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    hcryp->Instance->KEYR4 = __REV(*(uint32_t*)(keyaddr));
 80020d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80020e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020e4:	ba12      	rev	r2, r2
 80020e6:	631a      	str	r2, [r3, #48]	@ 0x30
    keyaddr+=4U;
 80020e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020ea:	3304      	adds	r3, #4
 80020ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  hcryp->Instance->KEYR3 = __REV(*(uint32_t*)(keyaddr));
 80020ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	60fa      	str	r2, [r7, #12]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	ba12      	rev	r2, r2
 80020fc:	61da      	str	r2, [r3, #28]
  keyaddr+=4U;
 80020fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002100:	3304      	adds	r3, #4
 8002102:	62fb      	str	r3, [r7, #44]	@ 0x2c
  hcryp->Instance->KEYR2 = __REV(*(uint32_t*)(keyaddr));
 8002104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	613a      	str	r2, [r7, #16]
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	ba12      	rev	r2, r2
 8002112:	619a      	str	r2, [r3, #24]
  keyaddr+=4U;
 8002114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002116:	3304      	adds	r3, #4
 8002118:	62fb      	str	r3, [r7, #44]	@ 0x2c
  hcryp->Instance->KEYR1 = __REV(*(uint32_t*)(keyaddr));
 800211a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	617a      	str	r2, [r7, #20]
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	ba12      	rev	r2, r2
 8002128:	615a      	str	r2, [r3, #20]
  keyaddr+=4U;
 800212a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800212c:	3304      	adds	r3, #4
 800212e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  hcryp->Instance->KEYR0 = __REV(*(uint32_t*)(keyaddr));
 8002130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	61ba      	str	r2, [r7, #24]
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	ba12      	rev	r2, r2
 800213e:	611a      	str	r2, [r3, #16]

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3734      	adds	r7, #52	@ 0x34
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <CRYP_SetInitVector>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval None
  */
static HAL_StatusTypeDef CRYP_SetInitVector(CRYP_HandleTypeDef *hcryp)
{
 800214e:	b480      	push	{r7}
 8002150:	b089      	sub	sp, #36	@ 0x24
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  uint32_t ivaddr;

#if !defined(AES_CR_NPBLB)
  if (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800215e:	d110      	bne.n	8002182 <CRYP_SetInitVector+0x34>
  {
    hcryp->Instance->IVR3 = 0;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2200      	movs	r2, #0
 8002166:	62da      	str	r2, [r3, #44]	@ 0x2c
    hcryp->Instance->IVR2 = 0;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2200      	movs	r2, #0
 800216e:	629a      	str	r2, [r3, #40]	@ 0x28
    hcryp->Instance->IVR1 = 0;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2200      	movs	r2, #0
 8002176:	625a      	str	r2, [r3, #36]	@ 0x24
    hcryp->Instance->IVR0 = 0;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2200      	movs	r2, #0
 800217e:	621a      	str	r2, [r3, #32]
 8002180:	e031      	b.n	80021e6 <CRYP_SetInitVector+0x98>
  }
  else
#endif
  {
    if (hcryp->Init.pInitVect == NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <CRYP_SetInitVector+0x40>
    {
      return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e02c      	b.n	80021e8 <CRYP_SetInitVector+0x9a>
    }

    ivaddr = (uint32_t)(hcryp->Init.pInitVect);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002192:	61fb      	str	r3, [r7, #28]

    hcryp->Instance->IVR3 = __REV(*(uint32_t*)(ivaddr));
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	60fa      	str	r2, [r7, #12]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	ba12      	rev	r2, r2
 80021a2:	62da      	str	r2, [r3, #44]	@ 0x2c
    ivaddr+=4U;
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	3304      	adds	r3, #4
 80021a8:	61fb      	str	r3, [r7, #28]
    hcryp->Instance->IVR2 = __REV(*(uint32_t*)(ivaddr));
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	613a      	str	r2, [r7, #16]
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	ba12      	rev	r2, r2
 80021b8:	629a      	str	r2, [r3, #40]	@ 0x28
    ivaddr+=4U;
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3304      	adds	r3, #4
 80021be:	61fb      	str	r3, [r7, #28]
    hcryp->Instance->IVR1 = __REV(*(uint32_t*)(ivaddr));
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	617a      	str	r2, [r7, #20]
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	ba12      	rev	r2, r2
 80021ce:	625a      	str	r2, [r3, #36]	@ 0x24
    ivaddr+=4U;
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	3304      	adds	r3, #4
 80021d4:	61fb      	str	r3, [r7, #28]
    hcryp->Instance->IVR0 = __REV(*(uint32_t*)(ivaddr));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	61ba      	str	r2, [r7, #24]
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	ba12      	rev	r2, r2
 80021e4:	621a      	str	r2, [r3, #32]
  }
  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3724      	adds	r7, #36	@ 0x24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_CRYPEx_AES>:
  *                     case of key derivation only.
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYPEx_AES(CRYP_HandleTypeDef *hcryp, uint8_t *pInputData, uint16_t Size, uint8_t *pOutputData, uint32_t Timeout)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af02      	add	r7, sp, #8
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	603b      	str	r3, [r7, #0]
 8002200:	4613      	mov	r3, r2
 8002202:	80fb      	strh	r3, [r7, #6]

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b01      	cmp	r3, #1
 800220e:	d14d      	bne.n	80022ac <HAL_CRYPEx_AES+0xb8>
  {
    /* Check parameters setting */
    if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	2b08      	cmp	r3, #8
 8002216:	d104      	bne.n	8002222 <HAL_CRYPEx_AES+0x2e>
    {
      if (pOutputData == NULL)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10c      	bne.n	8002238 <HAL_CRYPEx_AES+0x44>
      {
        return  HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e045      	b.n	80022ae <HAL_CRYPEx_AES+0xba>
      }
    }
    else
    {
      if ((pInputData == NULL) || (pOutputData == NULL) || (Size == 0U))
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <HAL_CRYPEx_AES+0x40>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <HAL_CRYPEx_AES+0x40>
 800222e:	88fb      	ldrh	r3, [r7, #6]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_CRYPEx_AES+0x44>
      {
        return  HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e03a      	b.n	80022ae <HAL_CRYPEx_AES+0xba>
      }
    }

    /* Process Locked */
    __HAL_LOCK(hcryp);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_CRYPEx_AES+0x52>
 8002242:	2302      	movs	r3, #2
 8002244:	e033      	b.n	80022ae <HAL_CRYPEx_AES+0xba>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Change the CRYP state */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2202      	movs	r2, #2
 8002252:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

    /* Call CRYP_ReadKey() API if the operating mode is set to
       key derivation, CRYP_ProcessData() otherwise  */
    if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	2b08      	cmp	r3, #8
 800225c:	d109      	bne.n	8002272 <HAL_CRYPEx_AES+0x7e>
    {
      if(CRYP_ReadKey(hcryp, pOutputData, Timeout) != HAL_OK)
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	6839      	ldr	r1, [r7, #0]
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 f8be 	bl	80023e4 <CRYP_ReadKey>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00e      	beq.n	800228c <HAL_CRYPEx_AES+0x98>
      {
        return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e01d      	b.n	80022ae <HAL_CRYPEx_AES+0xba>
      }
    }
    else
    {
      if(CRYP_ProcessData(hcryp, pInputData, Size, pOutputData, Timeout) != HAL_OK)
 8002272:	88fa      	ldrh	r2, [r7, #6]
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	68b9      	ldr	r1, [r7, #8]
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 f81a 	bl	80022b6 <CRYP_ProcessData>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_CRYPEx_AES+0x98>
      {
        return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e010      	b.n	80022ae <HAL_CRYPEx_AES+0xba>
      }
    }

    /* If the state has not been set to SUSPENDED, set it to
       READY, otherwise keep it as it is */
    if (hcryp->State != HAL_CRYP_STATE_SUSPENDED)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b05      	cmp	r3, #5
 8002296:	d003      	beq.n	80022a0 <HAL_CRYPEx_AES+0xac>
    {
      hcryp->State = HAL_CRYP_STATE_READY;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hcryp);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_OK;
 80022a8:	2300      	movs	r3, #0
 80022aa:	e000      	b.n	80022ae <HAL_CRYPEx_AES+0xba>
  }
  else
  {
    return HAL_BUSY;
 80022ac:	2302      	movs	r3, #2
  }
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <CRYP_ProcessData>:
  * @param  Output Pointer to the returned buffer.
  * @param  Timeout Specify Timeout value.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_ProcessData(CRYP_HandleTypeDef *hcryp, uint8_t* Input, uint16_t Ilength, uint8_t* Output, uint32_t Timeout)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b088      	sub	sp, #32
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	60f8      	str	r0, [r7, #12]
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	603b      	str	r3, [r7, #0]
 80022c2:	4613      	mov	r3, r2
 80022c4:	80fb      	strh	r3, [r7, #6]
  uint32_t index;
  uint32_t inputaddr  = (uint32_t)Input;
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	61bb      	str	r3, [r7, #24]
  uint32_t outputaddr = (uint32_t)Output;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	617b      	str	r3, [r7, #20]


  for(index=0U ; (index < Ilength); index += 16U)
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
 80022d2:	e07d      	b.n	80023d0 <CRYP_ProcessData+0x11a>
  {
    /* Write the Input block in the Data Input register */
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	609a      	str	r2, [r3, #8]
    inputaddr+=4U;
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	3304      	adds	r3, #4
 80022e2:	61bb      	str	r3, [r7, #24]
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	609a      	str	r2, [r3, #8]
    inputaddr+=4U;
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	3304      	adds	r3, #4
 80022f2:	61bb      	str	r3, [r7, #24]
    hcryp->Instance->DINR  = *(uint32_t*)(inputaddr);
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	609a      	str	r2, [r3, #8]
    inputaddr+=4U;
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	3304      	adds	r3, #4
 8002302:	61bb      	str	r3, [r7, #24]
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	609a      	str	r2, [r3, #8]
    inputaddr+=4U;
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	3304      	adds	r3, #4
 8002312:	61bb      	str	r3, [r7, #24]

    /* Wait for CCF flag to be raised */
    if(CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8002314:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 f8e4 	bl	80024e4 <CRYP_WaitOnCCFlag>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d009      	beq.n	8002336 <CRYP_ProcessData+0x80>
    {
      hcryp->State = HAL_CRYP_STATE_READY;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
      __HAL_UNLOCK(hcryp);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e052      	b.n	80023dc <CRYP_ProcessData+0x126>
    }

    /* Clear CCF Flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002344:	601a      	str	r2, [r3, #0]

    /* Read the Output block from the Data Output Register */
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	68d2      	ldr	r2, [r2, #12]
 800234e:	601a      	str	r2, [r3, #0]
    outputaddr+=4U;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	3304      	adds	r3, #4
 8002354:	617b      	str	r3, [r7, #20]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	68d2      	ldr	r2, [r2, #12]
 800235e:	601a      	str	r2, [r3, #0]
    outputaddr+=4U;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	3304      	adds	r3, #4
 8002364:	617b      	str	r3, [r7, #20]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	68d2      	ldr	r2, [r2, #12]
 800236e:	601a      	str	r2, [r3, #0]
    outputaddr+=4U;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	3304      	adds	r3, #4
 8002374:	617b      	str	r3, [r7, #20]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	68d2      	ldr	r2, [r2, #12]
 800237e:	601a      	str	r2, [r3, #0]
    outputaddr+=4U;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	3304      	adds	r3, #4
 8002384:	617b      	str	r3, [r7, #20]

    /* If the suspension flag has been raised and if the processing is not about
       to end, suspend processing */
    if ((hcryp->SuspendRequest == HAL_CRYP_SUSPEND) && ((index+16U) < Ilength))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800238c:	2b01      	cmp	r3, #1
 800238e:	d11c      	bne.n	80023ca <CRYP_ProcessData+0x114>
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f103 0210 	add.w	r2, r3, #16
 8002396:	88fb      	ldrh	r3, [r7, #6]
 8002398:	429a      	cmp	r2, r3
 800239a:	d216      	bcs.n	80023ca <CRYP_ProcessData+0x114>
    {
      /* Reset SuspendRequest */
      hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      /* Save current reading and writing locations of Input and Output buffers */
      hcryp->pCrypOutBuffPtr =  (uint8_t *)outputaddr;
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	63da      	str	r2, [r3, #60]	@ 0x3c
      hcryp->pCrypInBuffPtr  =  (uint8_t *)inputaddr;
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Save the number of bytes that remain to be processed at this point */
      hcryp->CrypInCount     =  Ilength - (index+16U);
 80023b0:	88fa      	ldrh	r2, [r7, #6]
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	f1a3 0210 	sub.w	r2, r3, #16
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Change the CRYP state */
      hcryp->State = HAL_CRYP_STATE_SUSPENDED;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2205      	movs	r2, #5
 80023c2:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

      return HAL_OK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	e008      	b.n	80023dc <CRYP_ProcessData+0x126>
  for(index=0U ; (index < Ilength); index += 16U)
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3310      	adds	r3, #16
 80023ce:	61fb      	str	r3, [r7, #28]
 80023d0:	88fb      	ldrh	r3, [r7, #6]
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	f4ff af7d 	bcc.w	80022d4 <CRYP_ProcessData+0x1e>
    }


  }
  /* Return function status */
  return HAL_OK;
 80023da:	2300      	movs	r3, #0

}
 80023dc:	4618      	mov	r0, r3
 80023de:	3720      	adds	r7, #32
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <CRYP_ReadKey>:
  * @param  Output Pointer to the returned buffer.
  * @param  Timeout Specify Timeout value.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_ReadKey(CRYP_HandleTypeDef *hcryp, uint8_t* Output, uint32_t Timeout)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08e      	sub	sp, #56	@ 0x38
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  uint32_t outputaddr = (uint32_t)Output;
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Wait for CCF flag to be raised */
  if(CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f874 	bl	80024e4 <CRYP_WaitOnCCFlag>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d009      	beq.n	8002416 <CRYP_ReadKey+0x32>
  {
    hcryp->State = HAL_CRYP_STATE_READY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
    __HAL_UNLOCK(hcryp);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e062      	b.n	80024dc <CRYP_ReadKey+0xf8>
  }
  /* Clear CCF Flag */
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002424:	601a      	str	r2, [r3, #0]

    /* Read the derivative key from the AES_KEYRx registers */
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800242e:	d12b      	bne.n	8002488 <CRYP_ReadKey+0xa4>
  {
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR7);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002438:	627a      	str	r2, [r7, #36]	@ 0x24
 800243a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800243c:	ba12      	rev	r2, r2
 800243e:	601a      	str	r2, [r3, #0]
    outputaddr+=4U;
 8002440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002442:	3304      	adds	r3, #4
 8002444:	637b      	str	r3, [r7, #52]	@ 0x34
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR6);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800244c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800244e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002450:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002452:	ba12      	rev	r2, r2
 8002454:	601a      	str	r2, [r3, #0]
    outputaddr+=4U;
 8002456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002458:	3304      	adds	r3, #4
 800245a:	637b      	str	r3, [r7, #52]	@ 0x34
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR5);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002464:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002466:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002468:	ba12      	rev	r2, r2
 800246a:	601a      	str	r2, [r3, #0]
    outputaddr+=4U;
 800246c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800246e:	3304      	adds	r3, #4
 8002470:	637b      	str	r3, [r7, #52]	@ 0x34
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR4);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800247a:	633a      	str	r2, [r7, #48]	@ 0x30
 800247c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800247e:	ba12      	rev	r2, r2
 8002480:	601a      	str	r2, [r3, #0]
    outputaddr+=4U;
 8002482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002484:	3304      	adds	r3, #4
 8002486:	637b      	str	r3, [r7, #52]	@ 0x34
  }

    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR3);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	69da      	ldr	r2, [r3, #28]
 800248e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002490:	617a      	str	r2, [r7, #20]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	ba12      	rev	r2, r2
 8002496:	601a      	str	r2, [r3, #0]
    outputaddr+=4U;
 8002498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800249a:	3304      	adds	r3, #4
 800249c:	637b      	str	r3, [r7, #52]	@ 0x34
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR2);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699a      	ldr	r2, [r3, #24]
 80024a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024a6:	61ba      	str	r2, [r7, #24]
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	ba12      	rev	r2, r2
 80024ac:	601a      	str	r2, [r3, #0]
    outputaddr+=4U;
 80024ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024b0:	3304      	adds	r3, #4
 80024b2:	637b      	str	r3, [r7, #52]	@ 0x34
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR1);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	695a      	ldr	r2, [r3, #20]
 80024ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024bc:	61fa      	str	r2, [r7, #28]
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	ba12      	rev	r2, r2
 80024c2:	601a      	str	r2, [r3, #0]
    outputaddr+=4U;
 80024c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024c6:	3304      	adds	r3, #4
 80024c8:	637b      	str	r3, [r7, #52]	@ 0x34
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR0);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024d2:	623a      	str	r2, [r7, #32]
 80024d4:	6a3a      	ldr	r2, [r7, #32]
 80024d6:	ba12      	rev	r2, r2
 80024d8:	601a      	str	r2, [r3, #0]


  /* Return function status */
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3738      	adds	r7, #56	@ 0x38
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <CRYP_WaitOnCCFlag>:
  *         the configuration information for CRYP module.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef const * const hcryp, uint32_t Timeout)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 80024ee:	f7ff fb19 	bl	8001b24 <HAL_GetTick>
 80024f2:	60f8      	str	r0, [r7, #12]

  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 80024f4:	e00d      	b.n	8002512 <CRYP_WaitOnCCFlag+0x2e>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fc:	d009      	beq.n	8002512 <CRYP_WaitOnCCFlag+0x2e>
    {
      if((HAL_GetTick() - tickstart ) > Timeout)
 80024fe:	f7ff fb11 	bl	8001b24 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d201      	bcs.n	8002512 <CRYP_WaitOnCCFlag+0x2e>
      {
        return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e007      	b.n	8002522 <CRYP_WaitOnCCFlag+0x3e>
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0ea      	beq.n	80024f6 <CRYP_WaitOnCCFlag+0x12>
      }
    }
  }
  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e098      	b.n	8002670 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	4b4d      	ldr	r3, [pc, #308]	@ (800267c <HAL_DMA_Init+0x150>)
 8002546:	429a      	cmp	r2, r3
 8002548:	d80f      	bhi.n	800256a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	4b4b      	ldr	r3, [pc, #300]	@ (8002680 <HAL_DMA_Init+0x154>)
 8002552:	4413      	add	r3, r2
 8002554:	4a4b      	ldr	r2, [pc, #300]	@ (8002684 <HAL_DMA_Init+0x158>)
 8002556:	fba2 2303 	umull	r2, r3, r2, r3
 800255a:	091b      	lsrs	r3, r3, #4
 800255c:	009a      	lsls	r2, r3, #2
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a48      	ldr	r2, [pc, #288]	@ (8002688 <HAL_DMA_Init+0x15c>)
 8002566:	641a      	str	r2, [r3, #64]	@ 0x40
 8002568:	e00e      	b.n	8002588 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	461a      	mov	r2, r3
 8002570:	4b46      	ldr	r3, [pc, #280]	@ (800268c <HAL_DMA_Init+0x160>)
 8002572:	4413      	add	r3, r2
 8002574:	4a43      	ldr	r2, [pc, #268]	@ (8002684 <HAL_DMA_Init+0x158>)
 8002576:	fba2 2303 	umull	r2, r3, r2, r3
 800257a:	091b      	lsrs	r3, r3, #4
 800257c:	009a      	lsls	r2, r3, #2
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a42      	ldr	r2, [pc, #264]	@ (8002690 <HAL_DMA_Init+0x164>)
 8002586:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2202      	movs	r2, #2
 800258c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800259e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80025ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025e2:	d039      	beq.n	8002658 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e8:	4a27      	ldr	r2, [pc, #156]	@ (8002688 <HAL_DMA_Init+0x15c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d11a      	bne.n	8002624 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80025ee:	4b29      	ldr	r3, [pc, #164]	@ (8002694 <HAL_DMA_Init+0x168>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f6:	f003 031c 	and.w	r3, r3, #28
 80025fa:	210f      	movs	r1, #15
 80025fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	4924      	ldr	r1, [pc, #144]	@ (8002694 <HAL_DMA_Init+0x168>)
 8002604:	4013      	ands	r3, r2
 8002606:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002608:	4b22      	ldr	r3, [pc, #136]	@ (8002694 <HAL_DMA_Init+0x168>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6859      	ldr	r1, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002614:	f003 031c 	and.w	r3, r3, #28
 8002618:	fa01 f303 	lsl.w	r3, r1, r3
 800261c:	491d      	ldr	r1, [pc, #116]	@ (8002694 <HAL_DMA_Init+0x168>)
 800261e:	4313      	orrs	r3, r2
 8002620:	600b      	str	r3, [r1, #0]
 8002622:	e019      	b.n	8002658 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002624:	4b1c      	ldr	r3, [pc, #112]	@ (8002698 <HAL_DMA_Init+0x16c>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262c:	f003 031c 	and.w	r3, r3, #28
 8002630:	210f      	movs	r1, #15
 8002632:	fa01 f303 	lsl.w	r3, r1, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	4917      	ldr	r1, [pc, #92]	@ (8002698 <HAL_DMA_Init+0x16c>)
 800263a:	4013      	ands	r3, r2
 800263c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800263e:	4b16      	ldr	r3, [pc, #88]	@ (8002698 <HAL_DMA_Init+0x16c>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6859      	ldr	r1, [r3, #4]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264a:	f003 031c 	and.w	r3, r3, #28
 800264e:	fa01 f303 	lsl.w	r3, r1, r3
 8002652:	4911      	ldr	r1, [pc, #68]	@ (8002698 <HAL_DMA_Init+0x16c>)
 8002654:	4313      	orrs	r3, r2
 8002656:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	40020407 	.word	0x40020407
 8002680:	bffdfff8 	.word	0xbffdfff8
 8002684:	cccccccd 	.word	0xcccccccd
 8002688:	40020000 	.word	0x40020000
 800268c:	bffdfbf8 	.word	0xbffdfbf8
 8002690:	40020400 	.word	0x40020400
 8002694:	400200a8 	.word	0x400200a8
 8002698:	400204a8 	.word	0x400204a8

0800269c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e072      	b.n	8002794 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0201 	bic.w	r2, r2, #1
 80026bc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	4b36      	ldr	r3, [pc, #216]	@ (80027a0 <HAL_DMA_DeInit+0x104>)
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d80f      	bhi.n	80026ea <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	4b34      	ldr	r3, [pc, #208]	@ (80027a4 <HAL_DMA_DeInit+0x108>)
 80026d2:	4413      	add	r3, r2
 80026d4:	4a34      	ldr	r2, [pc, #208]	@ (80027a8 <HAL_DMA_DeInit+0x10c>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	091b      	lsrs	r3, r3, #4
 80026dc:	009a      	lsls	r2, r3, #2
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a31      	ldr	r2, [pc, #196]	@ (80027ac <HAL_DMA_DeInit+0x110>)
 80026e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80026e8:	e00e      	b.n	8002708 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	461a      	mov	r2, r3
 80026f0:	4b2f      	ldr	r3, [pc, #188]	@ (80027b0 <HAL_DMA_DeInit+0x114>)
 80026f2:	4413      	add	r3, r2
 80026f4:	4a2c      	ldr	r2, [pc, #176]	@ (80027a8 <HAL_DMA_DeInit+0x10c>)
 80026f6:	fba2 2303 	umull	r2, r3, r2, r3
 80026fa:	091b      	lsrs	r3, r3, #4
 80026fc:	009a      	lsls	r2, r3, #2
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a2b      	ldr	r2, [pc, #172]	@ (80027b4 <HAL_DMA_DeInit+0x118>)
 8002706:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002714:	f003 021c 	and.w	r2, r3, #28
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271c:	2101      	movs	r1, #1
 800271e:	fa01 f202 	lsl.w	r2, r1, r2
 8002722:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002728:	4a20      	ldr	r2, [pc, #128]	@ (80027ac <HAL_DMA_DeInit+0x110>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d10d      	bne.n	800274a <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800272e:	4b22      	ldr	r3, [pc, #136]	@ (80027b8 <HAL_DMA_DeInit+0x11c>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002736:	f003 031c 	and.w	r3, r3, #28
 800273a:	210f      	movs	r1, #15
 800273c:	fa01 f303 	lsl.w	r3, r1, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	491d      	ldr	r1, [pc, #116]	@ (80027b8 <HAL_DMA_DeInit+0x11c>)
 8002744:	4013      	ands	r3, r2
 8002746:	600b      	str	r3, [r1, #0]
 8002748:	e00c      	b.n	8002764 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800274a:	4b1c      	ldr	r3, [pc, #112]	@ (80027bc <HAL_DMA_DeInit+0x120>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002752:	f003 031c 	and.w	r3, r3, #28
 8002756:	210f      	movs	r1, #15
 8002758:	fa01 f303 	lsl.w	r3, r1, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	4917      	ldr	r1, [pc, #92]	@ (80027bc <HAL_DMA_DeInit+0x120>)
 8002760:	4013      	ands	r3, r2
 8002762:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	40020407 	.word	0x40020407
 80027a4:	bffdfff8 	.word	0xbffdfff8
 80027a8:	cccccccd 	.word	0xcccccccd
 80027ac:	40020000 	.word	0x40020000
 80027b0:	bffdfbf8 	.word	0xbffdfbf8
 80027b4:	40020400 	.word	0x40020400
 80027b8:	400200a8 	.word	0x400200a8
 80027bc:	400204a8 	.word	0x400204a8

080027c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
 80027cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_DMA_Start_IT+0x20>
 80027dc:	2302      	movs	r3, #2
 80027de:	e04b      	b.n	8002878 <HAL_DMA_Start_IT+0xb8>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d13a      	bne.n	800286a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0201 	bic.w	r2, r2, #1
 8002810:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	68b9      	ldr	r1, [r7, #8]
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 f95f 	bl	8002adc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002822:	2b00      	cmp	r3, #0
 8002824:	d008      	beq.n	8002838 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f042 020e 	orr.w	r2, r2, #14
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	e00f      	b.n	8002858 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0204 	bic.w	r2, r2, #4
 8002846:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 020a 	orr.w	r2, r2, #10
 8002856:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	e005      	b.n	8002876 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002872:	2302      	movs	r3, #2
 8002874:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002876:	7dfb      	ldrb	r3, [r7, #23]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d008      	beq.n	80028aa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2204      	movs	r2, #4
 800289c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e022      	b.n	80028f0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 020e 	bic.w	r2, r2, #14
 80028b8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0201 	bic.w	r2, r2, #1
 80028c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ce:	f003 021c 	and.w	r2, r3, #28
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d6:	2101      	movs	r1, #1
 80028d8:	fa01 f202 	lsl.w	r2, r1, r2
 80028dc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d005      	beq.n	8002920 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2204      	movs	r2, #4
 8002918:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
 800291e:	e029      	b.n	8002974 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 020e 	bic.w	r2, r2, #14
 800292e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0201 	bic.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002944:	f003 021c 	and.w	r2, r3, #28
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294c:	2101      	movs	r1, #1
 800294e:	fa01 f202 	lsl.w	r2, r1, r2
 8002952:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	4798      	blx	r3
    }
  }
  return status;
 8002974:	7bfb      	ldrb	r3, [r7, #15]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299a:	f003 031c 	and.w	r3, r3, #28
 800299e:	2204      	movs	r2, #4
 80029a0:	409a      	lsls	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d026      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x7a>
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d021      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0320 	and.w	r3, r3, #32
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d107      	bne.n	80029d2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0204 	bic.w	r2, r2, #4
 80029d0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d6:	f003 021c 	and.w	r2, r3, #28
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029de:	2104      	movs	r1, #4
 80029e0:	fa01 f202 	lsl.w	r2, r1, r2
 80029e4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d071      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80029f6:	e06c      	b.n	8002ad2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fc:	f003 031c 	and.w	r3, r3, #28
 8002a00:	2202      	movs	r2, #2
 8002a02:	409a      	lsls	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d02e      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xec>
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d029      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0320 	and.w	r3, r3, #32
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10b      	bne.n	8002a3c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 020a 	bic.w	r2, r2, #10
 8002a32:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a40:	f003 021c 	and.w	r2, r3, #28
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a48:	2102      	movs	r1, #2
 8002a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a4e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d038      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002a68:	e033      	b.n	8002ad2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6e:	f003 031c 	and.w	r3, r3, #28
 8002a72:	2208      	movs	r2, #8
 8002a74:	409a      	lsls	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d02a      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x156>
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d025      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 020e 	bic.w	r2, r2, #14
 8002a96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9c:	f003 021c 	and.w	r2, r3, #28
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aaa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d004      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ad2:	bf00      	nop
 8002ad4:	bf00      	nop
}
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aee:	f003 021c 	and.w	r2, r3, #28
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af6:	2101      	movs	r1, #1
 8002af8:	fa01 f202 	lsl.w	r2, r1, r2
 8002afc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	2b10      	cmp	r3, #16
 8002b0c:	d108      	bne.n	8002b20 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b1e:	e007      	b.n	8002b30 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	60da      	str	r2, [r3, #12]
}
 8002b30:	bf00      	nop
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b4a:	e166      	b.n	8002e1a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	2101      	movs	r1, #1
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	fa01 f303 	lsl.w	r3, r1, r3
 8002b58:	4013      	ands	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 8158 	beq.w	8002e14 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d005      	beq.n	8002b7c <HAL_GPIO_Init+0x40>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d130      	bne.n	8002bde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	2203      	movs	r2, #3
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4013      	ands	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	091b      	lsrs	r3, r3, #4
 8002bc8:	f003 0201 	and.w	r2, r3, #1
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	2b03      	cmp	r3, #3
 8002be8:	d017      	beq.n	8002c1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d123      	bne.n	8002c6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	08da      	lsrs	r2, r3, #3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3208      	adds	r2, #8
 8002c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	220f      	movs	r2, #15
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4013      	ands	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	691a      	ldr	r2, [r3, #16]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	08da      	lsrs	r2, r3, #3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3208      	adds	r2, #8
 8002c68:	6939      	ldr	r1, [r7, #16]
 8002c6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	2203      	movs	r2, #3
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4013      	ands	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 0203 	and.w	r2, r3, #3
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 80b2 	beq.w	8002e14 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb0:	4b61      	ldr	r3, [pc, #388]	@ (8002e38 <HAL_GPIO_Init+0x2fc>)
 8002cb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cb4:	4a60      	ldr	r2, [pc, #384]	@ (8002e38 <HAL_GPIO_Init+0x2fc>)
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cbc:	4b5e      	ldr	r3, [pc, #376]	@ (8002e38 <HAL_GPIO_Init+0x2fc>)
 8002cbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cc8:	4a5c      	ldr	r2, [pc, #368]	@ (8002e3c <HAL_GPIO_Init+0x300>)
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	089b      	lsrs	r3, r3, #2
 8002cce:	3302      	adds	r3, #2
 8002cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f003 0303 	and.w	r3, r3, #3
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	220f      	movs	r2, #15
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002cf2:	d02b      	beq.n	8002d4c <HAL_GPIO_Init+0x210>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a52      	ldr	r2, [pc, #328]	@ (8002e40 <HAL_GPIO_Init+0x304>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d025      	beq.n	8002d48 <HAL_GPIO_Init+0x20c>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a51      	ldr	r2, [pc, #324]	@ (8002e44 <HAL_GPIO_Init+0x308>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d01f      	beq.n	8002d44 <HAL_GPIO_Init+0x208>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a50      	ldr	r2, [pc, #320]	@ (8002e48 <HAL_GPIO_Init+0x30c>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d019      	beq.n	8002d40 <HAL_GPIO_Init+0x204>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a4f      	ldr	r2, [pc, #316]	@ (8002e4c <HAL_GPIO_Init+0x310>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d013      	beq.n	8002d3c <HAL_GPIO_Init+0x200>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a4e      	ldr	r2, [pc, #312]	@ (8002e50 <HAL_GPIO_Init+0x314>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d00d      	beq.n	8002d38 <HAL_GPIO_Init+0x1fc>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a4d      	ldr	r2, [pc, #308]	@ (8002e54 <HAL_GPIO_Init+0x318>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d007      	beq.n	8002d34 <HAL_GPIO_Init+0x1f8>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a4c      	ldr	r2, [pc, #304]	@ (8002e58 <HAL_GPIO_Init+0x31c>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d101      	bne.n	8002d30 <HAL_GPIO_Init+0x1f4>
 8002d2c:	2307      	movs	r3, #7
 8002d2e:	e00e      	b.n	8002d4e <HAL_GPIO_Init+0x212>
 8002d30:	2308      	movs	r3, #8
 8002d32:	e00c      	b.n	8002d4e <HAL_GPIO_Init+0x212>
 8002d34:	2306      	movs	r3, #6
 8002d36:	e00a      	b.n	8002d4e <HAL_GPIO_Init+0x212>
 8002d38:	2305      	movs	r3, #5
 8002d3a:	e008      	b.n	8002d4e <HAL_GPIO_Init+0x212>
 8002d3c:	2304      	movs	r3, #4
 8002d3e:	e006      	b.n	8002d4e <HAL_GPIO_Init+0x212>
 8002d40:	2303      	movs	r3, #3
 8002d42:	e004      	b.n	8002d4e <HAL_GPIO_Init+0x212>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e002      	b.n	8002d4e <HAL_GPIO_Init+0x212>
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e000      	b.n	8002d4e <HAL_GPIO_Init+0x212>
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	f002 0203 	and.w	r2, r2, #3
 8002d54:	0092      	lsls	r2, r2, #2
 8002d56:	4093      	lsls	r3, r2
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d5e:	4937      	ldr	r1, [pc, #220]	@ (8002e3c <HAL_GPIO_Init+0x300>)
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	089b      	lsrs	r3, r3, #2
 8002d64:	3302      	adds	r3, #2
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d6c:	4b3b      	ldr	r3, [pc, #236]	@ (8002e5c <HAL_GPIO_Init+0x320>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	43db      	mvns	r3, r3
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d90:	4a32      	ldr	r2, [pc, #200]	@ (8002e5c <HAL_GPIO_Init+0x320>)
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d96:	4b31      	ldr	r3, [pc, #196]	@ (8002e5c <HAL_GPIO_Init+0x320>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4013      	ands	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002dba:	4a28      	ldr	r2, [pc, #160]	@ (8002e5c <HAL_GPIO_Init+0x320>)
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002dc0:	4b26      	ldr	r3, [pc, #152]	@ (8002e5c <HAL_GPIO_Init+0x320>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002de4:	4a1d      	ldr	r2, [pc, #116]	@ (8002e5c <HAL_GPIO_Init+0x320>)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002dea:	4b1c      	ldr	r3, [pc, #112]	@ (8002e5c <HAL_GPIO_Init+0x320>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	43db      	mvns	r3, r3
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	4013      	ands	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e0e:	4a13      	ldr	r2, [pc, #76]	@ (8002e5c <HAL_GPIO_Init+0x320>)
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	3301      	adds	r3, #1
 8002e18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	fa22 f303 	lsr.w	r3, r2, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f47f ae91 	bne.w	8002b4c <HAL_GPIO_Init+0x10>
  }
}
 8002e2a:	bf00      	nop
 8002e2c:	bf00      	nop
 8002e2e:	371c      	adds	r7, #28
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	40010000 	.word	0x40010000
 8002e40:	48000400 	.word	0x48000400
 8002e44:	48000800 	.word	0x48000800
 8002e48:	48000c00 	.word	0x48000c00
 8002e4c:	48001000 	.word	0x48001000
 8002e50:	48001400 	.word	0x48001400
 8002e54:	48001800 	.word	0x48001800
 8002e58:	48001c00 	.word	0x48001c00
 8002e5c:	40010400 	.word	0x40010400

08002e60 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002e6e:	e0c9      	b.n	8003004 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002e70:	2201      	movs	r2, #1
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 80bc 	beq.w	8002ffe <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002e86:	4a66      	ldr	r2, [pc, #408]	@ (8003020 <HAL_GPIO_DeInit+0x1c0>)
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	089b      	lsrs	r3, r3, #2
 8002e8c:	3302      	adds	r3, #2
 8002e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e92:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	220f      	movs	r2, #15
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002eae:	d02b      	beq.n	8002f08 <HAL_GPIO_DeInit+0xa8>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a5c      	ldr	r2, [pc, #368]	@ (8003024 <HAL_GPIO_DeInit+0x1c4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d025      	beq.n	8002f04 <HAL_GPIO_DeInit+0xa4>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a5b      	ldr	r2, [pc, #364]	@ (8003028 <HAL_GPIO_DeInit+0x1c8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d01f      	beq.n	8002f00 <HAL_GPIO_DeInit+0xa0>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a5a      	ldr	r2, [pc, #360]	@ (800302c <HAL_GPIO_DeInit+0x1cc>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d019      	beq.n	8002efc <HAL_GPIO_DeInit+0x9c>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a59      	ldr	r2, [pc, #356]	@ (8003030 <HAL_GPIO_DeInit+0x1d0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d013      	beq.n	8002ef8 <HAL_GPIO_DeInit+0x98>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a58      	ldr	r2, [pc, #352]	@ (8003034 <HAL_GPIO_DeInit+0x1d4>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00d      	beq.n	8002ef4 <HAL_GPIO_DeInit+0x94>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a57      	ldr	r2, [pc, #348]	@ (8003038 <HAL_GPIO_DeInit+0x1d8>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d007      	beq.n	8002ef0 <HAL_GPIO_DeInit+0x90>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a56      	ldr	r2, [pc, #344]	@ (800303c <HAL_GPIO_DeInit+0x1dc>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d101      	bne.n	8002eec <HAL_GPIO_DeInit+0x8c>
 8002ee8:	2307      	movs	r3, #7
 8002eea:	e00e      	b.n	8002f0a <HAL_GPIO_DeInit+0xaa>
 8002eec:	2308      	movs	r3, #8
 8002eee:	e00c      	b.n	8002f0a <HAL_GPIO_DeInit+0xaa>
 8002ef0:	2306      	movs	r3, #6
 8002ef2:	e00a      	b.n	8002f0a <HAL_GPIO_DeInit+0xaa>
 8002ef4:	2305      	movs	r3, #5
 8002ef6:	e008      	b.n	8002f0a <HAL_GPIO_DeInit+0xaa>
 8002ef8:	2304      	movs	r3, #4
 8002efa:	e006      	b.n	8002f0a <HAL_GPIO_DeInit+0xaa>
 8002efc:	2303      	movs	r3, #3
 8002efe:	e004      	b.n	8002f0a <HAL_GPIO_DeInit+0xaa>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e002      	b.n	8002f0a <HAL_GPIO_DeInit+0xaa>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <HAL_GPIO_DeInit+0xaa>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	f002 0203 	and.w	r2, r2, #3
 8002f10:	0092      	lsls	r2, r2, #2
 8002f12:	4093      	lsls	r3, r2
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d132      	bne.n	8002f80 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002f1a:	4b49      	ldr	r3, [pc, #292]	@ (8003040 <HAL_GPIO_DeInit+0x1e0>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	43db      	mvns	r3, r3
 8002f22:	4947      	ldr	r1, [pc, #284]	@ (8003040 <HAL_GPIO_DeInit+0x1e0>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002f28:	4b45      	ldr	r3, [pc, #276]	@ (8003040 <HAL_GPIO_DeInit+0x1e0>)
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	4943      	ldr	r1, [pc, #268]	@ (8003040 <HAL_GPIO_DeInit+0x1e0>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002f36:	4b42      	ldr	r3, [pc, #264]	@ (8003040 <HAL_GPIO_DeInit+0x1e0>)
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	4940      	ldr	r1, [pc, #256]	@ (8003040 <HAL_GPIO_DeInit+0x1e0>)
 8002f40:	4013      	ands	r3, r2
 8002f42:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002f44:	4b3e      	ldr	r3, [pc, #248]	@ (8003040 <HAL_GPIO_DeInit+0x1e0>)
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	493c      	ldr	r1, [pc, #240]	@ (8003040 <HAL_GPIO_DeInit+0x1e0>)
 8002f4e:	4013      	ands	r3, r2
 8002f50:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	220f      	movs	r2, #15
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002f62:	4a2f      	ldr	r2, [pc, #188]	@ (8003020 <HAL_GPIO_DeInit+0x1c0>)
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	089b      	lsrs	r3, r3, #2
 8002f68:	3302      	adds	r3, #2
 8002f6a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	43da      	mvns	r2, r3
 8002f72:	482b      	ldr	r0, [pc, #172]	@ (8003020 <HAL_GPIO_DeInit+0x1c0>)
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	089b      	lsrs	r3, r3, #2
 8002f78:	400a      	ands	r2, r1
 8002f7a:	3302      	adds	r3, #2
 8002f7c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	2103      	movs	r1, #3
 8002f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	08da      	lsrs	r2, r3, #3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3208      	adds	r2, #8
 8002f9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	220f      	movs	r2, #15
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	08d2      	lsrs	r2, r2, #3
 8002fb4:	4019      	ands	r1, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	3208      	adds	r2, #8
 8002fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	2103      	movs	r1, #3
 8002fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	401a      	ands	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	2101      	movs	r1, #1
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	401a      	ands	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	2103      	movs	r1, #3
 8002ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	401a      	ands	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	3301      	adds	r3, #1
 8003002:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	fa22 f303 	lsr.w	r3, r2, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	f47f af2f 	bne.w	8002e70 <HAL_GPIO_DeInit+0x10>
  }
}
 8003012:	bf00      	nop
 8003014:	bf00      	nop
 8003016:	371c      	adds	r7, #28
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	40010000 	.word	0x40010000
 8003024:	48000400 	.word	0x48000400
 8003028:	48000800 	.word	0x48000800
 800302c:	48000c00 	.word	0x48000c00
 8003030:	48001000 	.word	0x48001000
 8003034:	48001400 	.word	0x48001400
 8003038:	48001800 	.word	0x48001800
 800303c:	48001c00 	.word	0x48001c00
 8003040:	40010400 	.word	0x40010400

08003044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	460b      	mov	r3, r1
 800304e:	807b      	strh	r3, [r7, #2]
 8003050:	4613      	mov	r3, r2
 8003052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003054:	787b      	ldrb	r3, [r7, #1]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800305a:	887a      	ldrh	r2, [r7, #2]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003060:	e002      	b.n	8003068 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003062:	887a      	ldrh	r2, [r7, #2]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003078:	4b04      	ldr	r3, [pc, #16]	@ (800308c <HAL_PWREx_GetVoltageRange+0x18>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003080:	4618      	mov	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40007000 	.word	0x40007000

08003090 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800309e:	d130      	bne.n	8003102 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80030a0:	4b23      	ldr	r3, [pc, #140]	@ (8003130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80030a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030ac:	d038      	beq.n	8003120 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030ae:	4b20      	ldr	r3, [pc, #128]	@ (8003130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030be:	4b1d      	ldr	r3, [pc, #116]	@ (8003134 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2232      	movs	r2, #50	@ 0x32
 80030c4:	fb02 f303 	mul.w	r3, r2, r3
 80030c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003138 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	0c9b      	lsrs	r3, r3, #18
 80030d0:	3301      	adds	r3, #1
 80030d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030d4:	e002      	b.n	80030dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	3b01      	subs	r3, #1
 80030da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030dc:	4b14      	ldr	r3, [pc, #80]	@ (8003130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030e8:	d102      	bne.n	80030f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1f2      	bne.n	80030d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030fc:	d110      	bne.n	8003120 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e00f      	b.n	8003122 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003102:	4b0b      	ldr	r3, [pc, #44]	@ (8003130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800310a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800310e:	d007      	beq.n	8003120 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003110:	4b07      	ldr	r3, [pc, #28]	@ (8003130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003118:	4a05      	ldr	r2, [pc, #20]	@ (8003130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800311a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800311e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3714      	adds	r7, #20
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40007000 	.word	0x40007000
 8003134:	20000020 	.word	0x20000020
 8003138:	431bde83 	.word	0x431bde83

0800313c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003140:	4b05      	ldr	r3, [pc, #20]	@ (8003158 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	4a04      	ldr	r2, [pc, #16]	@ (8003158 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003146:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800314a:	6053      	str	r3, [r2, #4]
}
 800314c:	bf00      	nop
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	40007000 	.word	0x40007000

0800315c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d102      	bne.n	8003170 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	f000 bc08 	b.w	8003980 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003170:	4b96      	ldr	r3, [pc, #600]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 030c 	and.w	r3, r3, #12
 8003178:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800317a:	4b94      	ldr	r3, [pc, #592]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80e4 	beq.w	800335a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d007      	beq.n	80031a8 <HAL_RCC_OscConfig+0x4c>
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	2b0c      	cmp	r3, #12
 800319c:	f040 808b 	bne.w	80032b6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	f040 8087 	bne.w	80032b6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031a8:	4b88      	ldr	r3, [pc, #544]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d005      	beq.n	80031c0 <HAL_RCC_OscConfig+0x64>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e3df      	b.n	8003980 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a1a      	ldr	r2, [r3, #32]
 80031c4:	4b81      	ldr	r3, [pc, #516]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d004      	beq.n	80031da <HAL_RCC_OscConfig+0x7e>
 80031d0:	4b7e      	ldr	r3, [pc, #504]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031d8:	e005      	b.n	80031e6 <HAL_RCC_OscConfig+0x8a>
 80031da:	4b7c      	ldr	r3, [pc, #496]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 80031dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031e0:	091b      	lsrs	r3, r3, #4
 80031e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d223      	bcs.n	8003232 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fd92 	bl	8003d18 <RCC_SetFlashLatencyFromMSIRange>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e3c0      	b.n	8003980 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031fe:	4b73      	ldr	r3, [pc, #460]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a72      	ldr	r2, [pc, #456]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 8003204:	f043 0308 	orr.w	r3, r3, #8
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	4b70      	ldr	r3, [pc, #448]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	496d      	ldr	r1, [pc, #436]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 8003218:	4313      	orrs	r3, r2
 800321a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800321c:	4b6b      	ldr	r3, [pc, #428]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	021b      	lsls	r3, r3, #8
 800322a:	4968      	ldr	r1, [pc, #416]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 800322c:	4313      	orrs	r3, r2
 800322e:	604b      	str	r3, [r1, #4]
 8003230:	e025      	b.n	800327e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003232:	4b66      	ldr	r3, [pc, #408]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a65      	ldr	r2, [pc, #404]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 8003238:	f043 0308 	orr.w	r3, r3, #8
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	4b63      	ldr	r3, [pc, #396]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	4960      	ldr	r1, [pc, #384]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 800324c:	4313      	orrs	r3, r2
 800324e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003250:	4b5e      	ldr	r3, [pc, #376]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	021b      	lsls	r3, r3, #8
 800325e:	495b      	ldr	r1, [pc, #364]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 8003260:	4313      	orrs	r3, r2
 8003262:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d109      	bne.n	800327e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	4618      	mov	r0, r3
 8003270:	f000 fd52 	bl	8003d18 <RCC_SetFlashLatencyFromMSIRange>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e380      	b.n	8003980 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800327e:	f000 fc87 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 8003282:	4602      	mov	r2, r0
 8003284:	4b51      	ldr	r3, [pc, #324]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	091b      	lsrs	r3, r3, #4
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	4950      	ldr	r1, [pc, #320]	@ (80033d0 <HAL_RCC_OscConfig+0x274>)
 8003290:	5ccb      	ldrb	r3, [r1, r3]
 8003292:	f003 031f 	and.w	r3, r3, #31
 8003296:	fa22 f303 	lsr.w	r3, r2, r3
 800329a:	4a4e      	ldr	r2, [pc, #312]	@ (80033d4 <HAL_RCC_OscConfig+0x278>)
 800329c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800329e:	4b4e      	ldr	r3, [pc, #312]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe fbee 	bl	8001a84 <HAL_InitTick>
 80032a8:	4603      	mov	r3, r0
 80032aa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d052      	beq.n	8003358 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
 80032b4:	e364      	b.n	8003980 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d032      	beq.n	8003324 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032be:	4b43      	ldr	r3, [pc, #268]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a42      	ldr	r2, [pc, #264]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032ca:	f7fe fc2b 	bl	8001b24 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032d2:	f7fe fc27 	bl	8001b24 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e34d      	b.n	8003980 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032e4:	4b39      	ldr	r3, [pc, #228]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f0      	beq.n	80032d2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032f0:	4b36      	ldr	r3, [pc, #216]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a35      	ldr	r2, [pc, #212]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 80032f6:	f043 0308 	orr.w	r3, r3, #8
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	4b33      	ldr	r3, [pc, #204]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	4930      	ldr	r1, [pc, #192]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 800330a:	4313      	orrs	r3, r2
 800330c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800330e:	4b2f      	ldr	r3, [pc, #188]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	021b      	lsls	r3, r3, #8
 800331c:	492b      	ldr	r1, [pc, #172]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 800331e:	4313      	orrs	r3, r2
 8003320:	604b      	str	r3, [r1, #4]
 8003322:	e01a      	b.n	800335a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003324:	4b29      	ldr	r3, [pc, #164]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a28      	ldr	r2, [pc, #160]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 800332a:	f023 0301 	bic.w	r3, r3, #1
 800332e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003330:	f7fe fbf8 	bl	8001b24 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003338:	f7fe fbf4 	bl	8001b24 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e31a      	b.n	8003980 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800334a:	4b20      	ldr	r3, [pc, #128]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f0      	bne.n	8003338 <HAL_RCC_OscConfig+0x1dc>
 8003356:	e000      	b.n	800335a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003358:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d073      	beq.n	800344e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	2b08      	cmp	r3, #8
 800336a:	d005      	beq.n	8003378 <HAL_RCC_OscConfig+0x21c>
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	2b0c      	cmp	r3, #12
 8003370:	d10e      	bne.n	8003390 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2b03      	cmp	r3, #3
 8003376:	d10b      	bne.n	8003390 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003378:	4b14      	ldr	r3, [pc, #80]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d063      	beq.n	800344c <HAL_RCC_OscConfig+0x2f0>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d15f      	bne.n	800344c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e2f7      	b.n	8003980 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003398:	d106      	bne.n	80033a8 <HAL_RCC_OscConfig+0x24c>
 800339a:	4b0c      	ldr	r3, [pc, #48]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a0b      	ldr	r2, [pc, #44]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 80033a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	e025      	b.n	80033f4 <HAL_RCC_OscConfig+0x298>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033b0:	d114      	bne.n	80033dc <HAL_RCC_OscConfig+0x280>
 80033b2:	4b06      	ldr	r3, [pc, #24]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a05      	ldr	r2, [pc, #20]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 80033b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	4b03      	ldr	r3, [pc, #12]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a02      	ldr	r2, [pc, #8]	@ (80033cc <HAL_RCC_OscConfig+0x270>)
 80033c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	e013      	b.n	80033f4 <HAL_RCC_OscConfig+0x298>
 80033cc:	40021000 	.word	0x40021000
 80033d0:	080084d8 	.word	0x080084d8
 80033d4:	20000020 	.word	0x20000020
 80033d8:	20000024 	.word	0x20000024
 80033dc:	4ba0      	ldr	r3, [pc, #640]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a9f      	ldr	r2, [pc, #636]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 80033e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	4b9d      	ldr	r3, [pc, #628]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a9c      	ldr	r2, [pc, #624]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 80033ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d013      	beq.n	8003424 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fc:	f7fe fb92 	bl	8001b24 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003404:	f7fe fb8e 	bl	8001b24 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b64      	cmp	r3, #100	@ 0x64
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e2b4      	b.n	8003980 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003416:	4b92      	ldr	r3, [pc, #584]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0x2a8>
 8003422:	e014      	b.n	800344e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003424:	f7fe fb7e 	bl	8001b24 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800342c:	f7fe fb7a 	bl	8001b24 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b64      	cmp	r3, #100	@ 0x64
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e2a0      	b.n	8003980 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800343e:	4b88      	ldr	r3, [pc, #544]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f0      	bne.n	800342c <HAL_RCC_OscConfig+0x2d0>
 800344a:	e000      	b.n	800344e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800344c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d060      	beq.n	800351c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	2b04      	cmp	r3, #4
 800345e:	d005      	beq.n	800346c <HAL_RCC_OscConfig+0x310>
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	2b0c      	cmp	r3, #12
 8003464:	d119      	bne.n	800349a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2b02      	cmp	r3, #2
 800346a:	d116      	bne.n	800349a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800346c:	4b7c      	ldr	r3, [pc, #496]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <HAL_RCC_OscConfig+0x328>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e27d      	b.n	8003980 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003484:	4b76      	ldr	r3, [pc, #472]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	061b      	lsls	r3, r3, #24
 8003492:	4973      	ldr	r1, [pc, #460]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 8003494:	4313      	orrs	r3, r2
 8003496:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003498:	e040      	b.n	800351c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d023      	beq.n	80034ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034a2:	4b6f      	ldr	r3, [pc, #444]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a6e      	ldr	r2, [pc, #440]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 80034a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ae:	f7fe fb39 	bl	8001b24 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b6:	f7fe fb35 	bl	8001b24 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e25b      	b.n	8003980 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034c8:	4b65      	ldr	r3, [pc, #404]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0f0      	beq.n	80034b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d4:	4b62      	ldr	r3, [pc, #392]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	061b      	lsls	r3, r3, #24
 80034e2:	495f      	ldr	r1, [pc, #380]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	604b      	str	r3, [r1, #4]
 80034e8:	e018      	b.n	800351c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ea:	4b5d      	ldr	r3, [pc, #372]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a5c      	ldr	r2, [pc, #368]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 80034f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f6:	f7fe fb15 	bl	8001b24 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034fe:	f7fe fb11 	bl	8001b24 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e237      	b.n	8003980 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003510:	4b53      	ldr	r3, [pc, #332]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1f0      	bne.n	80034fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0308 	and.w	r3, r3, #8
 8003524:	2b00      	cmp	r3, #0
 8003526:	d03c      	beq.n	80035a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01c      	beq.n	800356a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003530:	4b4b      	ldr	r3, [pc, #300]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 8003532:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003536:	4a4a      	ldr	r2, [pc, #296]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003540:	f7fe faf0 	bl	8001b24 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003548:	f7fe faec 	bl	8001b24 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e212      	b.n	8003980 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800355a:	4b41      	ldr	r3, [pc, #260]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 800355c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0ef      	beq.n	8003548 <HAL_RCC_OscConfig+0x3ec>
 8003568:	e01b      	b.n	80035a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800356a:	4b3d      	ldr	r3, [pc, #244]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 800356c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003570:	4a3b      	ldr	r2, [pc, #236]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 8003572:	f023 0301 	bic.w	r3, r3, #1
 8003576:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357a:	f7fe fad3 	bl	8001b24 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003582:	f7fe facf 	bl	8001b24 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e1f5      	b.n	8003980 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003594:	4b32      	ldr	r3, [pc, #200]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 8003596:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1ef      	bne.n	8003582 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 80a6 	beq.w	80036fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035b0:	2300      	movs	r3, #0
 80035b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80035b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 80035b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10d      	bne.n	80035dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c0:	4b27      	ldr	r3, [pc, #156]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 80035c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c4:	4a26      	ldr	r2, [pc, #152]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 80035c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80035cc:	4b24      	ldr	r3, [pc, #144]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 80035ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d8:	2301      	movs	r3, #1
 80035da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035dc:	4b21      	ldr	r3, [pc, #132]	@ (8003664 <HAL_RCC_OscConfig+0x508>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d118      	bne.n	800361a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003664 <HAL_RCC_OscConfig+0x508>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003664 <HAL_RCC_OscConfig+0x508>)
 80035ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f4:	f7fe fa96 	bl	8001b24 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fc:	f7fe fa92 	bl	8001b24 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e1b8      	b.n	8003980 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800360e:	4b15      	ldr	r3, [pc, #84]	@ (8003664 <HAL_RCC_OscConfig+0x508>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0f0      	beq.n	80035fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d108      	bne.n	8003634 <HAL_RCC_OscConfig+0x4d8>
 8003622:	4b0f      	ldr	r3, [pc, #60]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 8003624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003628:	4a0d      	ldr	r2, [pc, #52]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 800362a:	f043 0301 	orr.w	r3, r3, #1
 800362e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003632:	e029      	b.n	8003688 <HAL_RCC_OscConfig+0x52c>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	2b05      	cmp	r3, #5
 800363a:	d115      	bne.n	8003668 <HAL_RCC_OscConfig+0x50c>
 800363c:	4b08      	ldr	r3, [pc, #32]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 800363e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003642:	4a07      	ldr	r2, [pc, #28]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 8003644:	f043 0304 	orr.w	r3, r3, #4
 8003648:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800364c:	4b04      	ldr	r3, [pc, #16]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 800364e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003652:	4a03      	ldr	r2, [pc, #12]	@ (8003660 <HAL_RCC_OscConfig+0x504>)
 8003654:	f043 0301 	orr.w	r3, r3, #1
 8003658:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800365c:	e014      	b.n	8003688 <HAL_RCC_OscConfig+0x52c>
 800365e:	bf00      	nop
 8003660:	40021000 	.word	0x40021000
 8003664:	40007000 	.word	0x40007000
 8003668:	4b9d      	ldr	r3, [pc, #628]	@ (80038e0 <HAL_RCC_OscConfig+0x784>)
 800366a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800366e:	4a9c      	ldr	r2, [pc, #624]	@ (80038e0 <HAL_RCC_OscConfig+0x784>)
 8003670:	f023 0301 	bic.w	r3, r3, #1
 8003674:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003678:	4b99      	ldr	r3, [pc, #612]	@ (80038e0 <HAL_RCC_OscConfig+0x784>)
 800367a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800367e:	4a98      	ldr	r2, [pc, #608]	@ (80038e0 <HAL_RCC_OscConfig+0x784>)
 8003680:	f023 0304 	bic.w	r3, r3, #4
 8003684:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d016      	beq.n	80036be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003690:	f7fe fa48 	bl	8001b24 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003696:	e00a      	b.n	80036ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003698:	f7fe fa44 	bl	8001b24 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e168      	b.n	8003980 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ae:	4b8c      	ldr	r3, [pc, #560]	@ (80038e0 <HAL_RCC_OscConfig+0x784>)
 80036b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0ed      	beq.n	8003698 <HAL_RCC_OscConfig+0x53c>
 80036bc:	e015      	b.n	80036ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036be:	f7fe fa31 	bl	8001b24 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036c4:	e00a      	b.n	80036dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c6:	f7fe fa2d 	bl	8001b24 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e151      	b.n	8003980 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036dc:	4b80      	ldr	r3, [pc, #512]	@ (80038e0 <HAL_RCC_OscConfig+0x784>)
 80036de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1ed      	bne.n	80036c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036ea:	7ffb      	ldrb	r3, [r7, #31]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d105      	bne.n	80036fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f0:	4b7b      	ldr	r3, [pc, #492]	@ (80038e0 <HAL_RCC_OscConfig+0x784>)
 80036f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f4:	4a7a      	ldr	r2, [pc, #488]	@ (80038e0 <HAL_RCC_OscConfig+0x784>)
 80036f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036fa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b00      	cmp	r3, #0
 8003706:	d03c      	beq.n	8003782 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370c:	2b00      	cmp	r3, #0
 800370e:	d01c      	beq.n	800374a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003710:	4b73      	ldr	r3, [pc, #460]	@ (80038e0 <HAL_RCC_OscConfig+0x784>)
 8003712:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003716:	4a72      	ldr	r2, [pc, #456]	@ (80038e0 <HAL_RCC_OscConfig+0x784>)
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003720:	f7fe fa00 	bl	8001b24 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003728:	f7fe f9fc 	bl	8001b24 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e122      	b.n	8003980 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800373a:	4b69      	ldr	r3, [pc, #420]	@ (80038e0 <HAL_RCC_OscConfig+0x784>)
 800373c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0ef      	beq.n	8003728 <HAL_RCC_OscConfig+0x5cc>
 8003748:	e01b      	b.n	8003782 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800374a:	4b65      	ldr	r3, [pc, #404]	@ (80038e0 <HAL_RCC_OscConfig+0x784>)
 800374c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003750:	4a63      	ldr	r2, [pc, #396]	@ (80038e0 <HAL_RCC_OscConfig+0x784>)
 8003752:	f023 0301 	bic.w	r3, r3, #1
 8003756:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375a:	f7fe f9e3 	bl	8001b24 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003762:	f7fe f9df 	bl	8001b24 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e105      	b.n	8003980 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003774:	4b5a      	ldr	r3, [pc, #360]	@ (80038e0 <HAL_RCC_OscConfig+0x784>)
 8003776:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1ef      	bne.n	8003762 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 80f9 	beq.w	800397e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003790:	2b02      	cmp	r3, #2
 8003792:	f040 80cf 	bne.w	8003934 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003796:	4b52      	ldr	r3, [pc, #328]	@ (80038e0 <HAL_RCC_OscConfig+0x784>)
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f003 0203 	and.w	r2, r3, #3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d12c      	bne.n	8003804 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b4:	3b01      	subs	r3, #1
 80037b6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d123      	bne.n	8003804 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037c6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d11b      	bne.n	8003804 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037d8:	429a      	cmp	r2, r3
 80037da:	d113      	bne.n	8003804 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e6:	085b      	lsrs	r3, r3, #1
 80037e8:	3b01      	subs	r3, #1
 80037ea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d109      	bne.n	8003804 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fa:	085b      	lsrs	r3, r3, #1
 80037fc:	3b01      	subs	r3, #1
 80037fe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003800:	429a      	cmp	r2, r3
 8003802:	d071      	beq.n	80038e8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	2b0c      	cmp	r3, #12
 8003808:	d068      	beq.n	80038dc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800380a:	4b35      	ldr	r3, [pc, #212]	@ (80038e0 <HAL_RCC_OscConfig+0x784>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d105      	bne.n	8003822 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003816:	4b32      	ldr	r3, [pc, #200]	@ (80038e0 <HAL_RCC_OscConfig+0x784>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e0ac      	b.n	8003980 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003826:	4b2e      	ldr	r3, [pc, #184]	@ (80038e0 <HAL_RCC_OscConfig+0x784>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a2d      	ldr	r2, [pc, #180]	@ (80038e0 <HAL_RCC_OscConfig+0x784>)
 800382c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003830:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003832:	f7fe f977 	bl	8001b24 <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800383a:	f7fe f973 	bl	8001b24 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e099      	b.n	8003980 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800384c:	4b24      	ldr	r3, [pc, #144]	@ (80038e0 <HAL_RCC_OscConfig+0x784>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1f0      	bne.n	800383a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003858:	4b21      	ldr	r3, [pc, #132]	@ (80038e0 <HAL_RCC_OscConfig+0x784>)
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	4b21      	ldr	r3, [pc, #132]	@ (80038e4 <HAL_RCC_OscConfig+0x788>)
 800385e:	4013      	ands	r3, r2
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003868:	3a01      	subs	r2, #1
 800386a:	0112      	lsls	r2, r2, #4
 800386c:	4311      	orrs	r1, r2
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003872:	0212      	lsls	r2, r2, #8
 8003874:	4311      	orrs	r1, r2
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800387a:	0852      	lsrs	r2, r2, #1
 800387c:	3a01      	subs	r2, #1
 800387e:	0552      	lsls	r2, r2, #21
 8003880:	4311      	orrs	r1, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003886:	0852      	lsrs	r2, r2, #1
 8003888:	3a01      	subs	r2, #1
 800388a:	0652      	lsls	r2, r2, #25
 800388c:	4311      	orrs	r1, r2
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003892:	06d2      	lsls	r2, r2, #27
 8003894:	430a      	orrs	r2, r1
 8003896:	4912      	ldr	r1, [pc, #72]	@ (80038e0 <HAL_RCC_OscConfig+0x784>)
 8003898:	4313      	orrs	r3, r2
 800389a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800389c:	4b10      	ldr	r3, [pc, #64]	@ (80038e0 <HAL_RCC_OscConfig+0x784>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a0f      	ldr	r2, [pc, #60]	@ (80038e0 <HAL_RCC_OscConfig+0x784>)
 80038a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038a8:	4b0d      	ldr	r3, [pc, #52]	@ (80038e0 <HAL_RCC_OscConfig+0x784>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	4a0c      	ldr	r2, [pc, #48]	@ (80038e0 <HAL_RCC_OscConfig+0x784>)
 80038ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038b4:	f7fe f936 	bl	8001b24 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038bc:	f7fe f932 	bl	8001b24 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e058      	b.n	8003980 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ce:	4b04      	ldr	r3, [pc, #16]	@ (80038e0 <HAL_RCC_OscConfig+0x784>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0f0      	beq.n	80038bc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038da:	e050      	b.n	800397e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e04f      	b.n	8003980 <HAL_RCC_OscConfig+0x824>
 80038e0:	40021000 	.word	0x40021000
 80038e4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038e8:	4b27      	ldr	r3, [pc, #156]	@ (8003988 <HAL_RCC_OscConfig+0x82c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d144      	bne.n	800397e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80038f4:	4b24      	ldr	r3, [pc, #144]	@ (8003988 <HAL_RCC_OscConfig+0x82c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a23      	ldr	r2, [pc, #140]	@ (8003988 <HAL_RCC_OscConfig+0x82c>)
 80038fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003900:	4b21      	ldr	r3, [pc, #132]	@ (8003988 <HAL_RCC_OscConfig+0x82c>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	4a20      	ldr	r2, [pc, #128]	@ (8003988 <HAL_RCC_OscConfig+0x82c>)
 8003906:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800390a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800390c:	f7fe f90a 	bl	8001b24 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003914:	f7fe f906 	bl	8001b24 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e02c      	b.n	8003980 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003926:	4b18      	ldr	r3, [pc, #96]	@ (8003988 <HAL_RCC_OscConfig+0x82c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCC_OscConfig+0x7b8>
 8003932:	e024      	b.n	800397e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	2b0c      	cmp	r3, #12
 8003938:	d01f      	beq.n	800397a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393a:	4b13      	ldr	r3, [pc, #76]	@ (8003988 <HAL_RCC_OscConfig+0x82c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a12      	ldr	r2, [pc, #72]	@ (8003988 <HAL_RCC_OscConfig+0x82c>)
 8003940:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003946:	f7fe f8ed 	bl	8001b24 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800394e:	f7fe f8e9 	bl	8001b24 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e00f      	b.n	8003980 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003960:	4b09      	ldr	r3, [pc, #36]	@ (8003988 <HAL_RCC_OscConfig+0x82c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1f0      	bne.n	800394e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800396c:	4b06      	ldr	r3, [pc, #24]	@ (8003988 <HAL_RCC_OscConfig+0x82c>)
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	4905      	ldr	r1, [pc, #20]	@ (8003988 <HAL_RCC_OscConfig+0x82c>)
 8003972:	4b06      	ldr	r3, [pc, #24]	@ (800398c <HAL_RCC_OscConfig+0x830>)
 8003974:	4013      	ands	r3, r2
 8003976:	60cb      	str	r3, [r1, #12]
 8003978:	e001      	b.n	800397e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3720      	adds	r7, #32
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40021000 	.word	0x40021000
 800398c:	feeefffc 	.word	0xfeeefffc

08003990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e0e7      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039a4:	4b75      	ldr	r3, [pc, #468]	@ (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d910      	bls.n	80039d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b2:	4b72      	ldr	r3, [pc, #456]	@ (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f023 0207 	bic.w	r2, r3, #7
 80039ba:	4970      	ldr	r1, [pc, #448]	@ (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	4313      	orrs	r3, r2
 80039c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c2:	4b6e      	ldr	r3, [pc, #440]	@ (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d001      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e0cf      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d010      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	4b66      	ldr	r3, [pc, #408]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d908      	bls.n	8003a02 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f0:	4b63      	ldr	r3, [pc, #396]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	4960      	ldr	r1, [pc, #384]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d04c      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d107      	bne.n	8003a26 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a16:	4b5a      	ldr	r3, [pc, #360]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d121      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e0a6      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d107      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a2e:	4b54      	ldr	r3, [pc, #336]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d115      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e09a      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d107      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a46:	4b4e      	ldr	r3, [pc, #312]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d109      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e08e      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a56:	4b4a      	ldr	r3, [pc, #296]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e086      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a66:	4b46      	ldr	r3, [pc, #280]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f023 0203 	bic.w	r2, r3, #3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	4943      	ldr	r1, [pc, #268]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a78:	f7fe f854 	bl	8001b24 <HAL_GetTick>
 8003a7c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7e:	e00a      	b.n	8003a96 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a80:	f7fe f850 	bl	8001b24 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e06e      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a96:	4b3a      	ldr	r3, [pc, #232]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 020c 	and.w	r2, r3, #12
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d1eb      	bne.n	8003a80 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d010      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	4b31      	ldr	r3, [pc, #196]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d208      	bcs.n	8003ad6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac4:	4b2e      	ldr	r3, [pc, #184]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	492b      	ldr	r1, [pc, #172]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad6:	4b29      	ldr	r3, [pc, #164]	@ (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d210      	bcs.n	8003b06 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae4:	4b25      	ldr	r3, [pc, #148]	@ (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f023 0207 	bic.w	r2, r3, #7
 8003aec:	4923      	ldr	r1, [pc, #140]	@ (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af4:	4b21      	ldr	r3, [pc, #132]	@ (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d001      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e036      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d008      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b12:	4b1b      	ldr	r3, [pc, #108]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	4918      	ldr	r1, [pc, #96]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d009      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b30:	4b13      	ldr	r3, [pc, #76]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4910      	ldr	r1, [pc, #64]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b44:	f000 f824 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	091b      	lsrs	r3, r3, #4
 8003b50:	f003 030f 	and.w	r3, r3, #15
 8003b54:	490b      	ldr	r1, [pc, #44]	@ (8003b84 <HAL_RCC_ClockConfig+0x1f4>)
 8003b56:	5ccb      	ldrb	r3, [r1, r3]
 8003b58:	f003 031f 	and.w	r3, r3, #31
 8003b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b60:	4a09      	ldr	r2, [pc, #36]	@ (8003b88 <HAL_RCC_ClockConfig+0x1f8>)
 8003b62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b64:	4b09      	ldr	r3, [pc, #36]	@ (8003b8c <HAL_RCC_ClockConfig+0x1fc>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fd ff8b 	bl	8001a84 <HAL_InitTick>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	72fb      	strb	r3, [r7, #11]

  return status;
 8003b72:	7afb      	ldrb	r3, [r7, #11]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40022000 	.word	0x40022000
 8003b80:	40021000 	.word	0x40021000
 8003b84:	080084d8 	.word	0x080084d8
 8003b88:	20000020 	.word	0x20000020
 8003b8c:	20000024 	.word	0x20000024

08003b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b089      	sub	sp, #36	@ 0x24
 8003b94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61fb      	str	r3, [r7, #28]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b9e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
 8003ba6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ba8:	4b3b      	ldr	r3, [pc, #236]	@ (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f003 0303 	and.w	r3, r3, #3
 8003bb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x34>
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	2b0c      	cmp	r3, #12
 8003bbc:	d121      	bne.n	8003c02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d11e      	bne.n	8003c02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bc4:	4b34      	ldr	r3, [pc, #208]	@ (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d107      	bne.n	8003be0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bd0:	4b31      	ldr	r3, [pc, #196]	@ (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bd6:	0a1b      	lsrs	r3, r3, #8
 8003bd8:	f003 030f 	and.w	r3, r3, #15
 8003bdc:	61fb      	str	r3, [r7, #28]
 8003bde:	e005      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003be0:	4b2d      	ldr	r3, [pc, #180]	@ (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	091b      	lsrs	r3, r3, #4
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003bec:	4a2b      	ldr	r2, [pc, #172]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10d      	bne.n	8003c18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c00:	e00a      	b.n	8003c18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d102      	bne.n	8003c0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c08:	4b25      	ldr	r3, [pc, #148]	@ (8003ca0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c0a:	61bb      	str	r3, [r7, #24]
 8003c0c:	e004      	b.n	8003c18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d101      	bne.n	8003c18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c14:	4b23      	ldr	r3, [pc, #140]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	2b0c      	cmp	r3, #12
 8003c1c:	d134      	bne.n	8003c88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d003      	beq.n	8003c36 <HAL_RCC_GetSysClockFreq+0xa6>
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b03      	cmp	r3, #3
 8003c32:	d003      	beq.n	8003c3c <HAL_RCC_GetSysClockFreq+0xac>
 8003c34:	e005      	b.n	8003c42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c36:	4b1a      	ldr	r3, [pc, #104]	@ (8003ca0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c38:	617b      	str	r3, [r7, #20]
      break;
 8003c3a:	e005      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c3c:	4b19      	ldr	r3, [pc, #100]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c3e:	617b      	str	r3, [r7, #20]
      break;
 8003c40:	e002      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	617b      	str	r3, [r7, #20]
      break;
 8003c46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c48:	4b13      	ldr	r3, [pc, #76]	@ (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	091b      	lsrs	r3, r3, #4
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	3301      	adds	r3, #1
 8003c54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c56:	4b10      	ldr	r3, [pc, #64]	@ (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	0a1b      	lsrs	r3, r3, #8
 8003c5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	fb03 f202 	mul.w	r2, r3, r2
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	0e5b      	lsrs	r3, r3, #25
 8003c74:	f003 0303 	and.w	r3, r3, #3
 8003c78:	3301      	adds	r3, #1
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c88:	69bb      	ldr	r3, [r7, #24]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3724      	adds	r7, #36	@ 0x24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	080084f0 	.word	0x080084f0
 8003ca0:	00f42400 	.word	0x00f42400
 8003ca4:	007a1200 	.word	0x007a1200

08003ca8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cac:	4b03      	ldr	r3, [pc, #12]	@ (8003cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003cae:	681b      	ldr	r3, [r3, #0]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	20000020 	.word	0x20000020

08003cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003cc4:	f7ff fff0 	bl	8003ca8 <HAL_RCC_GetHCLKFreq>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	4b06      	ldr	r3, [pc, #24]	@ (8003ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	0a1b      	lsrs	r3, r3, #8
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	4904      	ldr	r1, [pc, #16]	@ (8003ce8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cd6:	5ccb      	ldrb	r3, [r1, r3]
 8003cd8:	f003 031f 	and.w	r3, r3, #31
 8003cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	080084e8 	.word	0x080084e8

08003cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003cf0:	f7ff ffda 	bl	8003ca8 <HAL_RCC_GetHCLKFreq>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	4b06      	ldr	r3, [pc, #24]	@ (8003d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	0adb      	lsrs	r3, r3, #11
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	4904      	ldr	r1, [pc, #16]	@ (8003d14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d02:	5ccb      	ldrb	r3, [r1, r3]
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40021000 	.word	0x40021000
 8003d14:	080084e8 	.word	0x080084e8

08003d18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d20:	2300      	movs	r3, #0
 8003d22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d24:	4b2a      	ldr	r3, [pc, #168]	@ (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d30:	f7ff f9a0 	bl	8003074 <HAL_PWREx_GetVoltageRange>
 8003d34:	6178      	str	r0, [r7, #20]
 8003d36:	e014      	b.n	8003d62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d38:	4b25      	ldr	r3, [pc, #148]	@ (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d3c:	4a24      	ldr	r2, [pc, #144]	@ (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d42:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d44:	4b22      	ldr	r3, [pc, #136]	@ (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d50:	f7ff f990 	bl	8003074 <HAL_PWREx_GetVoltageRange>
 8003d54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d56:	4b1e      	ldr	r3, [pc, #120]	@ (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d60:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d68:	d10b      	bne.n	8003d82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b80      	cmp	r3, #128	@ 0x80
 8003d6e:	d919      	bls.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2ba0      	cmp	r3, #160	@ 0xa0
 8003d74:	d902      	bls.n	8003d7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d76:	2302      	movs	r3, #2
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	e013      	b.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	613b      	str	r3, [r7, #16]
 8003d80:	e010      	b.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b80      	cmp	r3, #128	@ 0x80
 8003d86:	d902      	bls.n	8003d8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d88:	2303      	movs	r3, #3
 8003d8a:	613b      	str	r3, [r7, #16]
 8003d8c:	e00a      	b.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b80      	cmp	r3, #128	@ 0x80
 8003d92:	d102      	bne.n	8003d9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d94:	2302      	movs	r3, #2
 8003d96:	613b      	str	r3, [r7, #16]
 8003d98:	e004      	b.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b70      	cmp	r3, #112	@ 0x70
 8003d9e:	d101      	bne.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003da0:	2301      	movs	r3, #1
 8003da2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003da4:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f023 0207 	bic.w	r2, r3, #7
 8003dac:	4909      	ldr	r1, [pc, #36]	@ (8003dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003db4:	4b07      	ldr	r3, [pc, #28]	@ (8003dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d001      	beq.n	8003dc6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3718      	adds	r7, #24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	40022000 	.word	0x40022000

08003dd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003de0:	2300      	movs	r3, #0
 8003de2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003de4:	2300      	movs	r3, #0
 8003de6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d041      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003df8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003dfc:	d02a      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003dfe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e02:	d824      	bhi.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e04:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e08:	d008      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e0e:	d81e      	bhi.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003e14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e18:	d010      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e1a:	e018      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e1c:	4b86      	ldr	r3, [pc, #536]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	4a85      	ldr	r2, [pc, #532]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e26:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e28:	e015      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	2100      	movs	r1, #0
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 facd 	bl	80043d0 <RCCEx_PLLSAI1_Config>
 8003e36:	4603      	mov	r3, r0
 8003e38:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e3a:	e00c      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3320      	adds	r3, #32
 8003e40:	2100      	movs	r1, #0
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 fbb6 	bl	80045b4 <RCCEx_PLLSAI2_Config>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e4c:	e003      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	74fb      	strb	r3, [r7, #19]
      break;
 8003e52:	e000      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003e54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e56:	7cfb      	ldrb	r3, [r7, #19]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10b      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e5c:	4b76      	ldr	r3, [pc, #472]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e62:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e6a:	4973      	ldr	r1, [pc, #460]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003e72:	e001      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e74:	7cfb      	ldrb	r3, [r7, #19]
 8003e76:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d041      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003e8c:	d02a      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003e8e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003e92:	d824      	bhi.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e98:	d008      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e9e:	d81e      	bhi.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00a      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003ea4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ea8:	d010      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003eaa:	e018      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003eac:	4b62      	ldr	r3, [pc, #392]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	4a61      	ldr	r2, [pc, #388]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eb6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003eb8:	e015      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 fa85 	bl	80043d0 <RCCEx_PLLSAI1_Config>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003eca:	e00c      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3320      	adds	r3, #32
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 fb6e 	bl	80045b4 <RCCEx_PLLSAI2_Config>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003edc:	e003      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	74fb      	strb	r3, [r7, #19]
      break;
 8003ee2:	e000      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ee6:	7cfb      	ldrb	r3, [r7, #19]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10b      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003eec:	4b52      	ldr	r3, [pc, #328]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003efa:	494f      	ldr	r1, [pc, #316]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003f02:	e001      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f04:	7cfb      	ldrb	r3, [r7, #19]
 8003f06:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 80a0 	beq.w	8004056 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f16:	2300      	movs	r3, #0
 8003f18:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f1a:	4b47      	ldr	r3, [pc, #284]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003f26:	2301      	movs	r3, #1
 8003f28:	e000      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00d      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f30:	4b41      	ldr	r3, [pc, #260]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f34:	4a40      	ldr	r2, [pc, #256]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f3c:	4b3e      	ldr	r3, [pc, #248]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f44:	60bb      	str	r3, [r7, #8]
 8003f46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f4c:	4b3b      	ldr	r3, [pc, #236]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a3a      	ldr	r2, [pc, #232]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f58:	f7fd fde4 	bl	8001b24 <HAL_GetTick>
 8003f5c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f5e:	e009      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f60:	f7fd fde0 	bl	8001b24 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d902      	bls.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	74fb      	strb	r3, [r7, #19]
        break;
 8003f72:	e005      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f74:	4b31      	ldr	r3, [pc, #196]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0ef      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003f80:	7cfb      	ldrb	r3, [r7, #19]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d15c      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f86:	4b2c      	ldr	r3, [pc, #176]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f90:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d01f      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d019      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fa4:	4b24      	ldr	r3, [pc, #144]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003faa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fb0:	4b21      	ldr	r3, [pc, #132]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fb6:	4a20      	ldr	r2, [pc, #128]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc6:	4a1c      	ldr	r2, [pc, #112]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003fd0:	4a19      	ldr	r2, [pc, #100]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d016      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe2:	f7fd fd9f 	bl	8001b24 <HAL_GetTick>
 8003fe6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fe8:	e00b      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fea:	f7fd fd9b 	bl	8001b24 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d902      	bls.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	74fb      	strb	r3, [r7, #19]
            break;
 8004000:	e006      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004002:	4b0d      	ldr	r3, [pc, #52]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0ec      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004010:	7cfb      	ldrb	r3, [r7, #19]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10c      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004016:	4b08      	ldr	r3, [pc, #32]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800401c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004026:	4904      	ldr	r1, [pc, #16]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004028:	4313      	orrs	r3, r2
 800402a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800402e:	e009      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004030:	7cfb      	ldrb	r3, [r7, #19]
 8004032:	74bb      	strb	r3, [r7, #18]
 8004034:	e006      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004036:	bf00      	nop
 8004038:	40021000 	.word	0x40021000
 800403c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004040:	7cfb      	ldrb	r3, [r7, #19]
 8004042:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004044:	7c7b      	ldrb	r3, [r7, #17]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d105      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800404a:	4ba6      	ldr	r3, [pc, #664]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800404c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800404e:	4aa5      	ldr	r2, [pc, #660]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004050:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004054:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004062:	4ba0      	ldr	r3, [pc, #640]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004068:	f023 0203 	bic.w	r2, r3, #3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004070:	499c      	ldr	r1, [pc, #624]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00a      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004084:	4b97      	ldr	r3, [pc, #604]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800408a:	f023 020c 	bic.w	r2, r3, #12
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004092:	4994      	ldr	r1, [pc, #592]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0304 	and.w	r3, r3, #4
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040a6:	4b8f      	ldr	r3, [pc, #572]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b4:	498b      	ldr	r1, [pc, #556]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00a      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040c8:	4b86      	ldr	r3, [pc, #536]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d6:	4983      	ldr	r1, [pc, #524]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0310 	and.w	r3, r3, #16
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040ea:	4b7e      	ldr	r3, [pc, #504]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040f8:	497a      	ldr	r1, [pc, #488]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0320 	and.w	r3, r3, #32
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00a      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800410c:	4b75      	ldr	r3, [pc, #468]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004112:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800411a:	4972      	ldr	r1, [pc, #456]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800412e:	4b6d      	ldr	r3, [pc, #436]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004134:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800413c:	4969      	ldr	r1, [pc, #420]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004150:	4b64      	ldr	r3, [pc, #400]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004156:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800415e:	4961      	ldr	r1, [pc, #388]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004172:	4b5c      	ldr	r3, [pc, #368]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004178:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004180:	4958      	ldr	r1, [pc, #352]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004194:	4b53      	ldr	r3, [pc, #332]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800419a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a2:	4950      	ldr	r1, [pc, #320]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041b6:	4b4b      	ldr	r3, [pc, #300]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c4:	4947      	ldr	r1, [pc, #284]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041d8:	4b42      	ldr	r3, [pc, #264]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80041da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041de:	f023 0203 	bic.w	r2, r3, #3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e6:	493f      	ldr	r1, [pc, #252]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d028      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041fa:	4b3a      	ldr	r3, [pc, #232]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80041fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004200:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004208:	4936      	ldr	r1, [pc, #216]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004214:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004218:	d106      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800421a:	4b32      	ldr	r3, [pc, #200]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	4a31      	ldr	r2, [pc, #196]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004220:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004224:	60d3      	str	r3, [r2, #12]
 8004226:	e011      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800422c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004230:	d10c      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3304      	adds	r3, #4
 8004236:	2101      	movs	r1, #1
 8004238:	4618      	mov	r0, r3
 800423a:	f000 f8c9 	bl	80043d0 <RCCEx_PLLSAI1_Config>
 800423e:	4603      	mov	r3, r0
 8004240:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004242:	7cfb      	ldrb	r3, [r7, #19]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8004248:	7cfb      	ldrb	r3, [r7, #19]
 800424a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d028      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004258:	4b22      	ldr	r3, [pc, #136]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800425a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800425e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004266:	491f      	ldr	r1, [pc, #124]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004272:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004276:	d106      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004278:	4b1a      	ldr	r3, [pc, #104]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	4a19      	ldr	r2, [pc, #100]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800427e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004282:	60d3      	str	r3, [r2, #12]
 8004284:	e011      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800428a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800428e:	d10c      	bne.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3304      	adds	r3, #4
 8004294:	2101      	movs	r1, #1
 8004296:	4618      	mov	r0, r3
 8004298:	f000 f89a 	bl	80043d0 <RCCEx_PLLSAI1_Config>
 800429c:	4603      	mov	r3, r0
 800429e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042a0:	7cfb      	ldrb	r3, [r7, #19]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80042a6:	7cfb      	ldrb	r3, [r7, #19]
 80042a8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d02a      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042b6:	4b0b      	ldr	r3, [pc, #44]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042bc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042c4:	4907      	ldr	r1, [pc, #28]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042d4:	d108      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042d6:	4b03      	ldr	r3, [pc, #12]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	4a02      	ldr	r2, [pc, #8]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042e0:	60d3      	str	r3, [r2, #12]
 80042e2:	e013      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x534>
 80042e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042f0:	d10c      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3304      	adds	r3, #4
 80042f6:	2101      	movs	r1, #1
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 f869 	bl	80043d0 <RCCEx_PLLSAI1_Config>
 80042fe:	4603      	mov	r3, r0
 8004300:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004302:	7cfb      	ldrb	r3, [r7, #19]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8004308:	7cfb      	ldrb	r3, [r7, #19]
 800430a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d02f      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004318:	4b2c      	ldr	r3, [pc, #176]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800431e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004326:	4929      	ldr	r1, [pc, #164]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004332:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004336:	d10d      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3304      	adds	r3, #4
 800433c:	2102      	movs	r1, #2
 800433e:	4618      	mov	r0, r3
 8004340:	f000 f846 	bl	80043d0 <RCCEx_PLLSAI1_Config>
 8004344:	4603      	mov	r3, r0
 8004346:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004348:	7cfb      	ldrb	r3, [r7, #19]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d014      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800434e:	7cfb      	ldrb	r3, [r7, #19]
 8004350:	74bb      	strb	r3, [r7, #18]
 8004352:	e011      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004358:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800435c:	d10c      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	3320      	adds	r3, #32
 8004362:	2102      	movs	r1, #2
 8004364:	4618      	mov	r0, r3
 8004366:	f000 f925 	bl	80045b4 <RCCEx_PLLSAI2_Config>
 800436a:	4603      	mov	r3, r0
 800436c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800436e:	7cfb      	ldrb	r3, [r7, #19]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004374:	7cfb      	ldrb	r3, [r7, #19]
 8004376:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00b      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004384:	4b11      	ldr	r3, [pc, #68]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800438a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004394:	490d      	ldr	r1, [pc, #52]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004396:	4313      	orrs	r3, r2
 8004398:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00b      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043a8:	4b08      	ldr	r3, [pc, #32]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043b8:	4904      	ldr	r1, [pc, #16]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80043c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3718      	adds	r7, #24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40021000 	.word	0x40021000

080043d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043de:	4b74      	ldr	r3, [pc, #464]	@ (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d018      	beq.n	800441c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80043ea:	4b71      	ldr	r3, [pc, #452]	@ (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f003 0203 	and.w	r2, r3, #3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d10d      	bne.n	8004416 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
       ||
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d009      	beq.n	8004416 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004402:	4b6b      	ldr	r3, [pc, #428]	@ (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	091b      	lsrs	r3, r3, #4
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
       ||
 8004412:	429a      	cmp	r2, r3
 8004414:	d047      	beq.n	80044a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	73fb      	strb	r3, [r7, #15]
 800441a:	e044      	b.n	80044a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b03      	cmp	r3, #3
 8004422:	d018      	beq.n	8004456 <RCCEx_PLLSAI1_Config+0x86>
 8004424:	2b03      	cmp	r3, #3
 8004426:	d825      	bhi.n	8004474 <RCCEx_PLLSAI1_Config+0xa4>
 8004428:	2b01      	cmp	r3, #1
 800442a:	d002      	beq.n	8004432 <RCCEx_PLLSAI1_Config+0x62>
 800442c:	2b02      	cmp	r3, #2
 800442e:	d009      	beq.n	8004444 <RCCEx_PLLSAI1_Config+0x74>
 8004430:	e020      	b.n	8004474 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004432:	4b5f      	ldr	r3, [pc, #380]	@ (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d11d      	bne.n	800447a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004442:	e01a      	b.n	800447a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004444:	4b5a      	ldr	r3, [pc, #360]	@ (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800444c:	2b00      	cmp	r3, #0
 800444e:	d116      	bne.n	800447e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004454:	e013      	b.n	800447e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004456:	4b56      	ldr	r3, [pc, #344]	@ (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10f      	bne.n	8004482 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004462:	4b53      	ldr	r3, [pc, #332]	@ (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d109      	bne.n	8004482 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004472:	e006      	b.n	8004482 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	73fb      	strb	r3, [r7, #15]
      break;
 8004478:	e004      	b.n	8004484 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800447a:	bf00      	nop
 800447c:	e002      	b.n	8004484 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800447e:	bf00      	nop
 8004480:	e000      	b.n	8004484 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004482:	bf00      	nop
    }

    if(status == HAL_OK)
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10d      	bne.n	80044a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800448a:	4b49      	ldr	r3, [pc, #292]	@ (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6819      	ldr	r1, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	3b01      	subs	r3, #1
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	430b      	orrs	r3, r1
 80044a0:	4943      	ldr	r1, [pc, #268]	@ (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d17c      	bne.n	80045a6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044ac:	4b40      	ldr	r3, [pc, #256]	@ (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a3f      	ldr	r2, [pc, #252]	@ (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80044b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b8:	f7fd fb34 	bl	8001b24 <HAL_GetTick>
 80044bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044be:	e009      	b.n	80044d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044c0:	f7fd fb30 	bl	8001b24 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d902      	bls.n	80044d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	73fb      	strb	r3, [r7, #15]
        break;
 80044d2:	e005      	b.n	80044e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044d4:	4b36      	ldr	r3, [pc, #216]	@ (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1ef      	bne.n	80044c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d15f      	bne.n	80045a6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d110      	bne.n	800450e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044ec:	4b30      	ldr	r3, [pc, #192]	@ (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80044f4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6892      	ldr	r2, [r2, #8]
 80044fc:	0211      	lsls	r1, r2, #8
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	68d2      	ldr	r2, [r2, #12]
 8004502:	06d2      	lsls	r2, r2, #27
 8004504:	430a      	orrs	r2, r1
 8004506:	492a      	ldr	r1, [pc, #168]	@ (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004508:	4313      	orrs	r3, r2
 800450a:	610b      	str	r3, [r1, #16]
 800450c:	e027      	b.n	800455e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d112      	bne.n	800453a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004514:	4b26      	ldr	r3, [pc, #152]	@ (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800451c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6892      	ldr	r2, [r2, #8]
 8004524:	0211      	lsls	r1, r2, #8
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6912      	ldr	r2, [r2, #16]
 800452a:	0852      	lsrs	r2, r2, #1
 800452c:	3a01      	subs	r2, #1
 800452e:	0552      	lsls	r2, r2, #21
 8004530:	430a      	orrs	r2, r1
 8004532:	491f      	ldr	r1, [pc, #124]	@ (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004534:	4313      	orrs	r3, r2
 8004536:	610b      	str	r3, [r1, #16]
 8004538:	e011      	b.n	800455e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800453a:	4b1d      	ldr	r3, [pc, #116]	@ (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004542:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6892      	ldr	r2, [r2, #8]
 800454a:	0211      	lsls	r1, r2, #8
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6952      	ldr	r2, [r2, #20]
 8004550:	0852      	lsrs	r2, r2, #1
 8004552:	3a01      	subs	r2, #1
 8004554:	0652      	lsls	r2, r2, #25
 8004556:	430a      	orrs	r2, r1
 8004558:	4915      	ldr	r1, [pc, #84]	@ (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800455a:	4313      	orrs	r3, r2
 800455c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800455e:	4b14      	ldr	r3, [pc, #80]	@ (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a13      	ldr	r2, [pc, #76]	@ (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004564:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004568:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456a:	f7fd fadb 	bl	8001b24 <HAL_GetTick>
 800456e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004570:	e009      	b.n	8004586 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004572:	f7fd fad7 	bl	8001b24 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d902      	bls.n	8004586 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	73fb      	strb	r3, [r7, #15]
          break;
 8004584:	e005      	b.n	8004592 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004586:	4b0a      	ldr	r3, [pc, #40]	@ (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0ef      	beq.n	8004572 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004592:	7bfb      	ldrb	r3, [r7, #15]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d106      	bne.n	80045a6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004598:	4b05      	ldr	r3, [pc, #20]	@ (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800459a:	691a      	ldr	r2, [r3, #16]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	4903      	ldr	r1, [pc, #12]	@ (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	40021000 	.word	0x40021000

080045b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045c2:	4b69      	ldr	r3, [pc, #420]	@ (8004768 <RCCEx_PLLSAI2_Config+0x1b4>)
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d018      	beq.n	8004600 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80045ce:	4b66      	ldr	r3, [pc, #408]	@ (8004768 <RCCEx_PLLSAI2_Config+0x1b4>)
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f003 0203 	and.w	r2, r3, #3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d10d      	bne.n	80045fa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
       ||
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d009      	beq.n	80045fa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80045e6:	4b60      	ldr	r3, [pc, #384]	@ (8004768 <RCCEx_PLLSAI2_Config+0x1b4>)
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	091b      	lsrs	r3, r3, #4
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
       ||
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d047      	beq.n	800468a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	73fb      	strb	r3, [r7, #15]
 80045fe:	e044      	b.n	800468a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b03      	cmp	r3, #3
 8004606:	d018      	beq.n	800463a <RCCEx_PLLSAI2_Config+0x86>
 8004608:	2b03      	cmp	r3, #3
 800460a:	d825      	bhi.n	8004658 <RCCEx_PLLSAI2_Config+0xa4>
 800460c:	2b01      	cmp	r3, #1
 800460e:	d002      	beq.n	8004616 <RCCEx_PLLSAI2_Config+0x62>
 8004610:	2b02      	cmp	r3, #2
 8004612:	d009      	beq.n	8004628 <RCCEx_PLLSAI2_Config+0x74>
 8004614:	e020      	b.n	8004658 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004616:	4b54      	ldr	r3, [pc, #336]	@ (8004768 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d11d      	bne.n	800465e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004626:	e01a      	b.n	800465e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004628:	4b4f      	ldr	r3, [pc, #316]	@ (8004768 <RCCEx_PLLSAI2_Config+0x1b4>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004630:	2b00      	cmp	r3, #0
 8004632:	d116      	bne.n	8004662 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004638:	e013      	b.n	8004662 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800463a:	4b4b      	ldr	r3, [pc, #300]	@ (8004768 <RCCEx_PLLSAI2_Config+0x1b4>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10f      	bne.n	8004666 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004646:	4b48      	ldr	r3, [pc, #288]	@ (8004768 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d109      	bne.n	8004666 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004656:	e006      	b.n	8004666 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	73fb      	strb	r3, [r7, #15]
      break;
 800465c:	e004      	b.n	8004668 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800465e:	bf00      	nop
 8004660:	e002      	b.n	8004668 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004662:	bf00      	nop
 8004664:	e000      	b.n	8004668 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004666:	bf00      	nop
    }

    if(status == HAL_OK)
 8004668:	7bfb      	ldrb	r3, [r7, #15]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10d      	bne.n	800468a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800466e:	4b3e      	ldr	r3, [pc, #248]	@ (8004768 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6819      	ldr	r1, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	3b01      	subs	r3, #1
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	430b      	orrs	r3, r1
 8004684:	4938      	ldr	r1, [pc, #224]	@ (8004768 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004686:	4313      	orrs	r3, r2
 8004688:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800468a:	7bfb      	ldrb	r3, [r7, #15]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d166      	bne.n	800475e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004690:	4b35      	ldr	r3, [pc, #212]	@ (8004768 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a34      	ldr	r2, [pc, #208]	@ (8004768 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004696:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800469a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800469c:	f7fd fa42 	bl	8001b24 <HAL_GetTick>
 80046a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046a2:	e009      	b.n	80046b8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046a4:	f7fd fa3e 	bl	8001b24 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d902      	bls.n	80046b8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	73fb      	strb	r3, [r7, #15]
        break;
 80046b6:	e005      	b.n	80046c4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004768 <RCCEx_PLLSAI2_Config+0x1b4>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1ef      	bne.n	80046a4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d149      	bne.n	800475e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d110      	bne.n	80046f2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046d0:	4b25      	ldr	r3, [pc, #148]	@ (8004768 <RCCEx_PLLSAI2_Config+0x1b4>)
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80046d8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6892      	ldr	r2, [r2, #8]
 80046e0:	0211      	lsls	r1, r2, #8
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	68d2      	ldr	r2, [r2, #12]
 80046e6:	06d2      	lsls	r2, r2, #27
 80046e8:	430a      	orrs	r2, r1
 80046ea:	491f      	ldr	r1, [pc, #124]	@ (8004768 <RCCEx_PLLSAI2_Config+0x1b4>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	614b      	str	r3, [r1, #20]
 80046f0:	e011      	b.n	8004716 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004768 <RCCEx_PLLSAI2_Config+0x1b4>)
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80046fa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6892      	ldr	r2, [r2, #8]
 8004702:	0211      	lsls	r1, r2, #8
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6912      	ldr	r2, [r2, #16]
 8004708:	0852      	lsrs	r2, r2, #1
 800470a:	3a01      	subs	r2, #1
 800470c:	0652      	lsls	r2, r2, #25
 800470e:	430a      	orrs	r2, r1
 8004710:	4915      	ldr	r1, [pc, #84]	@ (8004768 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004712:	4313      	orrs	r3, r2
 8004714:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004716:	4b14      	ldr	r3, [pc, #80]	@ (8004768 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a13      	ldr	r2, [pc, #76]	@ (8004768 <RCCEx_PLLSAI2_Config+0x1b4>)
 800471c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004720:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004722:	f7fd f9ff 	bl	8001b24 <HAL_GetTick>
 8004726:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004728:	e009      	b.n	800473e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800472a:	f7fd f9fb 	bl	8001b24 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d902      	bls.n	800473e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	73fb      	strb	r3, [r7, #15]
          break;
 800473c:	e005      	b.n	800474a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800473e:	4b0a      	ldr	r3, [pc, #40]	@ (8004768 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0ef      	beq.n	800472a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800474a:	7bfb      	ldrb	r3, [r7, #15]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d106      	bne.n	800475e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004750:	4b05      	ldr	r3, [pc, #20]	@ (8004768 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004752:	695a      	ldr	r2, [r3, #20]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	4903      	ldr	r1, [pc, #12]	@ (8004768 <RCCEx_PLLSAI2_Config+0x1b4>)
 800475a:	4313      	orrs	r3, r2
 800475c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800475e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	40021000 	.word	0x40021000

0800476c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e095      	b.n	80048aa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004782:	2b00      	cmp	r3, #0
 8004784:	d108      	bne.n	8004798 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800478e:	d009      	beq.n	80047a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	61da      	str	r2, [r3, #28]
 8004796:	e005      	b.n	80047a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d106      	bne.n	80047c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7fc ff6e 	bl	80016a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80047e4:	d902      	bls.n	80047ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80047e6:	2300      	movs	r3, #0
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	e002      	b.n	80047f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80047ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80047f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80047fa:	d007      	beq.n	800480c <HAL_SPI_Init+0xa0>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004804:	d002      	beq.n	800480c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004844:	431a      	orrs	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800484e:	ea42 0103 	orr.w	r1, r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004856:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	0c1b      	lsrs	r3, r3, #16
 8004868:	f003 0204 	and.w	r2, r3, #4
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004870:	f003 0310 	and.w	r3, r3, #16
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004888:	ea42 0103 	orr.w	r1, r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b082      	sub	sp, #8
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e01a      	b.n	80048fa <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048da:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7fc ff7b 	bl	80017d8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b088      	sub	sp, #32
 8004906:	af00      	add	r7, sp, #0
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	603b      	str	r3, [r7, #0]
 800490e:	4613      	mov	r3, r2
 8004910:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004912:	f7fd f907 	bl	8001b24 <HAL_GetTick>
 8004916:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004918:	88fb      	ldrh	r3, [r7, #6]
 800491a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b01      	cmp	r3, #1
 8004926:	d001      	beq.n	800492c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004928:	2302      	movs	r3, #2
 800492a:	e15c      	b.n	8004be6 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <HAL_SPI_Transmit+0x36>
 8004932:	88fb      	ldrh	r3, [r7, #6]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e154      	b.n	8004be6 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004942:	2b01      	cmp	r3, #1
 8004944:	d101      	bne.n	800494a <HAL_SPI_Transmit+0x48>
 8004946:	2302      	movs	r3, #2
 8004948:	e14d      	b.n	8004be6 <HAL_SPI_Transmit+0x2e4>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2203      	movs	r2, #3
 8004956:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	88fa      	ldrh	r2, [r7, #6]
 800496a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	88fa      	ldrh	r2, [r7, #6]
 8004970:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800499c:	d10f      	bne.n	80049be <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049c8:	2b40      	cmp	r3, #64	@ 0x40
 80049ca:	d007      	beq.n	80049dc <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80049e4:	d952      	bls.n	8004a8c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d002      	beq.n	80049f4 <HAL_SPI_Transmit+0xf2>
 80049ee:	8b7b      	ldrh	r3, [r7, #26]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d145      	bne.n	8004a80 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f8:	881a      	ldrh	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a04:	1c9a      	adds	r2, r3, #2
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a18:	e032      	b.n	8004a80 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d112      	bne.n	8004a4e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a2c:	881a      	ldrh	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a38:	1c9a      	adds	r2, r3, #2
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a4c:	e018      	b.n	8004a80 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a4e:	f7fd f869 	bl	8001b24 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d803      	bhi.n	8004a66 <HAL_SPI_Transmit+0x164>
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a64:	d102      	bne.n	8004a6c <HAL_SPI_Transmit+0x16a>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d109      	bne.n	8004a80 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e0b2      	b.n	8004be6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1c7      	bne.n	8004a1a <HAL_SPI_Transmit+0x118>
 8004a8a:	e083      	b.n	8004b94 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d002      	beq.n	8004a9a <HAL_SPI_Transmit+0x198>
 8004a94:	8b7b      	ldrh	r3, [r7, #26]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d177      	bne.n	8004b8a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d912      	bls.n	8004aca <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa8:	881a      	ldrh	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab4:	1c9a      	adds	r2, r3, #2
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b02      	subs	r3, #2
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ac8:	e05f      	b.n	8004b8a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	330c      	adds	r3, #12
 8004ad4:	7812      	ldrb	r2, [r2, #0]
 8004ad6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004af0:	e04b      	b.n	8004b8a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d12b      	bne.n	8004b58 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d912      	bls.n	8004b30 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0e:	881a      	ldrh	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1a:	1c9a      	adds	r2, r3, #2
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	3b02      	subs	r3, #2
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b2e:	e02c      	b.n	8004b8a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	330c      	adds	r3, #12
 8004b3a:	7812      	ldrb	r2, [r2, #0]
 8004b3c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b56:	e018      	b.n	8004b8a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b58:	f7fc ffe4 	bl	8001b24 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d803      	bhi.n	8004b70 <HAL_SPI_Transmit+0x26e>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6e:	d102      	bne.n	8004b76 <HAL_SPI_Transmit+0x274>
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d109      	bne.n	8004b8a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e02d      	b.n	8004be6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1ae      	bne.n	8004af2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b94:	69fa      	ldr	r2, [r7, #28]
 8004b96:	6839      	ldr	r1, [r7, #0]
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 fac1 	bl	8005120 <SPI_EndRxTxTransaction>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10a      	bne.n	8004bc8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	617b      	str	r3, [r7, #20]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	617b      	str	r3, [r7, #20]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	617b      	str	r3, [r7, #20]
 8004bc6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d001      	beq.n	8004be4 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e000      	b.n	8004be6 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004be4:	2300      	movs	r3, #0
  }
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3720      	adds	r7, #32
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
	...

08004bf0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d001      	beq.n	8004c0e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	e0d4      	b.n	8004db8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d002      	beq.n	8004c1a <HAL_SPI_Transmit_DMA+0x2a>
 8004c14:	88fb      	ldrh	r3, [r7, #6]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e0cc      	b.n	8004db8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d101      	bne.n	8004c2c <HAL_SPI_Transmit_DMA+0x3c>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e0c5      	b.n	8004db8 <HAL_SPI_Transmit_DMA+0x1c8>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2203      	movs	r2, #3
 8004c38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	88fa      	ldrh	r2, [r7, #6]
 8004c4c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	88fa      	ldrh	r2, [r7, #6]
 8004c52:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c7e:	d10f      	bne.n	8004ca0 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c8e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c9e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca4:	4a46      	ldr	r2, [pc, #280]	@ (8004dc0 <HAL_SPI_Transmit_DMA+0x1d0>)
 8004ca6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cac:	4a45      	ldr	r2, [pc, #276]	@ (8004dc4 <HAL_SPI_Transmit_DMA+0x1d4>)
 8004cae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cb4:	4a44      	ldr	r2, [pc, #272]	@ (8004dc8 <HAL_SPI_Transmit_DMA+0x1d8>)
 8004cb6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004cce:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004cd8:	d82d      	bhi.n	8004d36 <HAL_SPI_Transmit_DMA+0x146>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ce4:	d127      	bne.n	8004d36 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10f      	bne.n	8004d14 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004d02:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	085b      	lsrs	r3, r3, #1
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d12:	e010      	b.n	8004d36 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d22:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	085b      	lsrs	r3, r3, #1
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	3301      	adds	r3, #1
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d3e:	4619      	mov	r1, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	330c      	adds	r3, #12
 8004d46:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d4c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004d4e:	f7fd fd37 	bl	80027c0 <HAL_DMA_Start_IT>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00b      	beq.n	8004d70 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d5c:	f043 0210 	orr.w	r2, r3, #16
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e023      	b.n	8004db8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d7a:	2b40      	cmp	r3, #64	@ 0x40
 8004d7c:	d007      	beq.n	8004d8e <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d8c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f042 0220 	orr.w	r2, r2, #32
 8004da4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f042 0202 	orr.w	r2, r2, #2
 8004db4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	08004e87 	.word	0x08004e87
 8004dc4:	08004de1 	.word	0x08004de1
 8004dc8:	08004ea3 	.word	0x08004ea3

08004dcc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dec:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dee:	f7fc fe99 	bl	8001b24 <HAL_GetTick>
 8004df2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0320 	and.w	r3, r3, #32
 8004dfe:	2b20      	cmp	r3, #32
 8004e00:	d03b      	beq.n	8004e7a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0220 	bic.w	r2, r2, #32
 8004e10:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0202 	bic.w	r2, r2, #2
 8004e20:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	2164      	movs	r1, #100	@ 0x64
 8004e26:	6978      	ldr	r0, [r7, #20]
 8004e28:	f000 f97a 	bl	8005120 <SPI_EndRxTxTransaction>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d005      	beq.n	8004e3e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e36:	f043 0220 	orr.w	r2, r3, #32
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10a      	bne.n	8004e5c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e46:	2300      	movs	r3, #0
 8004e48:	60fb      	str	r3, [r7, #12]
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	60fb      	str	r3, [r7, #12]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004e72:	6978      	ldr	r0, [r7, #20]
 8004e74:	f7fb fb8e 	bl	8000594 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004e78:	e002      	b.n	8004e80 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004e7a:	6978      	ldr	r0, [r7, #20]
 8004e7c:	f7fb fbc0 	bl	8000600 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e80:	3718      	adds	r7, #24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b084      	sub	sp, #16
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f7ff ff99 	bl	8004dcc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e9a:	bf00      	nop
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b084      	sub	sp, #16
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 0203 	bic.w	r2, r2, #3
 8004ebe:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ec4:	f043 0210 	orr.w	r2, r3, #16
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f7fb fb5d 	bl	8000594 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004eda:	bf00      	nop
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b088      	sub	sp, #32
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	603b      	str	r3, [r7, #0]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ef4:	f7fc fe16 	bl	8001b24 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efc:	1a9b      	subs	r3, r3, r2
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	4413      	add	r3, r2
 8004f02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f04:	f7fc fe0e 	bl	8001b24 <HAL_GetTick>
 8004f08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f0a:	4b39      	ldr	r3, [pc, #228]	@ (8004ff0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	015b      	lsls	r3, r3, #5
 8004f10:	0d1b      	lsrs	r3, r3, #20
 8004f12:	69fa      	ldr	r2, [r7, #28]
 8004f14:	fb02 f303 	mul.w	r3, r2, r3
 8004f18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f1a:	e054      	b.n	8004fc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f22:	d050      	beq.n	8004fc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f24:	f7fc fdfe 	bl	8001b24 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	69fa      	ldr	r2, [r7, #28]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d902      	bls.n	8004f3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d13d      	bne.n	8004fb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f52:	d111      	bne.n	8004f78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f5c:	d004      	beq.n	8004f68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f66:	d107      	bne.n	8004f78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f80:	d10f      	bne.n	8004fa2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fa0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e017      	b.n	8004fe6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	bf0c      	ite	eq
 8004fd6:	2301      	moveq	r3, #1
 8004fd8:	2300      	movne	r3, #0
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	461a      	mov	r2, r3
 8004fde:	79fb      	ldrb	r3, [r7, #7]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d19b      	bne.n	8004f1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3720      	adds	r7, #32
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	20000020 	.word	0x20000020

08004ff4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08a      	sub	sp, #40	@ 0x28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005002:	2300      	movs	r3, #0
 8005004:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005006:	f7fc fd8d 	bl	8001b24 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500e:	1a9b      	subs	r3, r3, r2
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	4413      	add	r3, r2
 8005014:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005016:	f7fc fd85 	bl	8001b24 <HAL_GetTick>
 800501a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	330c      	adds	r3, #12
 8005022:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005024:	4b3d      	ldr	r3, [pc, #244]	@ (800511c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	4613      	mov	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	00da      	lsls	r2, r3, #3
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	0d1b      	lsrs	r3, r3, #20
 8005034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005036:	fb02 f303 	mul.w	r3, r2, r3
 800503a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800503c:	e060      	b.n	8005100 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005044:	d107      	bne.n	8005056 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d104      	bne.n	8005056 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	b2db      	uxtb	r3, r3
 8005052:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005054:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505c:	d050      	beq.n	8005100 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800505e:	f7fc fd61 	bl	8001b24 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800506a:	429a      	cmp	r2, r3
 800506c:	d902      	bls.n	8005074 <SPI_WaitFifoStateUntilTimeout+0x80>
 800506e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005070:	2b00      	cmp	r3, #0
 8005072:	d13d      	bne.n	80050f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005082:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800508c:	d111      	bne.n	80050b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005096:	d004      	beq.n	80050a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050a0:	d107      	bne.n	80050b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050ba:	d10f      	bne.n	80050dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e010      	b.n	8005112 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	3b01      	subs	r3, #1
 80050fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	4013      	ands	r3, r2
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	429a      	cmp	r2, r3
 800510e:	d196      	bne.n	800503e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3728      	adds	r7, #40	@ 0x28
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	20000020 	.word	0x20000020

08005120 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af02      	add	r7, sp, #8
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	2200      	movs	r2, #0
 8005134:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f7ff ff5b 	bl	8004ff4 <SPI_WaitFifoStateUntilTimeout>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d007      	beq.n	8005154 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005148:	f043 0220 	orr.w	r2, r3, #32
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e027      	b.n	80051a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2200      	movs	r2, #0
 800515c:	2180      	movs	r1, #128	@ 0x80
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f7ff fec0 	bl	8004ee4 <SPI_WaitFlagStateUntilTimeout>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d007      	beq.n	800517a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800516e:	f043 0220 	orr.w	r2, r3, #32
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e014      	b.n	80051a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2200      	movs	r2, #0
 8005182:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f7ff ff34 	bl	8004ff4 <SPI_WaitFifoStateUntilTimeout>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d007      	beq.n	80051a2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005196:	f043 0220 	orr.w	r2, r3, #32
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e000      	b.n	80051a4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e049      	b.n	8005252 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d106      	bne.n	80051d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7fc fb26 	bl	8001824 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3304      	adds	r3, #4
 80051e8:	4619      	mov	r1, r3
 80051ea:	4610      	mov	r0, r2
 80051ec:	f000 fa50 	bl	8005690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
	...

0800525c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d109      	bne.n	8005280 <HAL_TIM_PWM_Start+0x24>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b01      	cmp	r3, #1
 8005276:	bf14      	ite	ne
 8005278:	2301      	movne	r3, #1
 800527a:	2300      	moveq	r3, #0
 800527c:	b2db      	uxtb	r3, r3
 800527e:	e03c      	b.n	80052fa <HAL_TIM_PWM_Start+0x9e>
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2b04      	cmp	r3, #4
 8005284:	d109      	bne.n	800529a <HAL_TIM_PWM_Start+0x3e>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b01      	cmp	r3, #1
 8005290:	bf14      	ite	ne
 8005292:	2301      	movne	r3, #1
 8005294:	2300      	moveq	r3, #0
 8005296:	b2db      	uxtb	r3, r3
 8005298:	e02f      	b.n	80052fa <HAL_TIM_PWM_Start+0x9e>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b08      	cmp	r3, #8
 800529e:	d109      	bne.n	80052b4 <HAL_TIM_PWM_Start+0x58>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	bf14      	ite	ne
 80052ac:	2301      	movne	r3, #1
 80052ae:	2300      	moveq	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	e022      	b.n	80052fa <HAL_TIM_PWM_Start+0x9e>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2b0c      	cmp	r3, #12
 80052b8:	d109      	bne.n	80052ce <HAL_TIM_PWM_Start+0x72>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	bf14      	ite	ne
 80052c6:	2301      	movne	r3, #1
 80052c8:	2300      	moveq	r3, #0
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	e015      	b.n	80052fa <HAL_TIM_PWM_Start+0x9e>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b10      	cmp	r3, #16
 80052d2:	d109      	bne.n	80052e8 <HAL_TIM_PWM_Start+0x8c>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b01      	cmp	r3, #1
 80052de:	bf14      	ite	ne
 80052e0:	2301      	movne	r3, #1
 80052e2:	2300      	moveq	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	e008      	b.n	80052fa <HAL_TIM_PWM_Start+0x9e>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	bf14      	ite	ne
 80052f4:	2301      	movne	r3, #1
 80052f6:	2300      	moveq	r3, #0
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e09c      	b.n	800543c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d104      	bne.n	8005312 <HAL_TIM_PWM_Start+0xb6>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005310:	e023      	b.n	800535a <HAL_TIM_PWM_Start+0xfe>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b04      	cmp	r3, #4
 8005316:	d104      	bne.n	8005322 <HAL_TIM_PWM_Start+0xc6>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005320:	e01b      	b.n	800535a <HAL_TIM_PWM_Start+0xfe>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b08      	cmp	r3, #8
 8005326:	d104      	bne.n	8005332 <HAL_TIM_PWM_Start+0xd6>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005330:	e013      	b.n	800535a <HAL_TIM_PWM_Start+0xfe>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b0c      	cmp	r3, #12
 8005336:	d104      	bne.n	8005342 <HAL_TIM_PWM_Start+0xe6>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005340:	e00b      	b.n	800535a <HAL_TIM_PWM_Start+0xfe>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b10      	cmp	r3, #16
 8005346:	d104      	bne.n	8005352 <HAL_TIM_PWM_Start+0xf6>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005350:	e003      	b.n	800535a <HAL_TIM_PWM_Start+0xfe>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2202      	movs	r2, #2
 8005356:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2201      	movs	r2, #1
 8005360:	6839      	ldr	r1, [r7, #0]
 8005362:	4618      	mov	r0, r3
 8005364:	f000 fd10 	bl	8005d88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a35      	ldr	r2, [pc, #212]	@ (8005444 <HAL_TIM_PWM_Start+0x1e8>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d013      	beq.n	800539a <HAL_TIM_PWM_Start+0x13e>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a34      	ldr	r2, [pc, #208]	@ (8005448 <HAL_TIM_PWM_Start+0x1ec>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d00e      	beq.n	800539a <HAL_TIM_PWM_Start+0x13e>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a32      	ldr	r2, [pc, #200]	@ (800544c <HAL_TIM_PWM_Start+0x1f0>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d009      	beq.n	800539a <HAL_TIM_PWM_Start+0x13e>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a31      	ldr	r2, [pc, #196]	@ (8005450 <HAL_TIM_PWM_Start+0x1f4>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d004      	beq.n	800539a <HAL_TIM_PWM_Start+0x13e>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a2f      	ldr	r2, [pc, #188]	@ (8005454 <HAL_TIM_PWM_Start+0x1f8>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d101      	bne.n	800539e <HAL_TIM_PWM_Start+0x142>
 800539a:	2301      	movs	r3, #1
 800539c:	e000      	b.n	80053a0 <HAL_TIM_PWM_Start+0x144>
 800539e:	2300      	movs	r3, #0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d007      	beq.n	80053b4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a22      	ldr	r2, [pc, #136]	@ (8005444 <HAL_TIM_PWM_Start+0x1e8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d01d      	beq.n	80053fa <HAL_TIM_PWM_Start+0x19e>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053c6:	d018      	beq.n	80053fa <HAL_TIM_PWM_Start+0x19e>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a22      	ldr	r2, [pc, #136]	@ (8005458 <HAL_TIM_PWM_Start+0x1fc>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d013      	beq.n	80053fa <HAL_TIM_PWM_Start+0x19e>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a21      	ldr	r2, [pc, #132]	@ (800545c <HAL_TIM_PWM_Start+0x200>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00e      	beq.n	80053fa <HAL_TIM_PWM_Start+0x19e>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005460 <HAL_TIM_PWM_Start+0x204>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d009      	beq.n	80053fa <HAL_TIM_PWM_Start+0x19e>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a17      	ldr	r2, [pc, #92]	@ (8005448 <HAL_TIM_PWM_Start+0x1ec>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d004      	beq.n	80053fa <HAL_TIM_PWM_Start+0x19e>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a15      	ldr	r2, [pc, #84]	@ (800544c <HAL_TIM_PWM_Start+0x1f0>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d115      	bne.n	8005426 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	689a      	ldr	r2, [r3, #8]
 8005400:	4b18      	ldr	r3, [pc, #96]	@ (8005464 <HAL_TIM_PWM_Start+0x208>)
 8005402:	4013      	ands	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2b06      	cmp	r3, #6
 800540a:	d015      	beq.n	8005438 <HAL_TIM_PWM_Start+0x1dc>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005412:	d011      	beq.n	8005438 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0201 	orr.w	r2, r2, #1
 8005422:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005424:	e008      	b.n	8005438 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f042 0201 	orr.w	r2, r2, #1
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	e000      	b.n	800543a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005438:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40012c00 	.word	0x40012c00
 8005448:	40013400 	.word	0x40013400
 800544c:	40014000 	.word	0x40014000
 8005450:	40014400 	.word	0x40014400
 8005454:	40014800 	.word	0x40014800
 8005458:	40000400 	.word	0x40000400
 800545c:	40000800 	.word	0x40000800
 8005460:	40000c00 	.word	0x40000c00
 8005464:	00010007 	.word	0x00010007

08005468 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005474:	2300      	movs	r3, #0
 8005476:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800547e:	2b01      	cmp	r3, #1
 8005480:	d101      	bne.n	8005486 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005482:	2302      	movs	r3, #2
 8005484:	e0ff      	b.n	8005686 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b14      	cmp	r3, #20
 8005492:	f200 80f0 	bhi.w	8005676 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005496:	a201      	add	r2, pc, #4	@ (adr r2, 800549c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549c:	080054f1 	.word	0x080054f1
 80054a0:	08005677 	.word	0x08005677
 80054a4:	08005677 	.word	0x08005677
 80054a8:	08005677 	.word	0x08005677
 80054ac:	08005531 	.word	0x08005531
 80054b0:	08005677 	.word	0x08005677
 80054b4:	08005677 	.word	0x08005677
 80054b8:	08005677 	.word	0x08005677
 80054bc:	08005573 	.word	0x08005573
 80054c0:	08005677 	.word	0x08005677
 80054c4:	08005677 	.word	0x08005677
 80054c8:	08005677 	.word	0x08005677
 80054cc:	080055b3 	.word	0x080055b3
 80054d0:	08005677 	.word	0x08005677
 80054d4:	08005677 	.word	0x08005677
 80054d8:	08005677 	.word	0x08005677
 80054dc:	080055f5 	.word	0x080055f5
 80054e0:	08005677 	.word	0x08005677
 80054e4:	08005677 	.word	0x08005677
 80054e8:	08005677 	.word	0x08005677
 80054ec:	08005635 	.word	0x08005635
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68b9      	ldr	r1, [r7, #8]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 f970 	bl	80057dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	699a      	ldr	r2, [r3, #24]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 0208 	orr.w	r2, r2, #8
 800550a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699a      	ldr	r2, [r3, #24]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0204 	bic.w	r2, r2, #4
 800551a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6999      	ldr	r1, [r3, #24]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	691a      	ldr	r2, [r3, #16]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	430a      	orrs	r2, r1
 800552c:	619a      	str	r2, [r3, #24]
      break;
 800552e:	e0a5      	b.n	800567c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68b9      	ldr	r1, [r7, #8]
 8005536:	4618      	mov	r0, r3
 8005538:	f000 f9e0 	bl	80058fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699a      	ldr	r2, [r3, #24]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800554a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699a      	ldr	r2, [r3, #24]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800555a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6999      	ldr	r1, [r3, #24]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	021a      	lsls	r2, r3, #8
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	430a      	orrs	r2, r1
 800556e:	619a      	str	r2, [r3, #24]
      break;
 8005570:	e084      	b.n	800567c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68b9      	ldr	r1, [r7, #8]
 8005578:	4618      	mov	r0, r3
 800557a:	f000 fa49 	bl	8005a10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	69da      	ldr	r2, [r3, #28]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f042 0208 	orr.w	r2, r2, #8
 800558c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69da      	ldr	r2, [r3, #28]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0204 	bic.w	r2, r2, #4
 800559c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69d9      	ldr	r1, [r3, #28]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	691a      	ldr	r2, [r3, #16]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	61da      	str	r2, [r3, #28]
      break;
 80055b0:	e064      	b.n	800567c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68b9      	ldr	r1, [r7, #8]
 80055b8:	4618      	mov	r0, r3
 80055ba:	f000 fab1 	bl	8005b20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	69da      	ldr	r2, [r3, #28]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	69da      	ldr	r2, [r3, #28]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	69d9      	ldr	r1, [r3, #28]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	021a      	lsls	r2, r3, #8
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	61da      	str	r2, [r3, #28]
      break;
 80055f2:	e043      	b.n	800567c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68b9      	ldr	r1, [r7, #8]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 fafa 	bl	8005bf4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0208 	orr.w	r2, r2, #8
 800560e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0204 	bic.w	r2, r2, #4
 800561e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	691a      	ldr	r2, [r3, #16]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005632:	e023      	b.n	800567c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68b9      	ldr	r1, [r7, #8]
 800563a:	4618      	mov	r0, r3
 800563c:	f000 fb3e 	bl	8005cbc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800564e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800565e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	021a      	lsls	r2, r3, #8
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005674:	e002      	b.n	800567c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	75fb      	strb	r3, [r7, #23]
      break;
 800567a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005684:	7dfb      	ldrb	r3, [r7, #23]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3718      	adds	r7, #24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop

08005690 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a46      	ldr	r2, [pc, #280]	@ (80057bc <TIM_Base_SetConfig+0x12c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d013      	beq.n	80056d0 <TIM_Base_SetConfig+0x40>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ae:	d00f      	beq.n	80056d0 <TIM_Base_SetConfig+0x40>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a43      	ldr	r2, [pc, #268]	@ (80057c0 <TIM_Base_SetConfig+0x130>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d00b      	beq.n	80056d0 <TIM_Base_SetConfig+0x40>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a42      	ldr	r2, [pc, #264]	@ (80057c4 <TIM_Base_SetConfig+0x134>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d007      	beq.n	80056d0 <TIM_Base_SetConfig+0x40>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a41      	ldr	r2, [pc, #260]	@ (80057c8 <TIM_Base_SetConfig+0x138>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d003      	beq.n	80056d0 <TIM_Base_SetConfig+0x40>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a40      	ldr	r2, [pc, #256]	@ (80057cc <TIM_Base_SetConfig+0x13c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d108      	bne.n	80056e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a35      	ldr	r2, [pc, #212]	@ (80057bc <TIM_Base_SetConfig+0x12c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d01f      	beq.n	800572a <TIM_Base_SetConfig+0x9a>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056f0:	d01b      	beq.n	800572a <TIM_Base_SetConfig+0x9a>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a32      	ldr	r2, [pc, #200]	@ (80057c0 <TIM_Base_SetConfig+0x130>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d017      	beq.n	800572a <TIM_Base_SetConfig+0x9a>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a31      	ldr	r2, [pc, #196]	@ (80057c4 <TIM_Base_SetConfig+0x134>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d013      	beq.n	800572a <TIM_Base_SetConfig+0x9a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a30      	ldr	r2, [pc, #192]	@ (80057c8 <TIM_Base_SetConfig+0x138>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d00f      	beq.n	800572a <TIM_Base_SetConfig+0x9a>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a2f      	ldr	r2, [pc, #188]	@ (80057cc <TIM_Base_SetConfig+0x13c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00b      	beq.n	800572a <TIM_Base_SetConfig+0x9a>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a2e      	ldr	r2, [pc, #184]	@ (80057d0 <TIM_Base_SetConfig+0x140>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d007      	beq.n	800572a <TIM_Base_SetConfig+0x9a>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a2d      	ldr	r2, [pc, #180]	@ (80057d4 <TIM_Base_SetConfig+0x144>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d003      	beq.n	800572a <TIM_Base_SetConfig+0x9a>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a2c      	ldr	r2, [pc, #176]	@ (80057d8 <TIM_Base_SetConfig+0x148>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d108      	bne.n	800573c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	4313      	orrs	r3, r2
 800573a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a16      	ldr	r2, [pc, #88]	@ (80057bc <TIM_Base_SetConfig+0x12c>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d00f      	beq.n	8005788 <TIM_Base_SetConfig+0xf8>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a18      	ldr	r2, [pc, #96]	@ (80057cc <TIM_Base_SetConfig+0x13c>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d00b      	beq.n	8005788 <TIM_Base_SetConfig+0xf8>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a17      	ldr	r2, [pc, #92]	@ (80057d0 <TIM_Base_SetConfig+0x140>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d007      	beq.n	8005788 <TIM_Base_SetConfig+0xf8>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a16      	ldr	r2, [pc, #88]	@ (80057d4 <TIM_Base_SetConfig+0x144>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d003      	beq.n	8005788 <TIM_Base_SetConfig+0xf8>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a15      	ldr	r2, [pc, #84]	@ (80057d8 <TIM_Base_SetConfig+0x148>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d103      	bne.n	8005790 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	691a      	ldr	r2, [r3, #16]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d105      	bne.n	80057ae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	f023 0201 	bic.w	r2, r3, #1
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	611a      	str	r2, [r3, #16]
  }
}
 80057ae:	bf00      	nop
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	40012c00 	.word	0x40012c00
 80057c0:	40000400 	.word	0x40000400
 80057c4:	40000800 	.word	0x40000800
 80057c8:	40000c00 	.word	0x40000c00
 80057cc:	40013400 	.word	0x40013400
 80057d0:	40014000 	.word	0x40014000
 80057d4:	40014400 	.word	0x40014400
 80057d8:	40014800 	.word	0x40014800

080057dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	f023 0201 	bic.w	r2, r3, #1
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800580a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800580e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 0303 	bic.w	r3, r3, #3
 8005816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f023 0302 	bic.w	r3, r3, #2
 8005828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	4313      	orrs	r3, r2
 8005832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a2c      	ldr	r2, [pc, #176]	@ (80058e8 <TIM_OC1_SetConfig+0x10c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d00f      	beq.n	800585c <TIM_OC1_SetConfig+0x80>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a2b      	ldr	r2, [pc, #172]	@ (80058ec <TIM_OC1_SetConfig+0x110>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d00b      	beq.n	800585c <TIM_OC1_SetConfig+0x80>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a2a      	ldr	r2, [pc, #168]	@ (80058f0 <TIM_OC1_SetConfig+0x114>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d007      	beq.n	800585c <TIM_OC1_SetConfig+0x80>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a29      	ldr	r2, [pc, #164]	@ (80058f4 <TIM_OC1_SetConfig+0x118>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d003      	beq.n	800585c <TIM_OC1_SetConfig+0x80>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a28      	ldr	r2, [pc, #160]	@ (80058f8 <TIM_OC1_SetConfig+0x11c>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d10c      	bne.n	8005876 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f023 0308 	bic.w	r3, r3, #8
 8005862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	4313      	orrs	r3, r2
 800586c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f023 0304 	bic.w	r3, r3, #4
 8005874:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a1b      	ldr	r2, [pc, #108]	@ (80058e8 <TIM_OC1_SetConfig+0x10c>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d00f      	beq.n	800589e <TIM_OC1_SetConfig+0xc2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a1a      	ldr	r2, [pc, #104]	@ (80058ec <TIM_OC1_SetConfig+0x110>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d00b      	beq.n	800589e <TIM_OC1_SetConfig+0xc2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a19      	ldr	r2, [pc, #100]	@ (80058f0 <TIM_OC1_SetConfig+0x114>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d007      	beq.n	800589e <TIM_OC1_SetConfig+0xc2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a18      	ldr	r2, [pc, #96]	@ (80058f4 <TIM_OC1_SetConfig+0x118>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d003      	beq.n	800589e <TIM_OC1_SetConfig+0xc2>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a17      	ldr	r2, [pc, #92]	@ (80058f8 <TIM_OC1_SetConfig+0x11c>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d111      	bne.n	80058c2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80058ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	4313      	orrs	r3, r2
 80058c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	621a      	str	r2, [r3, #32]
}
 80058dc:	bf00      	nop
 80058de:	371c      	adds	r7, #28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	40012c00 	.word	0x40012c00
 80058ec:	40013400 	.word	0x40013400
 80058f0:	40014000 	.word	0x40014000
 80058f4:	40014400 	.word	0x40014400
 80058f8:	40014800 	.word	0x40014800

080058fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b087      	sub	sp, #28
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	f023 0210 	bic.w	r2, r3, #16
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800592a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800592e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	021b      	lsls	r3, r3, #8
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	4313      	orrs	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	f023 0320 	bic.w	r3, r3, #32
 800594a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	011b      	lsls	r3, r3, #4
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	4313      	orrs	r3, r2
 8005956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a28      	ldr	r2, [pc, #160]	@ (80059fc <TIM_OC2_SetConfig+0x100>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d003      	beq.n	8005968 <TIM_OC2_SetConfig+0x6c>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a27      	ldr	r2, [pc, #156]	@ (8005a00 <TIM_OC2_SetConfig+0x104>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d10d      	bne.n	8005984 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800596e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	011b      	lsls	r3, r3, #4
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	4313      	orrs	r3, r2
 800597a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005982:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a1d      	ldr	r2, [pc, #116]	@ (80059fc <TIM_OC2_SetConfig+0x100>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d00f      	beq.n	80059ac <TIM_OC2_SetConfig+0xb0>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a1c      	ldr	r2, [pc, #112]	@ (8005a00 <TIM_OC2_SetConfig+0x104>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d00b      	beq.n	80059ac <TIM_OC2_SetConfig+0xb0>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a1b      	ldr	r2, [pc, #108]	@ (8005a04 <TIM_OC2_SetConfig+0x108>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d007      	beq.n	80059ac <TIM_OC2_SetConfig+0xb0>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a1a      	ldr	r2, [pc, #104]	@ (8005a08 <TIM_OC2_SetConfig+0x10c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d003      	beq.n	80059ac <TIM_OC2_SetConfig+0xb0>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a19      	ldr	r2, [pc, #100]	@ (8005a0c <TIM_OC2_SetConfig+0x110>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d113      	bne.n	80059d4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	621a      	str	r2, [r3, #32]
}
 80059ee:	bf00      	nop
 80059f0:	371c      	adds	r7, #28
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	40012c00 	.word	0x40012c00
 8005a00:	40013400 	.word	0x40013400
 8005a04:	40014000 	.word	0x40014000
 8005a08:	40014400 	.word	0x40014400
 8005a0c:	40014800 	.word	0x40014800

08005a10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	69db      	ldr	r3, [r3, #28]
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f023 0303 	bic.w	r3, r3, #3
 8005a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	021b      	lsls	r3, r3, #8
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a27      	ldr	r2, [pc, #156]	@ (8005b0c <TIM_OC3_SetConfig+0xfc>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d003      	beq.n	8005a7a <TIM_OC3_SetConfig+0x6a>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a26      	ldr	r2, [pc, #152]	@ (8005b10 <TIM_OC3_SetConfig+0x100>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d10d      	bne.n	8005a96 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	021b      	lsls	r3, r3, #8
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a1c      	ldr	r2, [pc, #112]	@ (8005b0c <TIM_OC3_SetConfig+0xfc>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d00f      	beq.n	8005abe <TIM_OC3_SetConfig+0xae>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8005b10 <TIM_OC3_SetConfig+0x100>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d00b      	beq.n	8005abe <TIM_OC3_SetConfig+0xae>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a1a      	ldr	r2, [pc, #104]	@ (8005b14 <TIM_OC3_SetConfig+0x104>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d007      	beq.n	8005abe <TIM_OC3_SetConfig+0xae>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a19      	ldr	r2, [pc, #100]	@ (8005b18 <TIM_OC3_SetConfig+0x108>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d003      	beq.n	8005abe <TIM_OC3_SetConfig+0xae>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a18      	ldr	r2, [pc, #96]	@ (8005b1c <TIM_OC3_SetConfig+0x10c>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d113      	bne.n	8005ae6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005acc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	011b      	lsls	r3, r3, #4
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	011b      	lsls	r3, r3, #4
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685a      	ldr	r2, [r3, #4]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	621a      	str	r2, [r3, #32]
}
 8005b00:	bf00      	nop
 8005b02:	371c      	adds	r7, #28
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	40012c00 	.word	0x40012c00
 8005b10:	40013400 	.word	0x40013400
 8005b14:	40014000 	.word	0x40014000
 8005b18:	40014400 	.word	0x40014400
 8005b1c:	40014800 	.word	0x40014800

08005b20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b087      	sub	sp, #28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	021b      	lsls	r3, r3, #8
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	031b      	lsls	r3, r3, #12
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a18      	ldr	r2, [pc, #96]	@ (8005be0 <TIM_OC4_SetConfig+0xc0>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d00f      	beq.n	8005ba4 <TIM_OC4_SetConfig+0x84>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a17      	ldr	r2, [pc, #92]	@ (8005be4 <TIM_OC4_SetConfig+0xc4>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d00b      	beq.n	8005ba4 <TIM_OC4_SetConfig+0x84>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a16      	ldr	r2, [pc, #88]	@ (8005be8 <TIM_OC4_SetConfig+0xc8>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d007      	beq.n	8005ba4 <TIM_OC4_SetConfig+0x84>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a15      	ldr	r2, [pc, #84]	@ (8005bec <TIM_OC4_SetConfig+0xcc>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d003      	beq.n	8005ba4 <TIM_OC4_SetConfig+0x84>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a14      	ldr	r2, [pc, #80]	@ (8005bf0 <TIM_OC4_SetConfig+0xd0>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d109      	bne.n	8005bb8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005baa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	019b      	lsls	r3, r3, #6
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	621a      	str	r2, [r3, #32]
}
 8005bd2:	bf00      	nop
 8005bd4:	371c      	adds	r7, #28
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	40012c00 	.word	0x40012c00
 8005be4:	40013400 	.word	0x40013400
 8005be8:	40014000 	.word	0x40014000
 8005bec:	40014400 	.word	0x40014400
 8005bf0:	40014800 	.word	0x40014800

08005bf4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b087      	sub	sp, #28
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a1b      	ldr	r3, [r3, #32]
 8005c08:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005c38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	041b      	lsls	r3, r3, #16
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a17      	ldr	r2, [pc, #92]	@ (8005ca8 <TIM_OC5_SetConfig+0xb4>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d00f      	beq.n	8005c6e <TIM_OC5_SetConfig+0x7a>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a16      	ldr	r2, [pc, #88]	@ (8005cac <TIM_OC5_SetConfig+0xb8>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d00b      	beq.n	8005c6e <TIM_OC5_SetConfig+0x7a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a15      	ldr	r2, [pc, #84]	@ (8005cb0 <TIM_OC5_SetConfig+0xbc>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d007      	beq.n	8005c6e <TIM_OC5_SetConfig+0x7a>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a14      	ldr	r2, [pc, #80]	@ (8005cb4 <TIM_OC5_SetConfig+0xc0>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d003      	beq.n	8005c6e <TIM_OC5_SetConfig+0x7a>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a13      	ldr	r2, [pc, #76]	@ (8005cb8 <TIM_OC5_SetConfig+0xc4>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d109      	bne.n	8005c82 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	021b      	lsls	r3, r3, #8
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	697a      	ldr	r2, [r7, #20]
 8005c86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	621a      	str	r2, [r3, #32]
}
 8005c9c:	bf00      	nop
 8005c9e:	371c      	adds	r7, #28
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	40012c00 	.word	0x40012c00
 8005cac:	40013400 	.word	0x40013400
 8005cb0:	40014000 	.word	0x40014000
 8005cb4:	40014400 	.word	0x40014400
 8005cb8:	40014800 	.word	0x40014800

08005cbc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	021b      	lsls	r3, r3, #8
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	051b      	lsls	r3, r3, #20
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a18      	ldr	r2, [pc, #96]	@ (8005d74 <TIM_OC6_SetConfig+0xb8>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d00f      	beq.n	8005d38 <TIM_OC6_SetConfig+0x7c>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a17      	ldr	r2, [pc, #92]	@ (8005d78 <TIM_OC6_SetConfig+0xbc>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d00b      	beq.n	8005d38 <TIM_OC6_SetConfig+0x7c>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a16      	ldr	r2, [pc, #88]	@ (8005d7c <TIM_OC6_SetConfig+0xc0>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d007      	beq.n	8005d38 <TIM_OC6_SetConfig+0x7c>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a15      	ldr	r2, [pc, #84]	@ (8005d80 <TIM_OC6_SetConfig+0xc4>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d003      	beq.n	8005d38 <TIM_OC6_SetConfig+0x7c>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a14      	ldr	r2, [pc, #80]	@ (8005d84 <TIM_OC6_SetConfig+0xc8>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d109      	bne.n	8005d4c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	029b      	lsls	r3, r3, #10
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	621a      	str	r2, [r3, #32]
}
 8005d66:	bf00      	nop
 8005d68:	371c      	adds	r7, #28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	40012c00 	.word	0x40012c00
 8005d78:	40013400 	.word	0x40013400
 8005d7c:	40014000 	.word	0x40014000
 8005d80:	40014400 	.word	0x40014400
 8005d84:	40014800 	.word	0x40014800

08005d88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	f003 031f 	and.w	r3, r3, #31
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005da0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6a1a      	ldr	r2, [r3, #32]
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	43db      	mvns	r3, r3
 8005daa:	401a      	ands	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6a1a      	ldr	r2, [r3, #32]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f003 031f 	and.w	r3, r3, #31
 8005dba:	6879      	ldr	r1, [r7, #4]
 8005dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	621a      	str	r2, [r3, #32]
}
 8005dc6:	bf00      	nop
 8005dc8:	371c      	adds	r7, #28
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
	...

08005dd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d101      	bne.n	8005dec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005de8:	2302      	movs	r3, #2
 8005dea:	e068      	b.n	8005ebe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2202      	movs	r2, #2
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a2e      	ldr	r2, [pc, #184]	@ (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d004      	beq.n	8005e20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a2d      	ldr	r2, [pc, #180]	@ (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d108      	bne.n	8005e32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005e26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a1e      	ldr	r2, [pc, #120]	@ (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d01d      	beq.n	8005e92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e5e:	d018      	beq.n	8005e92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a1b      	ldr	r2, [pc, #108]	@ (8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d013      	beq.n	8005e92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a1a      	ldr	r2, [pc, #104]	@ (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d00e      	beq.n	8005e92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a18      	ldr	r2, [pc, #96]	@ (8005edc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d009      	beq.n	8005e92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a13      	ldr	r2, [pc, #76]	@ (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d004      	beq.n	8005e92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a14      	ldr	r2, [pc, #80]	@ (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d10c      	bne.n	8005eac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	40012c00 	.word	0x40012c00
 8005ed0:	40013400 	.word	0x40013400
 8005ed4:	40000400 	.word	0x40000400
 8005ed8:	40000800 	.word	0x40000800
 8005edc:	40000c00 	.word	0x40000c00
 8005ee0:	40014000 	.word	0x40014000

08005ee4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d101      	bne.n	8005f00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005efc:	2302      	movs	r3, #2
 8005efe:	e065      	b.n	8005fcc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	041b      	lsls	r3, r3, #16
 8005f76:	4313      	orrs	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a16      	ldr	r2, [pc, #88]	@ (8005fd8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d004      	beq.n	8005f8e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a14      	ldr	r2, [pc, #80]	@ (8005fdc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d115      	bne.n	8005fba <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f98:	051b      	lsls	r3, r3, #20
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	69db      	ldr	r3, [r3, #28]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3714      	adds	r7, #20
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr
 8005fd8:	40012c00 	.word	0x40012c00
 8005fdc:	40013400 	.word	0x40013400

08005fe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e040      	b.n	8006074 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d106      	bne.n	8006008 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7fb fae4 	bl	80015d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2224      	movs	r2, #36	@ 0x24
 800600c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f022 0201 	bic.w	r2, r2, #1
 800601c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006022:	2b00      	cmp	r3, #0
 8006024:	d002      	beq.n	800602c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 ff58 	bl	8006edc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 fc9d 	bl	800696c <UART_SetConfig>
 8006032:	4603      	mov	r3, r0
 8006034:	2b01      	cmp	r3, #1
 8006036:	d101      	bne.n	800603c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e01b      	b.n	8006074 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800604a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	689a      	ldr	r2, [r3, #8]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800605a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f042 0201 	orr.w	r2, r2, #1
 800606a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 ffd7 	bl	8007020 <UART_CheckIdleState>
 8006072:	4603      	mov	r3, r0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b08a      	sub	sp, #40	@ 0x28
 8006080:	af02      	add	r7, sp, #8
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	4613      	mov	r3, r2
 800608a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006090:	2b20      	cmp	r3, #32
 8006092:	d177      	bne.n	8006184 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d002      	beq.n	80060a0 <HAL_UART_Transmit+0x24>
 800609a:	88fb      	ldrh	r3, [r7, #6]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e070      	b.n	8006186 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2221      	movs	r2, #33	@ 0x21
 80060b0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060b2:	f7fb fd37 	bl	8001b24 <HAL_GetTick>
 80060b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	88fa      	ldrh	r2, [r7, #6]
 80060bc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	88fa      	ldrh	r2, [r7, #6]
 80060c4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060d0:	d108      	bne.n	80060e4 <HAL_UART_Transmit+0x68>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d104      	bne.n	80060e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80060da:	2300      	movs	r3, #0
 80060dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	61bb      	str	r3, [r7, #24]
 80060e2:	e003      	b.n	80060ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060e8:	2300      	movs	r3, #0
 80060ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80060ec:	e02f      	b.n	800614e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2200      	movs	r2, #0
 80060f6:	2180      	movs	r1, #128	@ 0x80
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f001 f839 	bl	8007170 <UART_WaitOnFlagUntilTimeout>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d004      	beq.n	800610e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2220      	movs	r2, #32
 8006108:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e03b      	b.n	8006186 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10b      	bne.n	800612c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	881a      	ldrh	r2, [r3, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006120:	b292      	uxth	r2, r2
 8006122:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	3302      	adds	r3, #2
 8006128:	61bb      	str	r3, [r7, #24]
 800612a:	e007      	b.n	800613c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	781a      	ldrb	r2, [r3, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	3301      	adds	r3, #1
 800613a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006142:	b29b      	uxth	r3, r3
 8006144:	3b01      	subs	r3, #1
 8006146:	b29a      	uxth	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006154:	b29b      	uxth	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1c9      	bne.n	80060ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	2200      	movs	r2, #0
 8006162:	2140      	movs	r1, #64	@ 0x40
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f001 f803 	bl	8007170 <UART_WaitOnFlagUntilTimeout>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d004      	beq.n	800617a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2220      	movs	r2, #32
 8006174:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e005      	b.n	8006186 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2220      	movs	r2, #32
 800617e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006180:	2300      	movs	r3, #0
 8006182:	e000      	b.n	8006186 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006184:	2302      	movs	r3, #2
  }
}
 8006186:	4618      	mov	r0, r3
 8006188:	3720      	adds	r7, #32
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b08a      	sub	sp, #40	@ 0x28
 8006192:	af02      	add	r7, sp, #8
 8006194:	60f8      	str	r0, [r7, #12]
 8006196:	60b9      	str	r1, [r7, #8]
 8006198:	603b      	str	r3, [r7, #0]
 800619a:	4613      	mov	r3, r2
 800619c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061a4:	2b20      	cmp	r3, #32
 80061a6:	f040 80b6 	bne.w	8006316 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d002      	beq.n	80061b6 <HAL_UART_Receive+0x28>
 80061b0:	88fb      	ldrh	r3, [r7, #6]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e0ae      	b.n	8006318 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2222      	movs	r2, #34	@ 0x22
 80061c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061d0:	f7fb fca8 	bl	8001b24 <HAL_GetTick>
 80061d4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	88fa      	ldrh	r2, [r7, #6]
 80061da:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	88fa      	ldrh	r2, [r7, #6]
 80061e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061ee:	d10e      	bne.n	800620e <HAL_UART_Receive+0x80>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d105      	bne.n	8006204 <HAL_UART_Receive+0x76>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80061fe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006202:	e02d      	b.n	8006260 <HAL_UART_Receive+0xd2>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	22ff      	movs	r2, #255	@ 0xff
 8006208:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800620c:	e028      	b.n	8006260 <HAL_UART_Receive+0xd2>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10d      	bne.n	8006232 <HAL_UART_Receive+0xa4>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d104      	bne.n	8006228 <HAL_UART_Receive+0x9a>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	22ff      	movs	r2, #255	@ 0xff
 8006222:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006226:	e01b      	b.n	8006260 <HAL_UART_Receive+0xd2>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	227f      	movs	r2, #127	@ 0x7f
 800622c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006230:	e016      	b.n	8006260 <HAL_UART_Receive+0xd2>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800623a:	d10d      	bne.n	8006258 <HAL_UART_Receive+0xca>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d104      	bne.n	800624e <HAL_UART_Receive+0xc0>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	227f      	movs	r2, #127	@ 0x7f
 8006248:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800624c:	e008      	b.n	8006260 <HAL_UART_Receive+0xd2>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	223f      	movs	r2, #63	@ 0x3f
 8006252:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006256:	e003      	b.n	8006260 <HAL_UART_Receive+0xd2>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006266:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006270:	d108      	bne.n	8006284 <HAL_UART_Receive+0xf6>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d104      	bne.n	8006284 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800627a:	2300      	movs	r3, #0
 800627c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	61bb      	str	r3, [r7, #24]
 8006282:	e003      	b.n	800628c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006288:	2300      	movs	r3, #0
 800628a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800628c:	e037      	b.n	80062fe <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	2200      	movs	r2, #0
 8006296:	2120      	movs	r1, #32
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 ff69 	bl	8007170 <UART_WaitOnFlagUntilTimeout>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d005      	beq.n	80062b0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2220      	movs	r2, #32
 80062a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e033      	b.n	8006318 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10c      	bne.n	80062d0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80062bc:	b29a      	uxth	r2, r3
 80062be:	8a7b      	ldrh	r3, [r7, #18]
 80062c0:	4013      	ands	r3, r2
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	3302      	adds	r3, #2
 80062cc:	61bb      	str	r3, [r7, #24]
 80062ce:	e00d      	b.n	80062ec <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	8a7b      	ldrh	r3, [r7, #18]
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	4013      	ands	r3, r2
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	3301      	adds	r3, #1
 80062ea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	3b01      	subs	r3, #1
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006304:	b29b      	uxth	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1c1      	bne.n	800628e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2220      	movs	r2, #32
 800630e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8006312:	2300      	movs	r3, #0
 8006314:	e000      	b.n	8006318 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006316:	2302      	movs	r3, #2
  }
}
 8006318:	4618      	mov	r0, r3
 800631a:	3720      	adds	r7, #32
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b0ba      	sub	sp, #232	@ 0xe8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006346:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800634a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800634e:	4013      	ands	r3, r2
 8006350:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006354:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006358:	2b00      	cmp	r3, #0
 800635a:	d115      	bne.n	8006388 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800635c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006360:	f003 0320 	and.w	r3, r3, #32
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00f      	beq.n	8006388 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800636c:	f003 0320 	and.w	r3, r3, #32
 8006370:	2b00      	cmp	r3, #0
 8006372:	d009      	beq.n	8006388 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 82ca 	beq.w	8006912 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	4798      	blx	r3
      }
      return;
 8006386:	e2c4      	b.n	8006912 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006388:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800638c:	2b00      	cmp	r3, #0
 800638e:	f000 8117 	beq.w	80065c0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006392:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	2b00      	cmp	r3, #0
 800639c:	d106      	bne.n	80063ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800639e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80063a2:	4b85      	ldr	r3, [pc, #532]	@ (80065b8 <HAL_UART_IRQHandler+0x298>)
 80063a4:	4013      	ands	r3, r2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f000 810a 	beq.w	80065c0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063b0:	f003 0301 	and.w	r3, r3, #1
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d011      	beq.n	80063dc <HAL_UART_IRQHandler+0xbc>
 80063b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00b      	beq.n	80063dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2201      	movs	r2, #1
 80063ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063d2:	f043 0201 	orr.w	r2, r3, #1
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063e0:	f003 0302 	and.w	r3, r3, #2
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d011      	beq.n	800640c <HAL_UART_IRQHandler+0xec>
 80063e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00b      	beq.n	800640c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2202      	movs	r2, #2
 80063fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006402:	f043 0204 	orr.w	r2, r3, #4
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800640c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	2b00      	cmp	r3, #0
 8006416:	d011      	beq.n	800643c <HAL_UART_IRQHandler+0x11c>
 8006418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00b      	beq.n	800643c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2204      	movs	r2, #4
 800642a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006432:	f043 0202 	orr.w	r2, r3, #2
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800643c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006440:	f003 0308 	and.w	r3, r3, #8
 8006444:	2b00      	cmp	r3, #0
 8006446:	d017      	beq.n	8006478 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800644c:	f003 0320 	and.w	r3, r3, #32
 8006450:	2b00      	cmp	r3, #0
 8006452:	d105      	bne.n	8006460 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006454:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006458:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00b      	beq.n	8006478 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2208      	movs	r2, #8
 8006466:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800646e:	f043 0208 	orr.w	r2, r3, #8
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800647c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006480:	2b00      	cmp	r3, #0
 8006482:	d012      	beq.n	80064aa <HAL_UART_IRQHandler+0x18a>
 8006484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006488:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00c      	beq.n	80064aa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006498:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064a0:	f043 0220 	orr.w	r2, r3, #32
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 8230 	beq.w	8006916 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80064b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064ba:	f003 0320 	and.w	r3, r3, #32
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00d      	beq.n	80064de <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064c6:	f003 0320 	and.w	r3, r3, #32
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d007      	beq.n	80064de <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064f2:	2b40      	cmp	r3, #64	@ 0x40
 80064f4:	d005      	beq.n	8006502 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80064f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d04f      	beq.n	80065a2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fea1 	bl	800724a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006512:	2b40      	cmp	r3, #64	@ 0x40
 8006514:	d141      	bne.n	800659a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3308      	adds	r3, #8
 800651c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006520:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006524:	e853 3f00 	ldrex	r3, [r3]
 8006528:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800652c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006530:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006534:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	3308      	adds	r3, #8
 800653e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006542:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006546:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800654e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006552:	e841 2300 	strex	r3, r2, [r1]
 8006556:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800655a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1d9      	bne.n	8006516 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006566:	2b00      	cmp	r3, #0
 8006568:	d013      	beq.n	8006592 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800656e:	4a13      	ldr	r2, [pc, #76]	@ (80065bc <HAL_UART_IRQHandler+0x29c>)
 8006570:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006576:	4618      	mov	r0, r3
 8006578:	f7fc f9c0 	bl	80028fc <HAL_DMA_Abort_IT>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d017      	beq.n	80065b2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800658c:	4610      	mov	r0, r2
 800658e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006590:	e00f      	b.n	80065b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f9d4 	bl	8006940 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006598:	e00b      	b.n	80065b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f9d0 	bl	8006940 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a0:	e007      	b.n	80065b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f9cc 	bl	8006940 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80065b0:	e1b1      	b.n	8006916 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065b2:	bf00      	nop
    return;
 80065b4:	e1af      	b.n	8006916 <HAL_UART_IRQHandler+0x5f6>
 80065b6:	bf00      	nop
 80065b8:	04000120 	.word	0x04000120
 80065bc:	08007313 	.word	0x08007313

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	f040 816a 	bne.w	800689e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80065ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ce:	f003 0310 	and.w	r3, r3, #16
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f000 8163 	beq.w	800689e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80065d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065dc:	f003 0310 	and.w	r3, r3, #16
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f000 815c 	beq.w	800689e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2210      	movs	r2, #16
 80065ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065f8:	2b40      	cmp	r3, #64	@ 0x40
 80065fa:	f040 80d4 	bne.w	80067a6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800660a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800660e:	2b00      	cmp	r3, #0
 8006610:	f000 80ad 	beq.w	800676e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800661a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800661e:	429a      	cmp	r2, r3
 8006620:	f080 80a5 	bcs.w	800676e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800662a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0320 	and.w	r3, r3, #32
 800663a:	2b00      	cmp	r3, #0
 800663c:	f040 8086 	bne.w	800674c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006648:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800664c:	e853 3f00 	ldrex	r3, [r3]
 8006650:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006654:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006658:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800665c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	461a      	mov	r2, r3
 8006666:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800666a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800666e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006672:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006676:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800667a:	e841 2300 	strex	r3, r2, [r1]
 800667e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006682:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1da      	bne.n	8006640 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	3308      	adds	r3, #8
 8006690:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006692:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006694:	e853 3f00 	ldrex	r3, [r3]
 8006698:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800669a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800669c:	f023 0301 	bic.w	r3, r3, #1
 80066a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3308      	adds	r3, #8
 80066aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80066ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80066b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80066b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80066ba:	e841 2300 	strex	r3, r2, [r1]
 80066be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80066c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1e1      	bne.n	800668a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3308      	adds	r3, #8
 80066cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066d0:	e853 3f00 	ldrex	r3, [r3]
 80066d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80066d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	3308      	adds	r3, #8
 80066e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80066ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80066ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80066f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80066f2:	e841 2300 	strex	r3, r2, [r1]
 80066f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80066f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1e3      	bne.n	80066c6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2220      	movs	r2, #32
 8006702:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006712:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006714:	e853 3f00 	ldrex	r3, [r3]
 8006718:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800671a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800671c:	f023 0310 	bic.w	r3, r3, #16
 8006720:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	461a      	mov	r2, r3
 800672a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800672e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006730:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006732:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006734:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006736:	e841 2300 	strex	r3, r2, [r1]
 800673a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800673c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1e4      	bne.n	800670c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006746:	4618      	mov	r0, r3
 8006748:	f7fc f89a 	bl	8002880 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2202      	movs	r2, #2
 8006750:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800675e:	b29b      	uxth	r3, r3
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	b29b      	uxth	r3, r3
 8006764:	4619      	mov	r1, r3
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f8f4 	bl	8006954 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800676c:	e0d5      	b.n	800691a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006774:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006778:	429a      	cmp	r2, r3
 800677a:	f040 80ce 	bne.w	800691a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0320 	and.w	r3, r3, #32
 800678a:	2b20      	cmp	r3, #32
 800678c:	f040 80c5 	bne.w	800691a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800679c:	4619      	mov	r1, r3
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f8d8 	bl	8006954 <HAL_UARTEx_RxEventCallback>
      return;
 80067a4:	e0b9      	b.n	800691a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f000 80ab 	beq.w	800691e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80067c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f000 80a6 	beq.w	800691e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067da:	e853 3f00 	ldrex	r3, [r3]
 80067de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	461a      	mov	r2, r3
 80067f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80067f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80067f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067fc:	e841 2300 	strex	r3, r2, [r1]
 8006800:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1e4      	bne.n	80067d2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3308      	adds	r3, #8
 800680e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006812:	e853 3f00 	ldrex	r3, [r3]
 8006816:	623b      	str	r3, [r7, #32]
   return(result);
 8006818:	6a3b      	ldr	r3, [r7, #32]
 800681a:	f023 0301 	bic.w	r3, r3, #1
 800681e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3308      	adds	r3, #8
 8006828:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800682c:	633a      	str	r2, [r7, #48]	@ 0x30
 800682e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006830:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006832:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006834:	e841 2300 	strex	r3, r2, [r1]
 8006838:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800683a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1e3      	bne.n	8006808 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2220      	movs	r2, #32
 8006844:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	e853 3f00 	ldrex	r3, [r3]
 8006860:	60fb      	str	r3, [r7, #12]
   return(result);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f023 0310 	bic.w	r3, r3, #16
 8006868:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	461a      	mov	r2, r3
 8006872:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006876:	61fb      	str	r3, [r7, #28]
 8006878:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687a:	69b9      	ldr	r1, [r7, #24]
 800687c:	69fa      	ldr	r2, [r7, #28]
 800687e:	e841 2300 	strex	r3, r2, [r1]
 8006882:	617b      	str	r3, [r7, #20]
   return(result);
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1e4      	bne.n	8006854 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2202      	movs	r2, #2
 800688e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006890:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006894:	4619      	mov	r1, r3
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f85c 	bl	8006954 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800689c:	e03f      	b.n	800691e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800689e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00e      	beq.n	80068c8 <HAL_UART_IRQHandler+0x5a8>
 80068aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d008      	beq.n	80068c8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80068be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fd66 	bl	8007392 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068c6:	e02d      	b.n	8006924 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80068c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00e      	beq.n	80068f2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80068d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d008      	beq.n	80068f2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d01c      	beq.n	8006922 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	4798      	blx	r3
    }
    return;
 80068f0:	e017      	b.n	8006922 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80068f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d012      	beq.n	8006924 <HAL_UART_IRQHandler+0x604>
 80068fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00c      	beq.n	8006924 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fd17 	bl	800733e <UART_EndTransmit_IT>
    return;
 8006910:	e008      	b.n	8006924 <HAL_UART_IRQHandler+0x604>
      return;
 8006912:	bf00      	nop
 8006914:	e006      	b.n	8006924 <HAL_UART_IRQHandler+0x604>
    return;
 8006916:	bf00      	nop
 8006918:	e004      	b.n	8006924 <HAL_UART_IRQHandler+0x604>
      return;
 800691a:	bf00      	nop
 800691c:	e002      	b.n	8006924 <HAL_UART_IRQHandler+0x604>
      return;
 800691e:	bf00      	nop
 8006920:	e000      	b.n	8006924 <HAL_UART_IRQHandler+0x604>
    return;
 8006922:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006924:	37e8      	adds	r7, #232	@ 0xe8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop

0800692c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	460b      	mov	r3, r1
 800695e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800696c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006970:	b08a      	sub	sp, #40	@ 0x28
 8006972:	af00      	add	r7, sp, #0
 8006974:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	431a      	orrs	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	431a      	orrs	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	69db      	ldr	r3, [r3, #28]
 8006990:	4313      	orrs	r3, r2
 8006992:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	4ba4      	ldr	r3, [pc, #656]	@ (8006c2c <UART_SetConfig+0x2c0>)
 800699c:	4013      	ands	r3, r2
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	6812      	ldr	r2, [r2, #0]
 80069a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80069a4:	430b      	orrs	r3, r1
 80069a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	68da      	ldr	r2, [r3, #12]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a99      	ldr	r2, [pc, #612]	@ (8006c30 <UART_SetConfig+0x2c4>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d004      	beq.n	80069d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069d4:	4313      	orrs	r3, r2
 80069d6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069e8:	430a      	orrs	r2, r1
 80069ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a90      	ldr	r2, [pc, #576]	@ (8006c34 <UART_SetConfig+0x2c8>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d126      	bne.n	8006a44 <UART_SetConfig+0xd8>
 80069f6:	4b90      	ldr	r3, [pc, #576]	@ (8006c38 <UART_SetConfig+0x2cc>)
 80069f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069fc:	f003 0303 	and.w	r3, r3, #3
 8006a00:	2b03      	cmp	r3, #3
 8006a02:	d81b      	bhi.n	8006a3c <UART_SetConfig+0xd0>
 8006a04:	a201      	add	r2, pc, #4	@ (adr r2, 8006a0c <UART_SetConfig+0xa0>)
 8006a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0a:	bf00      	nop
 8006a0c:	08006a1d 	.word	0x08006a1d
 8006a10:	08006a2d 	.word	0x08006a2d
 8006a14:	08006a25 	.word	0x08006a25
 8006a18:	08006a35 	.word	0x08006a35
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a22:	e116      	b.n	8006c52 <UART_SetConfig+0x2e6>
 8006a24:	2302      	movs	r3, #2
 8006a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a2a:	e112      	b.n	8006c52 <UART_SetConfig+0x2e6>
 8006a2c:	2304      	movs	r3, #4
 8006a2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a32:	e10e      	b.n	8006c52 <UART_SetConfig+0x2e6>
 8006a34:	2308      	movs	r3, #8
 8006a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a3a:	e10a      	b.n	8006c52 <UART_SetConfig+0x2e6>
 8006a3c:	2310      	movs	r3, #16
 8006a3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a42:	e106      	b.n	8006c52 <UART_SetConfig+0x2e6>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a7c      	ldr	r2, [pc, #496]	@ (8006c3c <UART_SetConfig+0x2d0>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d138      	bne.n	8006ac0 <UART_SetConfig+0x154>
 8006a4e:	4b7a      	ldr	r3, [pc, #488]	@ (8006c38 <UART_SetConfig+0x2cc>)
 8006a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a54:	f003 030c 	and.w	r3, r3, #12
 8006a58:	2b0c      	cmp	r3, #12
 8006a5a:	d82d      	bhi.n	8006ab8 <UART_SetConfig+0x14c>
 8006a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8006a64 <UART_SetConfig+0xf8>)
 8006a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a62:	bf00      	nop
 8006a64:	08006a99 	.word	0x08006a99
 8006a68:	08006ab9 	.word	0x08006ab9
 8006a6c:	08006ab9 	.word	0x08006ab9
 8006a70:	08006ab9 	.word	0x08006ab9
 8006a74:	08006aa9 	.word	0x08006aa9
 8006a78:	08006ab9 	.word	0x08006ab9
 8006a7c:	08006ab9 	.word	0x08006ab9
 8006a80:	08006ab9 	.word	0x08006ab9
 8006a84:	08006aa1 	.word	0x08006aa1
 8006a88:	08006ab9 	.word	0x08006ab9
 8006a8c:	08006ab9 	.word	0x08006ab9
 8006a90:	08006ab9 	.word	0x08006ab9
 8006a94:	08006ab1 	.word	0x08006ab1
 8006a98:	2300      	movs	r3, #0
 8006a9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a9e:	e0d8      	b.n	8006c52 <UART_SetConfig+0x2e6>
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006aa6:	e0d4      	b.n	8006c52 <UART_SetConfig+0x2e6>
 8006aa8:	2304      	movs	r3, #4
 8006aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006aae:	e0d0      	b.n	8006c52 <UART_SetConfig+0x2e6>
 8006ab0:	2308      	movs	r3, #8
 8006ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ab6:	e0cc      	b.n	8006c52 <UART_SetConfig+0x2e6>
 8006ab8:	2310      	movs	r3, #16
 8006aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006abe:	e0c8      	b.n	8006c52 <UART_SetConfig+0x2e6>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a5e      	ldr	r2, [pc, #376]	@ (8006c40 <UART_SetConfig+0x2d4>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d125      	bne.n	8006b16 <UART_SetConfig+0x1aa>
 8006aca:	4b5b      	ldr	r3, [pc, #364]	@ (8006c38 <UART_SetConfig+0x2cc>)
 8006acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ad0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006ad4:	2b30      	cmp	r3, #48	@ 0x30
 8006ad6:	d016      	beq.n	8006b06 <UART_SetConfig+0x19a>
 8006ad8:	2b30      	cmp	r3, #48	@ 0x30
 8006ada:	d818      	bhi.n	8006b0e <UART_SetConfig+0x1a2>
 8006adc:	2b20      	cmp	r3, #32
 8006ade:	d00a      	beq.n	8006af6 <UART_SetConfig+0x18a>
 8006ae0:	2b20      	cmp	r3, #32
 8006ae2:	d814      	bhi.n	8006b0e <UART_SetConfig+0x1a2>
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d002      	beq.n	8006aee <UART_SetConfig+0x182>
 8006ae8:	2b10      	cmp	r3, #16
 8006aea:	d008      	beq.n	8006afe <UART_SetConfig+0x192>
 8006aec:	e00f      	b.n	8006b0e <UART_SetConfig+0x1a2>
 8006aee:	2300      	movs	r3, #0
 8006af0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006af4:	e0ad      	b.n	8006c52 <UART_SetConfig+0x2e6>
 8006af6:	2302      	movs	r3, #2
 8006af8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006afc:	e0a9      	b.n	8006c52 <UART_SetConfig+0x2e6>
 8006afe:	2304      	movs	r3, #4
 8006b00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b04:	e0a5      	b.n	8006c52 <UART_SetConfig+0x2e6>
 8006b06:	2308      	movs	r3, #8
 8006b08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b0c:	e0a1      	b.n	8006c52 <UART_SetConfig+0x2e6>
 8006b0e:	2310      	movs	r3, #16
 8006b10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b14:	e09d      	b.n	8006c52 <UART_SetConfig+0x2e6>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a4a      	ldr	r2, [pc, #296]	@ (8006c44 <UART_SetConfig+0x2d8>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d125      	bne.n	8006b6c <UART_SetConfig+0x200>
 8006b20:	4b45      	ldr	r3, [pc, #276]	@ (8006c38 <UART_SetConfig+0x2cc>)
 8006b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b26:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006b2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b2c:	d016      	beq.n	8006b5c <UART_SetConfig+0x1f0>
 8006b2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b30:	d818      	bhi.n	8006b64 <UART_SetConfig+0x1f8>
 8006b32:	2b80      	cmp	r3, #128	@ 0x80
 8006b34:	d00a      	beq.n	8006b4c <UART_SetConfig+0x1e0>
 8006b36:	2b80      	cmp	r3, #128	@ 0x80
 8006b38:	d814      	bhi.n	8006b64 <UART_SetConfig+0x1f8>
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d002      	beq.n	8006b44 <UART_SetConfig+0x1d8>
 8006b3e:	2b40      	cmp	r3, #64	@ 0x40
 8006b40:	d008      	beq.n	8006b54 <UART_SetConfig+0x1e8>
 8006b42:	e00f      	b.n	8006b64 <UART_SetConfig+0x1f8>
 8006b44:	2300      	movs	r3, #0
 8006b46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b4a:	e082      	b.n	8006c52 <UART_SetConfig+0x2e6>
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b52:	e07e      	b.n	8006c52 <UART_SetConfig+0x2e6>
 8006b54:	2304      	movs	r3, #4
 8006b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b5a:	e07a      	b.n	8006c52 <UART_SetConfig+0x2e6>
 8006b5c:	2308      	movs	r3, #8
 8006b5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b62:	e076      	b.n	8006c52 <UART_SetConfig+0x2e6>
 8006b64:	2310      	movs	r3, #16
 8006b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b6a:	e072      	b.n	8006c52 <UART_SetConfig+0x2e6>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a35      	ldr	r2, [pc, #212]	@ (8006c48 <UART_SetConfig+0x2dc>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d12a      	bne.n	8006bcc <UART_SetConfig+0x260>
 8006b76:	4b30      	ldr	r3, [pc, #192]	@ (8006c38 <UART_SetConfig+0x2cc>)
 8006b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b84:	d01a      	beq.n	8006bbc <UART_SetConfig+0x250>
 8006b86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b8a:	d81b      	bhi.n	8006bc4 <UART_SetConfig+0x258>
 8006b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b90:	d00c      	beq.n	8006bac <UART_SetConfig+0x240>
 8006b92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b96:	d815      	bhi.n	8006bc4 <UART_SetConfig+0x258>
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d003      	beq.n	8006ba4 <UART_SetConfig+0x238>
 8006b9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ba0:	d008      	beq.n	8006bb4 <UART_SetConfig+0x248>
 8006ba2:	e00f      	b.n	8006bc4 <UART_SetConfig+0x258>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006baa:	e052      	b.n	8006c52 <UART_SetConfig+0x2e6>
 8006bac:	2302      	movs	r3, #2
 8006bae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bb2:	e04e      	b.n	8006c52 <UART_SetConfig+0x2e6>
 8006bb4:	2304      	movs	r3, #4
 8006bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bba:	e04a      	b.n	8006c52 <UART_SetConfig+0x2e6>
 8006bbc:	2308      	movs	r3, #8
 8006bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bc2:	e046      	b.n	8006c52 <UART_SetConfig+0x2e6>
 8006bc4:	2310      	movs	r3, #16
 8006bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bca:	e042      	b.n	8006c52 <UART_SetConfig+0x2e6>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a17      	ldr	r2, [pc, #92]	@ (8006c30 <UART_SetConfig+0x2c4>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d13a      	bne.n	8006c4c <UART_SetConfig+0x2e0>
 8006bd6:	4b18      	ldr	r3, [pc, #96]	@ (8006c38 <UART_SetConfig+0x2cc>)
 8006bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bdc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006be0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006be4:	d01a      	beq.n	8006c1c <UART_SetConfig+0x2b0>
 8006be6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006bea:	d81b      	bhi.n	8006c24 <UART_SetConfig+0x2b8>
 8006bec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bf0:	d00c      	beq.n	8006c0c <UART_SetConfig+0x2a0>
 8006bf2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bf6:	d815      	bhi.n	8006c24 <UART_SetConfig+0x2b8>
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d003      	beq.n	8006c04 <UART_SetConfig+0x298>
 8006bfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c00:	d008      	beq.n	8006c14 <UART_SetConfig+0x2a8>
 8006c02:	e00f      	b.n	8006c24 <UART_SetConfig+0x2b8>
 8006c04:	2300      	movs	r3, #0
 8006c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c0a:	e022      	b.n	8006c52 <UART_SetConfig+0x2e6>
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c12:	e01e      	b.n	8006c52 <UART_SetConfig+0x2e6>
 8006c14:	2304      	movs	r3, #4
 8006c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c1a:	e01a      	b.n	8006c52 <UART_SetConfig+0x2e6>
 8006c1c:	2308      	movs	r3, #8
 8006c1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c22:	e016      	b.n	8006c52 <UART_SetConfig+0x2e6>
 8006c24:	2310      	movs	r3, #16
 8006c26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c2a:	e012      	b.n	8006c52 <UART_SetConfig+0x2e6>
 8006c2c:	efff69f3 	.word	0xefff69f3
 8006c30:	40008000 	.word	0x40008000
 8006c34:	40013800 	.word	0x40013800
 8006c38:	40021000 	.word	0x40021000
 8006c3c:	40004400 	.word	0x40004400
 8006c40:	40004800 	.word	0x40004800
 8006c44:	40004c00 	.word	0x40004c00
 8006c48:	40005000 	.word	0x40005000
 8006c4c:	2310      	movs	r3, #16
 8006c4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a9f      	ldr	r2, [pc, #636]	@ (8006ed4 <UART_SetConfig+0x568>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d17a      	bne.n	8006d52 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006c60:	2b08      	cmp	r3, #8
 8006c62:	d824      	bhi.n	8006cae <UART_SetConfig+0x342>
 8006c64:	a201      	add	r2, pc, #4	@ (adr r2, 8006c6c <UART_SetConfig+0x300>)
 8006c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6a:	bf00      	nop
 8006c6c:	08006c91 	.word	0x08006c91
 8006c70:	08006caf 	.word	0x08006caf
 8006c74:	08006c99 	.word	0x08006c99
 8006c78:	08006caf 	.word	0x08006caf
 8006c7c:	08006c9f 	.word	0x08006c9f
 8006c80:	08006caf 	.word	0x08006caf
 8006c84:	08006caf 	.word	0x08006caf
 8006c88:	08006caf 	.word	0x08006caf
 8006c8c:	08006ca7 	.word	0x08006ca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c90:	f7fd f816 	bl	8003cc0 <HAL_RCC_GetPCLK1Freq>
 8006c94:	61f8      	str	r0, [r7, #28]
        break;
 8006c96:	e010      	b.n	8006cba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c98:	4b8f      	ldr	r3, [pc, #572]	@ (8006ed8 <UART_SetConfig+0x56c>)
 8006c9a:	61fb      	str	r3, [r7, #28]
        break;
 8006c9c:	e00d      	b.n	8006cba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c9e:	f7fc ff77 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 8006ca2:	61f8      	str	r0, [r7, #28]
        break;
 8006ca4:	e009      	b.n	8006cba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ca6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006caa:	61fb      	str	r3, [r7, #28]
        break;
 8006cac:	e005      	b.n	8006cba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006cb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 80fb 	beq.w	8006eb8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	4413      	add	r3, r2
 8006ccc:	69fa      	ldr	r2, [r7, #28]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d305      	bcc.n	8006cde <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006cd8:	69fa      	ldr	r2, [r7, #28]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d903      	bls.n	8006ce6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006ce4:	e0e8      	b.n	8006eb8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	461c      	mov	r4, r3
 8006cec:	4615      	mov	r5, r2
 8006cee:	f04f 0200 	mov.w	r2, #0
 8006cf2:	f04f 0300 	mov.w	r3, #0
 8006cf6:	022b      	lsls	r3, r5, #8
 8006cf8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006cfc:	0222      	lsls	r2, r4, #8
 8006cfe:	68f9      	ldr	r1, [r7, #12]
 8006d00:	6849      	ldr	r1, [r1, #4]
 8006d02:	0849      	lsrs	r1, r1, #1
 8006d04:	2000      	movs	r0, #0
 8006d06:	4688      	mov	r8, r1
 8006d08:	4681      	mov	r9, r0
 8006d0a:	eb12 0a08 	adds.w	sl, r2, r8
 8006d0e:	eb43 0b09 	adc.w	fp, r3, r9
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	603b      	str	r3, [r7, #0]
 8006d1a:	607a      	str	r2, [r7, #4]
 8006d1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d20:	4650      	mov	r0, sl
 8006d22:	4659      	mov	r1, fp
 8006d24:	f7f9 fa62 	bl	80001ec <__aeabi_uldivmod>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d36:	d308      	bcc.n	8006d4a <UART_SetConfig+0x3de>
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d3e:	d204      	bcs.n	8006d4a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	69ba      	ldr	r2, [r7, #24]
 8006d46:	60da      	str	r2, [r3, #12]
 8006d48:	e0b6      	b.n	8006eb8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006d50:	e0b2      	b.n	8006eb8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d5a:	d15e      	bne.n	8006e1a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006d5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006d60:	2b08      	cmp	r3, #8
 8006d62:	d828      	bhi.n	8006db6 <UART_SetConfig+0x44a>
 8006d64:	a201      	add	r2, pc, #4	@ (adr r2, 8006d6c <UART_SetConfig+0x400>)
 8006d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d6a:	bf00      	nop
 8006d6c:	08006d91 	.word	0x08006d91
 8006d70:	08006d99 	.word	0x08006d99
 8006d74:	08006da1 	.word	0x08006da1
 8006d78:	08006db7 	.word	0x08006db7
 8006d7c:	08006da7 	.word	0x08006da7
 8006d80:	08006db7 	.word	0x08006db7
 8006d84:	08006db7 	.word	0x08006db7
 8006d88:	08006db7 	.word	0x08006db7
 8006d8c:	08006daf 	.word	0x08006daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d90:	f7fc ff96 	bl	8003cc0 <HAL_RCC_GetPCLK1Freq>
 8006d94:	61f8      	str	r0, [r7, #28]
        break;
 8006d96:	e014      	b.n	8006dc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d98:	f7fc ffa8 	bl	8003cec <HAL_RCC_GetPCLK2Freq>
 8006d9c:	61f8      	str	r0, [r7, #28]
        break;
 8006d9e:	e010      	b.n	8006dc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006da0:	4b4d      	ldr	r3, [pc, #308]	@ (8006ed8 <UART_SetConfig+0x56c>)
 8006da2:	61fb      	str	r3, [r7, #28]
        break;
 8006da4:	e00d      	b.n	8006dc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006da6:	f7fc fef3 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 8006daa:	61f8      	str	r0, [r7, #28]
        break;
 8006dac:	e009      	b.n	8006dc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006db2:	61fb      	str	r3, [r7, #28]
        break;
 8006db4:	e005      	b.n	8006dc2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006db6:	2300      	movs	r3, #0
 8006db8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006dc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d077      	beq.n	8006eb8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	005a      	lsls	r2, r3, #1
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	085b      	lsrs	r3, r3, #1
 8006dd2:	441a      	add	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ddc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	2b0f      	cmp	r3, #15
 8006de2:	d916      	bls.n	8006e12 <UART_SetConfig+0x4a6>
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dea:	d212      	bcs.n	8006e12 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	f023 030f 	bic.w	r3, r3, #15
 8006df4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	085b      	lsrs	r3, r3, #1
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	f003 0307 	and.w	r3, r3, #7
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	8afb      	ldrh	r3, [r7, #22]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	8afa      	ldrh	r2, [r7, #22]
 8006e0e:	60da      	str	r2, [r3, #12]
 8006e10:	e052      	b.n	8006eb8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006e18:	e04e      	b.n	8006eb8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e1a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006e1e:	2b08      	cmp	r3, #8
 8006e20:	d827      	bhi.n	8006e72 <UART_SetConfig+0x506>
 8006e22:	a201      	add	r2, pc, #4	@ (adr r2, 8006e28 <UART_SetConfig+0x4bc>)
 8006e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e28:	08006e4d 	.word	0x08006e4d
 8006e2c:	08006e55 	.word	0x08006e55
 8006e30:	08006e5d 	.word	0x08006e5d
 8006e34:	08006e73 	.word	0x08006e73
 8006e38:	08006e63 	.word	0x08006e63
 8006e3c:	08006e73 	.word	0x08006e73
 8006e40:	08006e73 	.word	0x08006e73
 8006e44:	08006e73 	.word	0x08006e73
 8006e48:	08006e6b 	.word	0x08006e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e4c:	f7fc ff38 	bl	8003cc0 <HAL_RCC_GetPCLK1Freq>
 8006e50:	61f8      	str	r0, [r7, #28]
        break;
 8006e52:	e014      	b.n	8006e7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e54:	f7fc ff4a 	bl	8003cec <HAL_RCC_GetPCLK2Freq>
 8006e58:	61f8      	str	r0, [r7, #28]
        break;
 8006e5a:	e010      	b.n	8006e7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e5c:	4b1e      	ldr	r3, [pc, #120]	@ (8006ed8 <UART_SetConfig+0x56c>)
 8006e5e:	61fb      	str	r3, [r7, #28]
        break;
 8006e60:	e00d      	b.n	8006e7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e62:	f7fc fe95 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 8006e66:	61f8      	str	r0, [r7, #28]
        break;
 8006e68:	e009      	b.n	8006e7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e6e:	61fb      	str	r3, [r7, #28]
        break;
 8006e70:	e005      	b.n	8006e7e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006e7c:	bf00      	nop
    }

    if (pclk != 0U)
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d019      	beq.n	8006eb8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	085a      	lsrs	r2, r3, #1
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	441a      	add	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e96:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	2b0f      	cmp	r3, #15
 8006e9c:	d909      	bls.n	8006eb2 <UART_SetConfig+0x546>
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ea4:	d205      	bcs.n	8006eb2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	60da      	str	r2, [r3, #12]
 8006eb0:	e002      	b.n	8006eb8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006ec4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3728      	adds	r7, #40	@ 0x28
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ed2:	bf00      	nop
 8006ed4:	40008000 	.word	0x40008000
 8006ed8:	00f42400 	.word	0x00f42400

08006edc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee8:	f003 0308 	and.w	r3, r3, #8
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00a      	beq.n	8006f06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	430a      	orrs	r2, r1
 8006f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00a      	beq.n	8006f28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	430a      	orrs	r2, r1
 8006f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2c:	f003 0302 	and.w	r3, r3, #2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00a      	beq.n	8006f4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f4e:	f003 0304 	and.w	r3, r3, #4
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00a      	beq.n	8006f6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f70:	f003 0310 	and.w	r3, r3, #16
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00a      	beq.n	8006f8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f92:	f003 0320 	and.w	r3, r3, #32
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00a      	beq.n	8006fb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	430a      	orrs	r2, r1
 8006fae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d01a      	beq.n	8006ff2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fda:	d10a      	bne.n	8006ff2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	430a      	orrs	r2, r1
 8006ff0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00a      	beq.n	8007014 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	430a      	orrs	r2, r1
 8007012:	605a      	str	r2, [r3, #4]
  }
}
 8007014:	bf00      	nop
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b098      	sub	sp, #96	@ 0x60
 8007024:	af02      	add	r7, sp, #8
 8007026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007030:	f7fa fd78 	bl	8001b24 <HAL_GetTick>
 8007034:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0308 	and.w	r3, r3, #8
 8007040:	2b08      	cmp	r3, #8
 8007042:	d12e      	bne.n	80070a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007044:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800704c:	2200      	movs	r2, #0
 800704e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f88c 	bl	8007170 <UART_WaitOnFlagUntilTimeout>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d021      	beq.n	80070a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007066:	e853 3f00 	ldrex	r3, [r3]
 800706a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800706c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800706e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007072:	653b      	str	r3, [r7, #80]	@ 0x50
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	461a      	mov	r2, r3
 800707a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800707c:	647b      	str	r3, [r7, #68]	@ 0x44
 800707e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007080:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007082:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007084:	e841 2300 	strex	r3, r2, [r1]
 8007088:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800708a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1e6      	bne.n	800705e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2220      	movs	r2, #32
 8007094:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e062      	b.n	8007168 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0304 	and.w	r3, r3, #4
 80070ac:	2b04      	cmp	r3, #4
 80070ae:	d149      	bne.n	8007144 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070b8:	2200      	movs	r2, #0
 80070ba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f856 	bl	8007170 <UART_WaitOnFlagUntilTimeout>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d03c      	beq.n	8007144 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d2:	e853 3f00 	ldrex	r3, [r3]
 80070d6:	623b      	str	r3, [r7, #32]
   return(result);
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	461a      	mov	r2, r3
 80070e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80070ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070f0:	e841 2300 	strex	r3, r2, [r1]
 80070f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1e6      	bne.n	80070ca <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	3308      	adds	r3, #8
 8007102:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	e853 3f00 	ldrex	r3, [r3]
 800710a:	60fb      	str	r3, [r7, #12]
   return(result);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f023 0301 	bic.w	r3, r3, #1
 8007112:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	3308      	adds	r3, #8
 800711a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800711c:	61fa      	str	r2, [r7, #28]
 800711e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007120:	69b9      	ldr	r1, [r7, #24]
 8007122:	69fa      	ldr	r2, [r7, #28]
 8007124:	e841 2300 	strex	r3, r2, [r1]
 8007128:	617b      	str	r3, [r7, #20]
   return(result);
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1e5      	bne.n	80070fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2220      	movs	r2, #32
 8007134:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e011      	b.n	8007168 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2220      	movs	r2, #32
 8007148:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2220      	movs	r2, #32
 800714e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3758      	adds	r7, #88	@ 0x58
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	603b      	str	r3, [r7, #0]
 800717c:	4613      	mov	r3, r2
 800717e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007180:	e04f      	b.n	8007222 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007188:	d04b      	beq.n	8007222 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800718a:	f7fa fccb 	bl	8001b24 <HAL_GetTick>
 800718e:	4602      	mov	r2, r0
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	69ba      	ldr	r2, [r7, #24]
 8007196:	429a      	cmp	r2, r3
 8007198:	d302      	bcc.n	80071a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d101      	bne.n	80071a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e04e      	b.n	8007242 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0304 	and.w	r3, r3, #4
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d037      	beq.n	8007222 <UART_WaitOnFlagUntilTimeout+0xb2>
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	2b80      	cmp	r3, #128	@ 0x80
 80071b6:	d034      	beq.n	8007222 <UART_WaitOnFlagUntilTimeout+0xb2>
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	2b40      	cmp	r3, #64	@ 0x40
 80071bc:	d031      	beq.n	8007222 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	f003 0308 	and.w	r3, r3, #8
 80071c8:	2b08      	cmp	r3, #8
 80071ca:	d110      	bne.n	80071ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2208      	movs	r2, #8
 80071d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f000 f838 	bl	800724a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2208      	movs	r2, #8
 80071de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e029      	b.n	8007242 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	69db      	ldr	r3, [r3, #28]
 80071f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071fc:	d111      	bne.n	8007222 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007206:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 f81e 	bl	800724a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2220      	movs	r2, #32
 8007212:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e00f      	b.n	8007242 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	69da      	ldr	r2, [r3, #28]
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	4013      	ands	r3, r2
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	429a      	cmp	r2, r3
 8007230:	bf0c      	ite	eq
 8007232:	2301      	moveq	r3, #1
 8007234:	2300      	movne	r3, #0
 8007236:	b2db      	uxtb	r3, r3
 8007238:	461a      	mov	r2, r3
 800723a:	79fb      	ldrb	r3, [r7, #7]
 800723c:	429a      	cmp	r2, r3
 800723e:	d0a0      	beq.n	8007182 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800724a:	b480      	push	{r7}
 800724c:	b095      	sub	sp, #84	@ 0x54
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800725a:	e853 3f00 	ldrex	r3, [r3]
 800725e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007262:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007266:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	461a      	mov	r2, r3
 800726e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007270:	643b      	str	r3, [r7, #64]	@ 0x40
 8007272:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007274:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007276:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007278:	e841 2300 	strex	r3, r2, [r1]
 800727c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800727e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007280:	2b00      	cmp	r3, #0
 8007282:	d1e6      	bne.n	8007252 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	3308      	adds	r3, #8
 800728a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728c:	6a3b      	ldr	r3, [r7, #32]
 800728e:	e853 3f00 	ldrex	r3, [r3]
 8007292:	61fb      	str	r3, [r7, #28]
   return(result);
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	f023 0301 	bic.w	r3, r3, #1
 800729a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	3308      	adds	r3, #8
 80072a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80072a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072ac:	e841 2300 	strex	r3, r2, [r1]
 80072b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1e5      	bne.n	8007284 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d118      	bne.n	80072f2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	e853 3f00 	ldrex	r3, [r3]
 80072cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	f023 0310 	bic.w	r3, r3, #16
 80072d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	461a      	mov	r2, r3
 80072dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072de:	61bb      	str	r3, [r7, #24]
 80072e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e2:	6979      	ldr	r1, [r7, #20]
 80072e4:	69ba      	ldr	r2, [r7, #24]
 80072e6:	e841 2300 	strex	r3, r2, [r1]
 80072ea:	613b      	str	r3, [r7, #16]
   return(result);
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1e6      	bne.n	80072c0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2220      	movs	r2, #32
 80072f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007306:	bf00      	nop
 8007308:	3754      	adds	r7, #84	@ 0x54
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b084      	sub	sp, #16
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800731e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f7ff fb05 	bl	8006940 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007336:	bf00      	nop
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b088      	sub	sp, #32
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	e853 3f00 	ldrex	r3, [r3]
 8007352:	60bb      	str	r3, [r7, #8]
   return(result);
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800735a:	61fb      	str	r3, [r7, #28]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	461a      	mov	r2, r3
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	61bb      	str	r3, [r7, #24]
 8007366:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007368:	6979      	ldr	r1, [r7, #20]
 800736a:	69ba      	ldr	r2, [r7, #24]
 800736c:	e841 2300 	strex	r3, r2, [r1]
 8007370:	613b      	str	r3, [r7, #16]
   return(result);
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1e6      	bne.n	8007346 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2220      	movs	r2, #32
 800737c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f7ff fad1 	bl	800692c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800738a:	bf00      	nop
 800738c:	3720      	adds	r7, #32
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007392:	b480      	push	{r7}
 8007394:	b083      	sub	sp, #12
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800739a:	bf00      	nop
 800739c:	370c      	adds	r7, #12
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
	...

080073a8 <malloc>:
 80073a8:	4b02      	ldr	r3, [pc, #8]	@ (80073b4 <malloc+0xc>)
 80073aa:	4601      	mov	r1, r0
 80073ac:	6818      	ldr	r0, [r3, #0]
 80073ae:	f000 b82d 	b.w	800740c <_malloc_r>
 80073b2:	bf00      	nop
 80073b4:	2000002c 	.word	0x2000002c

080073b8 <free>:
 80073b8:	4b02      	ldr	r3, [pc, #8]	@ (80073c4 <free+0xc>)
 80073ba:	4601      	mov	r1, r0
 80073bc:	6818      	ldr	r0, [r3, #0]
 80073be:	f000 b905 	b.w	80075cc <_free_r>
 80073c2:	bf00      	nop
 80073c4:	2000002c 	.word	0x2000002c

080073c8 <sbrk_aligned>:
 80073c8:	b570      	push	{r4, r5, r6, lr}
 80073ca:	4e0f      	ldr	r6, [pc, #60]	@ (8007408 <sbrk_aligned+0x40>)
 80073cc:	460c      	mov	r4, r1
 80073ce:	6831      	ldr	r1, [r6, #0]
 80073d0:	4605      	mov	r5, r0
 80073d2:	b911      	cbnz	r1, 80073da <sbrk_aligned+0x12>
 80073d4:	f000 f8be 	bl	8007554 <_sbrk_r>
 80073d8:	6030      	str	r0, [r6, #0]
 80073da:	4621      	mov	r1, r4
 80073dc:	4628      	mov	r0, r5
 80073de:	f000 f8b9 	bl	8007554 <_sbrk_r>
 80073e2:	1c43      	adds	r3, r0, #1
 80073e4:	d103      	bne.n	80073ee <sbrk_aligned+0x26>
 80073e6:	f04f 34ff 	mov.w	r4, #4294967295
 80073ea:	4620      	mov	r0, r4
 80073ec:	bd70      	pop	{r4, r5, r6, pc}
 80073ee:	1cc4      	adds	r4, r0, #3
 80073f0:	f024 0403 	bic.w	r4, r4, #3
 80073f4:	42a0      	cmp	r0, r4
 80073f6:	d0f8      	beq.n	80073ea <sbrk_aligned+0x22>
 80073f8:	1a21      	subs	r1, r4, r0
 80073fa:	4628      	mov	r0, r5
 80073fc:	f000 f8aa 	bl	8007554 <_sbrk_r>
 8007400:	3001      	adds	r0, #1
 8007402:	d1f2      	bne.n	80073ea <sbrk_aligned+0x22>
 8007404:	e7ef      	b.n	80073e6 <sbrk_aligned+0x1e>
 8007406:	bf00      	nop
 8007408:	20000320 	.word	0x20000320

0800740c <_malloc_r>:
 800740c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007410:	1ccd      	adds	r5, r1, #3
 8007412:	f025 0503 	bic.w	r5, r5, #3
 8007416:	3508      	adds	r5, #8
 8007418:	2d0c      	cmp	r5, #12
 800741a:	bf38      	it	cc
 800741c:	250c      	movcc	r5, #12
 800741e:	2d00      	cmp	r5, #0
 8007420:	4606      	mov	r6, r0
 8007422:	db01      	blt.n	8007428 <_malloc_r+0x1c>
 8007424:	42a9      	cmp	r1, r5
 8007426:	d904      	bls.n	8007432 <_malloc_r+0x26>
 8007428:	230c      	movs	r3, #12
 800742a:	6033      	str	r3, [r6, #0]
 800742c:	2000      	movs	r0, #0
 800742e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007432:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007508 <_malloc_r+0xfc>
 8007436:	f000 f869 	bl	800750c <__malloc_lock>
 800743a:	f8d8 3000 	ldr.w	r3, [r8]
 800743e:	461c      	mov	r4, r3
 8007440:	bb44      	cbnz	r4, 8007494 <_malloc_r+0x88>
 8007442:	4629      	mov	r1, r5
 8007444:	4630      	mov	r0, r6
 8007446:	f7ff ffbf 	bl	80073c8 <sbrk_aligned>
 800744a:	1c43      	adds	r3, r0, #1
 800744c:	4604      	mov	r4, r0
 800744e:	d158      	bne.n	8007502 <_malloc_r+0xf6>
 8007450:	f8d8 4000 	ldr.w	r4, [r8]
 8007454:	4627      	mov	r7, r4
 8007456:	2f00      	cmp	r7, #0
 8007458:	d143      	bne.n	80074e2 <_malloc_r+0xd6>
 800745a:	2c00      	cmp	r4, #0
 800745c:	d04b      	beq.n	80074f6 <_malloc_r+0xea>
 800745e:	6823      	ldr	r3, [r4, #0]
 8007460:	4639      	mov	r1, r7
 8007462:	4630      	mov	r0, r6
 8007464:	eb04 0903 	add.w	r9, r4, r3
 8007468:	f000 f874 	bl	8007554 <_sbrk_r>
 800746c:	4581      	cmp	r9, r0
 800746e:	d142      	bne.n	80074f6 <_malloc_r+0xea>
 8007470:	6821      	ldr	r1, [r4, #0]
 8007472:	1a6d      	subs	r5, r5, r1
 8007474:	4629      	mov	r1, r5
 8007476:	4630      	mov	r0, r6
 8007478:	f7ff ffa6 	bl	80073c8 <sbrk_aligned>
 800747c:	3001      	adds	r0, #1
 800747e:	d03a      	beq.n	80074f6 <_malloc_r+0xea>
 8007480:	6823      	ldr	r3, [r4, #0]
 8007482:	442b      	add	r3, r5
 8007484:	6023      	str	r3, [r4, #0]
 8007486:	f8d8 3000 	ldr.w	r3, [r8]
 800748a:	685a      	ldr	r2, [r3, #4]
 800748c:	bb62      	cbnz	r2, 80074e8 <_malloc_r+0xdc>
 800748e:	f8c8 7000 	str.w	r7, [r8]
 8007492:	e00f      	b.n	80074b4 <_malloc_r+0xa8>
 8007494:	6822      	ldr	r2, [r4, #0]
 8007496:	1b52      	subs	r2, r2, r5
 8007498:	d420      	bmi.n	80074dc <_malloc_r+0xd0>
 800749a:	2a0b      	cmp	r2, #11
 800749c:	d917      	bls.n	80074ce <_malloc_r+0xc2>
 800749e:	1961      	adds	r1, r4, r5
 80074a0:	42a3      	cmp	r3, r4
 80074a2:	6025      	str	r5, [r4, #0]
 80074a4:	bf18      	it	ne
 80074a6:	6059      	strne	r1, [r3, #4]
 80074a8:	6863      	ldr	r3, [r4, #4]
 80074aa:	bf08      	it	eq
 80074ac:	f8c8 1000 	streq.w	r1, [r8]
 80074b0:	5162      	str	r2, [r4, r5]
 80074b2:	604b      	str	r3, [r1, #4]
 80074b4:	4630      	mov	r0, r6
 80074b6:	f000 f82f 	bl	8007518 <__malloc_unlock>
 80074ba:	f104 000b 	add.w	r0, r4, #11
 80074be:	1d23      	adds	r3, r4, #4
 80074c0:	f020 0007 	bic.w	r0, r0, #7
 80074c4:	1ac2      	subs	r2, r0, r3
 80074c6:	bf1c      	itt	ne
 80074c8:	1a1b      	subne	r3, r3, r0
 80074ca:	50a3      	strne	r3, [r4, r2]
 80074cc:	e7af      	b.n	800742e <_malloc_r+0x22>
 80074ce:	6862      	ldr	r2, [r4, #4]
 80074d0:	42a3      	cmp	r3, r4
 80074d2:	bf0c      	ite	eq
 80074d4:	f8c8 2000 	streq.w	r2, [r8]
 80074d8:	605a      	strne	r2, [r3, #4]
 80074da:	e7eb      	b.n	80074b4 <_malloc_r+0xa8>
 80074dc:	4623      	mov	r3, r4
 80074de:	6864      	ldr	r4, [r4, #4]
 80074e0:	e7ae      	b.n	8007440 <_malloc_r+0x34>
 80074e2:	463c      	mov	r4, r7
 80074e4:	687f      	ldr	r7, [r7, #4]
 80074e6:	e7b6      	b.n	8007456 <_malloc_r+0x4a>
 80074e8:	461a      	mov	r2, r3
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	42a3      	cmp	r3, r4
 80074ee:	d1fb      	bne.n	80074e8 <_malloc_r+0xdc>
 80074f0:	2300      	movs	r3, #0
 80074f2:	6053      	str	r3, [r2, #4]
 80074f4:	e7de      	b.n	80074b4 <_malloc_r+0xa8>
 80074f6:	230c      	movs	r3, #12
 80074f8:	6033      	str	r3, [r6, #0]
 80074fa:	4630      	mov	r0, r6
 80074fc:	f000 f80c 	bl	8007518 <__malloc_unlock>
 8007500:	e794      	b.n	800742c <_malloc_r+0x20>
 8007502:	6005      	str	r5, [r0, #0]
 8007504:	e7d6      	b.n	80074b4 <_malloc_r+0xa8>
 8007506:	bf00      	nop
 8007508:	20000324 	.word	0x20000324

0800750c <__malloc_lock>:
 800750c:	4801      	ldr	r0, [pc, #4]	@ (8007514 <__malloc_lock+0x8>)
 800750e:	f000 b85b 	b.w	80075c8 <__retarget_lock_acquire_recursive>
 8007512:	bf00      	nop
 8007514:	20000464 	.word	0x20000464

08007518 <__malloc_unlock>:
 8007518:	4801      	ldr	r0, [pc, #4]	@ (8007520 <__malloc_unlock+0x8>)
 800751a:	f000 b856 	b.w	80075ca <__retarget_lock_release_recursive>
 800751e:	bf00      	nop
 8007520:	20000464 	.word	0x20000464

08007524 <memcmp>:
 8007524:	b510      	push	{r4, lr}
 8007526:	3901      	subs	r1, #1
 8007528:	4402      	add	r2, r0
 800752a:	4290      	cmp	r0, r2
 800752c:	d101      	bne.n	8007532 <memcmp+0xe>
 800752e:	2000      	movs	r0, #0
 8007530:	e005      	b.n	800753e <memcmp+0x1a>
 8007532:	7803      	ldrb	r3, [r0, #0]
 8007534:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007538:	42a3      	cmp	r3, r4
 800753a:	d001      	beq.n	8007540 <memcmp+0x1c>
 800753c:	1b18      	subs	r0, r3, r4
 800753e:	bd10      	pop	{r4, pc}
 8007540:	3001      	adds	r0, #1
 8007542:	e7f2      	b.n	800752a <memcmp+0x6>

08007544 <memset>:
 8007544:	4402      	add	r2, r0
 8007546:	4603      	mov	r3, r0
 8007548:	4293      	cmp	r3, r2
 800754a:	d100      	bne.n	800754e <memset+0xa>
 800754c:	4770      	bx	lr
 800754e:	f803 1b01 	strb.w	r1, [r3], #1
 8007552:	e7f9      	b.n	8007548 <memset+0x4>

08007554 <_sbrk_r>:
 8007554:	b538      	push	{r3, r4, r5, lr}
 8007556:	4d06      	ldr	r5, [pc, #24]	@ (8007570 <_sbrk_r+0x1c>)
 8007558:	2300      	movs	r3, #0
 800755a:	4604      	mov	r4, r0
 800755c:	4608      	mov	r0, r1
 800755e:	602b      	str	r3, [r5, #0]
 8007560:	f7fa fa06 	bl	8001970 <_sbrk>
 8007564:	1c43      	adds	r3, r0, #1
 8007566:	d102      	bne.n	800756e <_sbrk_r+0x1a>
 8007568:	682b      	ldr	r3, [r5, #0]
 800756a:	b103      	cbz	r3, 800756e <_sbrk_r+0x1a>
 800756c:	6023      	str	r3, [r4, #0]
 800756e:	bd38      	pop	{r3, r4, r5, pc}
 8007570:	20000460 	.word	0x20000460

08007574 <__errno>:
 8007574:	4b01      	ldr	r3, [pc, #4]	@ (800757c <__errno+0x8>)
 8007576:	6818      	ldr	r0, [r3, #0]
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	2000002c 	.word	0x2000002c

08007580 <__libc_init_array>:
 8007580:	b570      	push	{r4, r5, r6, lr}
 8007582:	4d0d      	ldr	r5, [pc, #52]	@ (80075b8 <__libc_init_array+0x38>)
 8007584:	4c0d      	ldr	r4, [pc, #52]	@ (80075bc <__libc_init_array+0x3c>)
 8007586:	1b64      	subs	r4, r4, r5
 8007588:	10a4      	asrs	r4, r4, #2
 800758a:	2600      	movs	r6, #0
 800758c:	42a6      	cmp	r6, r4
 800758e:	d109      	bne.n	80075a4 <__libc_init_array+0x24>
 8007590:	4d0b      	ldr	r5, [pc, #44]	@ (80075c0 <__libc_init_array+0x40>)
 8007592:	4c0c      	ldr	r4, [pc, #48]	@ (80075c4 <__libc_init_array+0x44>)
 8007594:	f000 f864 	bl	8007660 <_init>
 8007598:	1b64      	subs	r4, r4, r5
 800759a:	10a4      	asrs	r4, r4, #2
 800759c:	2600      	movs	r6, #0
 800759e:	42a6      	cmp	r6, r4
 80075a0:	d105      	bne.n	80075ae <__libc_init_array+0x2e>
 80075a2:	bd70      	pop	{r4, r5, r6, pc}
 80075a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80075a8:	4798      	blx	r3
 80075aa:	3601      	adds	r6, #1
 80075ac:	e7ee      	b.n	800758c <__libc_init_array+0xc>
 80075ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80075b2:	4798      	blx	r3
 80075b4:	3601      	adds	r6, #1
 80075b6:	e7f2      	b.n	800759e <__libc_init_array+0x1e>
 80075b8:	08008528 	.word	0x08008528
 80075bc:	08008528 	.word	0x08008528
 80075c0:	08008528 	.word	0x08008528
 80075c4:	0800852c 	.word	0x0800852c

080075c8 <__retarget_lock_acquire_recursive>:
 80075c8:	4770      	bx	lr

080075ca <__retarget_lock_release_recursive>:
 80075ca:	4770      	bx	lr

080075cc <_free_r>:
 80075cc:	b538      	push	{r3, r4, r5, lr}
 80075ce:	4605      	mov	r5, r0
 80075d0:	2900      	cmp	r1, #0
 80075d2:	d041      	beq.n	8007658 <_free_r+0x8c>
 80075d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075d8:	1f0c      	subs	r4, r1, #4
 80075da:	2b00      	cmp	r3, #0
 80075dc:	bfb8      	it	lt
 80075de:	18e4      	addlt	r4, r4, r3
 80075e0:	f7ff ff94 	bl	800750c <__malloc_lock>
 80075e4:	4a1d      	ldr	r2, [pc, #116]	@ (800765c <_free_r+0x90>)
 80075e6:	6813      	ldr	r3, [r2, #0]
 80075e8:	b933      	cbnz	r3, 80075f8 <_free_r+0x2c>
 80075ea:	6063      	str	r3, [r4, #4]
 80075ec:	6014      	str	r4, [r2, #0]
 80075ee:	4628      	mov	r0, r5
 80075f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075f4:	f7ff bf90 	b.w	8007518 <__malloc_unlock>
 80075f8:	42a3      	cmp	r3, r4
 80075fa:	d908      	bls.n	800760e <_free_r+0x42>
 80075fc:	6820      	ldr	r0, [r4, #0]
 80075fe:	1821      	adds	r1, r4, r0
 8007600:	428b      	cmp	r3, r1
 8007602:	bf01      	itttt	eq
 8007604:	6819      	ldreq	r1, [r3, #0]
 8007606:	685b      	ldreq	r3, [r3, #4]
 8007608:	1809      	addeq	r1, r1, r0
 800760a:	6021      	streq	r1, [r4, #0]
 800760c:	e7ed      	b.n	80075ea <_free_r+0x1e>
 800760e:	461a      	mov	r2, r3
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	b10b      	cbz	r3, 8007618 <_free_r+0x4c>
 8007614:	42a3      	cmp	r3, r4
 8007616:	d9fa      	bls.n	800760e <_free_r+0x42>
 8007618:	6811      	ldr	r1, [r2, #0]
 800761a:	1850      	adds	r0, r2, r1
 800761c:	42a0      	cmp	r0, r4
 800761e:	d10b      	bne.n	8007638 <_free_r+0x6c>
 8007620:	6820      	ldr	r0, [r4, #0]
 8007622:	4401      	add	r1, r0
 8007624:	1850      	adds	r0, r2, r1
 8007626:	4283      	cmp	r3, r0
 8007628:	6011      	str	r1, [r2, #0]
 800762a:	d1e0      	bne.n	80075ee <_free_r+0x22>
 800762c:	6818      	ldr	r0, [r3, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	6053      	str	r3, [r2, #4]
 8007632:	4408      	add	r0, r1
 8007634:	6010      	str	r0, [r2, #0]
 8007636:	e7da      	b.n	80075ee <_free_r+0x22>
 8007638:	d902      	bls.n	8007640 <_free_r+0x74>
 800763a:	230c      	movs	r3, #12
 800763c:	602b      	str	r3, [r5, #0]
 800763e:	e7d6      	b.n	80075ee <_free_r+0x22>
 8007640:	6820      	ldr	r0, [r4, #0]
 8007642:	1821      	adds	r1, r4, r0
 8007644:	428b      	cmp	r3, r1
 8007646:	bf04      	itt	eq
 8007648:	6819      	ldreq	r1, [r3, #0]
 800764a:	685b      	ldreq	r3, [r3, #4]
 800764c:	6063      	str	r3, [r4, #4]
 800764e:	bf04      	itt	eq
 8007650:	1809      	addeq	r1, r1, r0
 8007652:	6021      	streq	r1, [r4, #0]
 8007654:	6054      	str	r4, [r2, #4]
 8007656:	e7ca      	b.n	80075ee <_free_r+0x22>
 8007658:	bd38      	pop	{r3, r4, r5, pc}
 800765a:	bf00      	nop
 800765c:	20000324 	.word	0x20000324

08007660 <_init>:
 8007660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007662:	bf00      	nop
 8007664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007666:	bc08      	pop	{r3}
 8007668:	469e      	mov	lr, r3
 800766a:	4770      	bx	lr

0800766c <_fini>:
 800766c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800766e:	bf00      	nop
 8007670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007672:	bc08      	pop	{r3}
 8007674:	469e      	mov	lr, r3
 8007676:	4770      	bx	lr
