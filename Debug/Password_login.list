
Password_login.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e28  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ea8  08008fd4  08008fd4  00009fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e7c  08009e7c  0000b08c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009e7c  08009e7c  0000ae7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e84  08009e84  0000b08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e84  08009e84  0000ae84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e88  08009e88  0000ae88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08009e8c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  20000090  08009f18  0000b090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  08009f18  0000b440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017255  00000000  00000000  0000b0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003093  00000000  00000000  00022311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  000253a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001040  00000000  00000000  00026890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b13a  00000000  00000000  000278d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d27  00000000  00000000  00052a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001073c8  00000000  00000000  0006b731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00172af9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ba4  00000000  00000000  00172b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001786e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000090 	.word	0x20000090
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008fbc 	.word	0x08008fbc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000094 	.word	0x20000094
 80001e8:	08008fbc 	.word	0x08008fbc

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <drawPixel>:
extern uint8_t _xstart;
extern uint8_t _ystart;
extern uint8_t spi_ready;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	80fb      	strh	r3, [r7, #6]
 8000522:	460b      	mov	r3, r1
 8000524:	80bb      	strh	r3, [r7, #4]
 8000526:	4613      	mov	r3, r2
 8000528:	807b      	strh	r3, [r7, #2]
	ST7735_DrawPixel(x, y, color);
 800052a:	88fb      	ldrh	r3, [r7, #6]
 800052c:	88b9      	ldrh	r1, [r7, #4]
 800052e:	887a      	ldrh	r2, [r7, #2]
 8000530:	4618      	mov	r0, r3
 8000532:	f001 fe6f 	bl	8002214 <ST7735_DrawPixel>
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000540:	b590      	push	{r4, r7, lr}
 8000542:	b085      	sub	sp, #20
 8000544:	af02      	add	r7, sp, #8
 8000546:	4604      	mov	r4, r0
 8000548:	4608      	mov	r0, r1
 800054a:	4611      	mov	r1, r2
 800054c:	461a      	mov	r2, r3
 800054e:	4623      	mov	r3, r4
 8000550:	80fb      	strh	r3, [r7, #6]
 8000552:	4603      	mov	r3, r0
 8000554:	80bb      	strh	r3, [r7, #4]
 8000556:	460b      	mov	r3, r1
 8000558:	807b      	strh	r3, [r7, #2]
 800055a:	4613      	mov	r3, r2
 800055c:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 800055e:	88f8      	ldrh	r0, [r7, #6]
 8000560:	88b9      	ldrh	r1, [r7, #4]
 8000562:	887a      	ldrh	r2, [r7, #2]
 8000564:	883c      	ldrh	r4, [r7, #0]
 8000566:	8b3b      	ldrh	r3, [r7, #24]
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	4623      	mov	r3, r4
 800056c:	f001 ff76 	bl	800245c <ST7735_FillRectangle>
	while (!spi_ready ){};
 8000570:	bf00      	nop
 8000572:	4b04      	ldr	r3, [pc, #16]	@ (8000584 <fillRect+0x44>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d0fb      	beq.n	8000572 <fillRect+0x32>


}
 800057a:	bf00      	nop
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	bd90      	pop	{r4, r7, pc}
 8000584:	20000000 	.word	0x20000000

08000588 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	80fb      	strh	r3, [r7, #6]
 8000592:	460b      	mov	r3, r1
 8000594:	80bb      	strh	r3, [r7, #4]
 8000596:	4613      	mov	r3, r2
 8000598:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 800059a:	887a      	ldrh	r2, [r7, #2]
 800059c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80005a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff ffb7 	bl	8000518 <drawPixel>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80005b2:	b590      	push	{r4, r7, lr}
 80005b4:	b089      	sub	sp, #36	@ 0x24
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	4604      	mov	r4, r0
 80005ba:	4608      	mov	r0, r1
 80005bc:	4611      	mov	r1, r2
 80005be:	461a      	mov	r2, r3
 80005c0:	4623      	mov	r3, r4
 80005c2:	80fb      	strh	r3, [r7, #6]
 80005c4:	4603      	mov	r3, r0
 80005c6:	80bb      	strh	r3, [r7, #4]
 80005c8:	460b      	mov	r3, r1
 80005ca:	807b      	strh	r3, [r7, #2]
 80005cc:	4613      	mov	r3, r2
 80005ce:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80005d0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80005d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80005de:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80005e2:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80005e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005ea:	1acb      	subs	r3, r1, r3
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	bfb8      	it	lt
 80005f0:	425b      	neglt	r3, r3
 80005f2:	429a      	cmp	r2, r3
 80005f4:	bfcc      	ite	gt
 80005f6:	2301      	movgt	r3, #1
 80005f8:	2300      	movle	r3, #0
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	837b      	strh	r3, [r7, #26]
    if (steep) {
 80005fe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d00b      	beq.n	800061e <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	833b      	strh	r3, [r7, #24]
 800060a:	88bb      	ldrh	r3, [r7, #4]
 800060c:	80fb      	strh	r3, [r7, #6]
 800060e:	8b3b      	ldrh	r3, [r7, #24]
 8000610:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8000612:	887b      	ldrh	r3, [r7, #2]
 8000614:	82fb      	strh	r3, [r7, #22]
 8000616:	883b      	ldrh	r3, [r7, #0]
 8000618:	807b      	strh	r3, [r7, #2]
 800061a:	8afb      	ldrh	r3, [r7, #22]
 800061c:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 800061e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000622:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000626:	429a      	cmp	r2, r3
 8000628:	dd0b      	ble.n	8000642 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	82bb      	strh	r3, [r7, #20]
 800062e:	887b      	ldrh	r3, [r7, #2]
 8000630:	80fb      	strh	r3, [r7, #6]
 8000632:	8abb      	ldrh	r3, [r7, #20]
 8000634:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8000636:	88bb      	ldrh	r3, [r7, #4]
 8000638:	827b      	strh	r3, [r7, #18]
 800063a:	883b      	ldrh	r3, [r7, #0]
 800063c:	80bb      	strh	r3, [r7, #4]
 800063e:	8a7b      	ldrh	r3, [r7, #18]
 8000640:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8000642:	887a      	ldrh	r2, [r7, #2]
 8000644:	88fb      	ldrh	r3, [r7, #6]
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	b29b      	uxth	r3, r3
 800064a:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 800064c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000650:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	2b00      	cmp	r3, #0
 8000658:	bfb8      	it	lt
 800065a:	425b      	neglt	r3, r3
 800065c:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 800065e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000662:	0fda      	lsrs	r2, r3, #31
 8000664:	4413      	add	r3, r2
 8000666:	105b      	asrs	r3, r3, #1
 8000668:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 800066a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800066e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000672:	429a      	cmp	r2, r3
 8000674:	da02      	bge.n	800067c <writeLine+0xca>
        ystep = 1;
 8000676:	2301      	movs	r3, #1
 8000678:	83bb      	strh	r3, [r7, #28]
 800067a:	e031      	b.n	80006e0 <writeLine+0x12e>
    } else {
        ystep = -1;
 800067c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000680:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 8000682:	e02d      	b.n	80006e0 <writeLine+0x12e>
        if (steep) {
 8000684:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d008      	beq.n	800069e <writeLine+0xec>
            writePixel(y0, x0, color);
 800068c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800068e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000692:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff76 	bl	8000588 <writePixel>
 800069c:	e007      	b.n	80006ae <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 800069e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80006a0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80006a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ff6d 	bl	8000588 <writePixel>
        }
        err -= dy;
 80006ae:	8bfa      	ldrh	r2, [r7, #30]
 80006b0:	89fb      	ldrh	r3, [r7, #14]
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 80006b8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	da09      	bge.n	80006d4 <writeLine+0x122>
            y0 += ystep;
 80006c0:	88ba      	ldrh	r2, [r7, #4]
 80006c2:	8bbb      	ldrh	r3, [r7, #28]
 80006c4:	4413      	add	r3, r2
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	80bb      	strh	r3, [r7, #4]
            err += dx;
 80006ca:	8bfa      	ldrh	r2, [r7, #30]
 80006cc:	8a3b      	ldrh	r3, [r7, #16]
 80006ce:	4413      	add	r3, r2
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 80006d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006d8:	b29b      	uxth	r3, r3
 80006da:	3301      	adds	r3, #1
 80006dc:	b29b      	uxth	r3, r3
 80006de:	80fb      	strh	r3, [r7, #6]
 80006e0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80006e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	ddcb      	ble.n	8000684 <writeLine+0xd2>
        }
    }
}
 80006ec:	bf00      	nop
 80006ee:	bf00      	nop
 80006f0:	3724      	adds	r7, #36	@ 0x24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd90      	pop	{r4, r7, pc}

080006f6 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80006f6:	b590      	push	{r4, r7, lr}
 80006f8:	b085      	sub	sp, #20
 80006fa:	af02      	add	r7, sp, #8
 80006fc:	4604      	mov	r4, r0
 80006fe:	4608      	mov	r0, r1
 8000700:	4611      	mov	r1, r2
 8000702:	461a      	mov	r2, r3
 8000704:	4623      	mov	r3, r4
 8000706:	80fb      	strh	r3, [r7, #6]
 8000708:	4603      	mov	r3, r0
 800070a:	80bb      	strh	r3, [r7, #4]
 800070c:	460b      	mov	r3, r1
 800070e:	807b      	strh	r3, [r7, #2]
 8000710:	4613      	mov	r3, r2
 8000712:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x, y + h - 1, color);
 8000714:	88ba      	ldrh	r2, [r7, #4]
 8000716:	887b      	ldrh	r3, [r7, #2]
 8000718:	4413      	add	r3, r2
 800071a:	b29b      	uxth	r3, r3
 800071c:	3b01      	subs	r3, #1
 800071e:	b29b      	uxth	r3, r3
 8000720:	b21c      	sxth	r4, r3
 8000722:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000726:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800072a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800072e:	883b      	ldrh	r3, [r7, #0]
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	4623      	mov	r3, r4
 8000734:	f7ff ff3d 	bl	80005b2 <writeLine>
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	bd90      	pop	{r4, r7, pc}

08000740 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b085      	sub	sp, #20
 8000744:	af02      	add	r7, sp, #8
 8000746:	4604      	mov	r4, r0
 8000748:	4608      	mov	r0, r1
 800074a:	4611      	mov	r1, r2
 800074c:	461a      	mov	r2, r3
 800074e:	4623      	mov	r3, r4
 8000750:	80fb      	strh	r3, [r7, #6]
 8000752:	4603      	mov	r3, r0
 8000754:	80bb      	strh	r3, [r7, #4]
 8000756:	460b      	mov	r3, r1
 8000758:	807b      	strh	r3, [r7, #2]
 800075a:	4613      	mov	r3, r2
 800075c:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x + w - 1, y, color);
 800075e:	88fa      	ldrh	r2, [r7, #6]
 8000760:	887b      	ldrh	r3, [r7, #2]
 8000762:	4413      	add	r3, r2
 8000764:	b29b      	uxth	r3, r3
 8000766:	3b01      	subs	r3, #1
 8000768:	b29b      	uxth	r3, r3
 800076a:	b21a      	sxth	r2, r3
 800076c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000770:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000774:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000778:	883b      	ldrh	r3, [r7, #0]
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	4623      	mov	r3, r4
 800077e:	f7ff ff18 	bl	80005b2 <writeLine>
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	bd90      	pop	{r4, r7, pc}

0800078a <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800078a:	b590      	push	{r4, r7, lr}
 800078c:	b087      	sub	sp, #28
 800078e:	af02      	add	r7, sp, #8
 8000790:	4604      	mov	r4, r0
 8000792:	4608      	mov	r0, r1
 8000794:	4611      	mov	r1, r2
 8000796:	461a      	mov	r2, r3
 8000798:	4623      	mov	r3, r4
 800079a:	80fb      	strh	r3, [r7, #6]
 800079c:	4603      	mov	r3, r0
 800079e:	80bb      	strh	r3, [r7, #4]
 80007a0:	460b      	mov	r3, r1
 80007a2:	807b      	strh	r3, [r7, #2]
 80007a4:	4613      	mov	r3, r2
 80007a6:	803b      	strh	r3, [r7, #0]
    if(x0 == x1){
 80007a8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80007ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d11a      	bne.n	80007ea <drawLine+0x60>
        if(y0 > y1) _swap_int16_t(y0, y1);
 80007b4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80007b8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80007bc:	429a      	cmp	r2, r3
 80007be:	dd05      	ble.n	80007cc <drawLine+0x42>
 80007c0:	88bb      	ldrh	r3, [r7, #4]
 80007c2:	81bb      	strh	r3, [r7, #12]
 80007c4:	883b      	ldrh	r3, [r7, #0]
 80007c6:	80bb      	strh	r3, [r7, #4]
 80007c8:	89bb      	ldrh	r3, [r7, #12]
 80007ca:	803b      	strh	r3, [r7, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 80007cc:	883a      	ldrh	r2, [r7, #0]
 80007ce:	88bb      	ldrh	r3, [r7, #4]
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	3301      	adds	r3, #1
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	b21a      	sxth	r2, r3
 80007da:	8c3b      	ldrh	r3, [r7, #32]
 80007dc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80007e0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80007e4:	f7ff ff87 	bl	80006f6 <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 80007e8:	e02d      	b.n	8000846 <drawLine+0xbc>
    } else if(y0 == y1){
 80007ea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80007ee:	f9b7 3000 	ldrsh.w	r3, [r7]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d11a      	bne.n	800082c <drawLine+0xa2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 80007f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80007fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007fe:	429a      	cmp	r2, r3
 8000800:	dd05      	ble.n	800080e <drawLine+0x84>
 8000802:	88fb      	ldrh	r3, [r7, #6]
 8000804:	81fb      	strh	r3, [r7, #14]
 8000806:	887b      	ldrh	r3, [r7, #2]
 8000808:	80fb      	strh	r3, [r7, #6]
 800080a:	89fb      	ldrh	r3, [r7, #14]
 800080c:	807b      	strh	r3, [r7, #2]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 800080e:	887a      	ldrh	r2, [r7, #2]
 8000810:	88fb      	ldrh	r3, [r7, #6]
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	b29b      	uxth	r3, r3
 8000816:	3301      	adds	r3, #1
 8000818:	b29b      	uxth	r3, r3
 800081a:	b21a      	sxth	r2, r3
 800081c:	8c3b      	ldrh	r3, [r7, #32]
 800081e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000822:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000826:	f7ff ff8b 	bl	8000740 <drawFastHLine>
}
 800082a:	e00c      	b.n	8000846 <drawLine+0xbc>
        writeLine(x0, y0, x1, y1, color);
 800082c:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000830:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000834:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000838:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800083c:	8c3b      	ldrh	r3, [r7, #32]
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	4623      	mov	r3, r4
 8000842:	f7ff feb6 	bl	80005b2 <writeLine>
}
 8000846:	bf00      	nop
 8000848:	3714      	adds	r7, #20
 800084a:	46bd      	mov	sp, r7
 800084c:	bd90      	pop	{r4, r7, pc}

0800084e <drawCircle>:

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 800084e:	b590      	push	{r4, r7, lr}
 8000850:	b087      	sub	sp, #28
 8000852:	af00      	add	r7, sp, #0
 8000854:	4604      	mov	r4, r0
 8000856:	4608      	mov	r0, r1
 8000858:	4611      	mov	r1, r2
 800085a:	461a      	mov	r2, r3
 800085c:	4623      	mov	r3, r4
 800085e:	80fb      	strh	r3, [r7, #6]
 8000860:	4603      	mov	r3, r0
 8000862:	80bb      	strh	r3, [r7, #4]
 8000864:	460b      	mov	r3, r1
 8000866:	807b      	strh	r3, [r7, #2]
 8000868:	4613      	mov	r3, r2
 800086a:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 800086c:	887b      	ldrh	r3, [r7, #2]
 800086e:	f1c3 0301 	rsb	r3, r3, #1
 8000872:	b29b      	uxth	r3, r3
 8000874:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8000876:	2301      	movs	r3, #1
 8000878:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 800087a:	887b      	ldrh	r3, [r7, #2]
 800087c:	461a      	mov	r2, r3
 800087e:	03d2      	lsls	r2, r2, #15
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	b29b      	uxth	r3, r3
 8000886:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 800088c:	887b      	ldrh	r3, [r7, #2]
 800088e:	81fb      	strh	r3, [r7, #14]

    writePixel(x0  , y0+r, color);
 8000890:	88ba      	ldrh	r2, [r7, #4]
 8000892:	887b      	ldrh	r3, [r7, #2]
 8000894:	4413      	add	r3, r2
 8000896:	b29b      	uxth	r3, r3
 8000898:	b219      	sxth	r1, r3
 800089a:	883a      	ldrh	r2, [r7, #0]
 800089c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fe71 	bl	8000588 <writePixel>
    writePixel(x0  , y0-r, color);
 80008a6:	88ba      	ldrh	r2, [r7, #4]
 80008a8:	887b      	ldrh	r3, [r7, #2]
 80008aa:	1ad3      	subs	r3, r2, r3
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	b219      	sxth	r1, r3
 80008b0:	883a      	ldrh	r2, [r7, #0]
 80008b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fe66 	bl	8000588 <writePixel>
    writePixel(x0+r, y0  , color);
 80008bc:	88fa      	ldrh	r2, [r7, #6]
 80008be:	887b      	ldrh	r3, [r7, #2]
 80008c0:	4413      	add	r3, r2
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	b21b      	sxth	r3, r3
 80008c6:	883a      	ldrh	r2, [r7, #0]
 80008c8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fe5b 	bl	8000588 <writePixel>
    writePixel(x0-r, y0  , color);
 80008d2:	88fa      	ldrh	r2, [r7, #6]
 80008d4:	887b      	ldrh	r3, [r7, #2]
 80008d6:	1ad3      	subs	r3, r2, r3
 80008d8:	b29b      	uxth	r3, r3
 80008da:	b21b      	sxth	r3, r3
 80008dc:	883a      	ldrh	r2, [r7, #0]
 80008de:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fe50 	bl	8000588 <writePixel>

    while (x<y) {
 80008e8:	e091      	b.n	8000a0e <drawCircle+0x1c0>
        if (f >= 0) {
 80008ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	db0e      	blt.n	8000910 <drawCircle+0xc2>
            y--;
 80008f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	3b01      	subs	r3, #1
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80008fe:	8a7b      	ldrh	r3, [r7, #18]
 8000900:	3302      	adds	r3, #2
 8000902:	b29b      	uxth	r3, r3
 8000904:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8000906:	8afa      	ldrh	r2, [r7, #22]
 8000908:	8a7b      	ldrh	r3, [r7, #18]
 800090a:	4413      	add	r3, r2
 800090c:	b29b      	uxth	r3, r3
 800090e:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8000910:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000914:	b29b      	uxth	r3, r3
 8000916:	3301      	adds	r3, #1
 8000918:	b29b      	uxth	r3, r3
 800091a:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800091c:	8abb      	ldrh	r3, [r7, #20]
 800091e:	3302      	adds	r3, #2
 8000920:	b29b      	uxth	r3, r3
 8000922:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8000924:	8afa      	ldrh	r2, [r7, #22]
 8000926:	8abb      	ldrh	r3, [r7, #20]
 8000928:	4413      	add	r3, r2
 800092a:	b29b      	uxth	r3, r3
 800092c:	82fb      	strh	r3, [r7, #22]

        writePixel(x0 + x, y0 + y, color);
 800092e:	88fa      	ldrh	r2, [r7, #6]
 8000930:	8a3b      	ldrh	r3, [r7, #16]
 8000932:	4413      	add	r3, r2
 8000934:	b29b      	uxth	r3, r3
 8000936:	b218      	sxth	r0, r3
 8000938:	88ba      	ldrh	r2, [r7, #4]
 800093a:	89fb      	ldrh	r3, [r7, #14]
 800093c:	4413      	add	r3, r2
 800093e:	b29b      	uxth	r3, r3
 8000940:	b21b      	sxth	r3, r3
 8000942:	883a      	ldrh	r2, [r7, #0]
 8000944:	4619      	mov	r1, r3
 8000946:	f7ff fe1f 	bl	8000588 <writePixel>
        writePixel(x0 - x, y0 + y, color);
 800094a:	88fa      	ldrh	r2, [r7, #6]
 800094c:	8a3b      	ldrh	r3, [r7, #16]
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	b29b      	uxth	r3, r3
 8000952:	b218      	sxth	r0, r3
 8000954:	88ba      	ldrh	r2, [r7, #4]
 8000956:	89fb      	ldrh	r3, [r7, #14]
 8000958:	4413      	add	r3, r2
 800095a:	b29b      	uxth	r3, r3
 800095c:	b21b      	sxth	r3, r3
 800095e:	883a      	ldrh	r2, [r7, #0]
 8000960:	4619      	mov	r1, r3
 8000962:	f7ff fe11 	bl	8000588 <writePixel>
        writePixel(x0 + x, y0 - y, color);
 8000966:	88fa      	ldrh	r2, [r7, #6]
 8000968:	8a3b      	ldrh	r3, [r7, #16]
 800096a:	4413      	add	r3, r2
 800096c:	b29b      	uxth	r3, r3
 800096e:	b218      	sxth	r0, r3
 8000970:	88ba      	ldrh	r2, [r7, #4]
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	b29b      	uxth	r3, r3
 8000978:	b21b      	sxth	r3, r3
 800097a:	883a      	ldrh	r2, [r7, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	f7ff fe03 	bl	8000588 <writePixel>
        writePixel(x0 - x, y0 - y, color);
 8000982:	88fa      	ldrh	r2, [r7, #6]
 8000984:	8a3b      	ldrh	r3, [r7, #16]
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	b29b      	uxth	r3, r3
 800098a:	b218      	sxth	r0, r3
 800098c:	88ba      	ldrh	r2, [r7, #4]
 800098e:	89fb      	ldrh	r3, [r7, #14]
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	b29b      	uxth	r3, r3
 8000994:	b21b      	sxth	r3, r3
 8000996:	883a      	ldrh	r2, [r7, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	f7ff fdf5 	bl	8000588 <writePixel>
        writePixel(x0 + y, y0 + x, color);
 800099e:	88fa      	ldrh	r2, [r7, #6]
 80009a0:	89fb      	ldrh	r3, [r7, #14]
 80009a2:	4413      	add	r3, r2
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	b218      	sxth	r0, r3
 80009a8:	88ba      	ldrh	r2, [r7, #4]
 80009aa:	8a3b      	ldrh	r3, [r7, #16]
 80009ac:	4413      	add	r3, r2
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	b21b      	sxth	r3, r3
 80009b2:	883a      	ldrh	r2, [r7, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	f7ff fde7 	bl	8000588 <writePixel>
        writePixel(x0 - y, y0 + x, color);
 80009ba:	88fa      	ldrh	r2, [r7, #6]
 80009bc:	89fb      	ldrh	r3, [r7, #14]
 80009be:	1ad3      	subs	r3, r2, r3
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	b218      	sxth	r0, r3
 80009c4:	88ba      	ldrh	r2, [r7, #4]
 80009c6:	8a3b      	ldrh	r3, [r7, #16]
 80009c8:	4413      	add	r3, r2
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	b21b      	sxth	r3, r3
 80009ce:	883a      	ldrh	r2, [r7, #0]
 80009d0:	4619      	mov	r1, r3
 80009d2:	f7ff fdd9 	bl	8000588 <writePixel>
        writePixel(x0 + y, y0 - x, color);
 80009d6:	88fa      	ldrh	r2, [r7, #6]
 80009d8:	89fb      	ldrh	r3, [r7, #14]
 80009da:	4413      	add	r3, r2
 80009dc:	b29b      	uxth	r3, r3
 80009de:	b218      	sxth	r0, r3
 80009e0:	88ba      	ldrh	r2, [r7, #4]
 80009e2:	8a3b      	ldrh	r3, [r7, #16]
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	b21b      	sxth	r3, r3
 80009ea:	883a      	ldrh	r2, [r7, #0]
 80009ec:	4619      	mov	r1, r3
 80009ee:	f7ff fdcb 	bl	8000588 <writePixel>
        writePixel(x0 - y, y0 - x, color);
 80009f2:	88fa      	ldrh	r2, [r7, #6]
 80009f4:	89fb      	ldrh	r3, [r7, #14]
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	b218      	sxth	r0, r3
 80009fc:	88ba      	ldrh	r2, [r7, #4]
 80009fe:	8a3b      	ldrh	r3, [r7, #16]
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	b21b      	sxth	r3, r3
 8000a06:	883a      	ldrh	r2, [r7, #0]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f7ff fdbd 	bl	8000588 <writePixel>
    while (x<y) {
 8000a0e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000a12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	f6ff af67 	blt.w	80008ea <drawCircle+0x9c>
    }
}
 8000a1c:	bf00      	nop
 8000a1e:	bf00      	nop
 8000a20:	371c      	adds	r7, #28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd90      	pop	{r4, r7, pc}

08000a26 <drawCircleHelper>:

void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 8000a26:	b590      	push	{r4, r7, lr}
 8000a28:	b087      	sub	sp, #28
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	4608      	mov	r0, r1
 8000a30:	4611      	mov	r1, r2
 8000a32:	461a      	mov	r2, r3
 8000a34:	4623      	mov	r3, r4
 8000a36:	80fb      	strh	r3, [r7, #6]
 8000a38:	4603      	mov	r3, r0
 8000a3a:	80bb      	strh	r3, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	807b      	strh	r3, [r7, #2]
 8000a40:	4613      	mov	r3, r2
 8000a42:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 8000a44:	887b      	ldrh	r3, [r7, #2]
 8000a46:	f1c3 0301 	rsb	r3, r3, #1
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8000a52:	887b      	ldrh	r3, [r7, #2]
 8000a54:	461a      	mov	r2, r3
 8000a56:	03d2      	lsls	r2, r2, #15
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8000a64:	887b      	ldrh	r3, [r7, #2]
 8000a66:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 8000a68:	e0a5      	b.n	8000bb6 <drawCircleHelper+0x190>
        if (f >= 0) {
 8000a6a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	db0e      	blt.n	8000a90 <drawCircleHelper+0x6a>
            y--;
 8000a72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8000a7e:	8a7b      	ldrh	r3, [r7, #18]
 8000a80:	3302      	adds	r3, #2
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8000a86:	8afa      	ldrh	r2, [r7, #22]
 8000a88:	8a7b      	ldrh	r3, [r7, #18]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8000a90:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	3301      	adds	r3, #1
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8000a9c:	8abb      	ldrh	r3, [r7, #20]
 8000a9e:	3302      	adds	r3, #2
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8000aa4:	8afa      	ldrh	r2, [r7, #22]
 8000aa6:	8abb      	ldrh	r3, [r7, #20]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 8000aae:	787b      	ldrb	r3, [r7, #1]
 8000ab0:	f003 0304 	and.w	r3, r3, #4
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d01b      	beq.n	8000af0 <drawCircleHelper+0xca>
            writePixel(x0 + x, y0 + y, color);
 8000ab8:	88fa      	ldrh	r2, [r7, #6]
 8000aba:	8a3b      	ldrh	r3, [r7, #16]
 8000abc:	4413      	add	r3, r2
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	b218      	sxth	r0, r3
 8000ac2:	88ba      	ldrh	r2, [r7, #4]
 8000ac4:	89fb      	ldrh	r3, [r7, #14]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	b21b      	sxth	r3, r3
 8000acc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	f7ff fd5a 	bl	8000588 <writePixel>
            writePixel(x0 + y, y0 + x, color);
 8000ad4:	88fa      	ldrh	r2, [r7, #6]
 8000ad6:	89fb      	ldrh	r3, [r7, #14]
 8000ad8:	4413      	add	r3, r2
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	b218      	sxth	r0, r3
 8000ade:	88ba      	ldrh	r2, [r7, #4]
 8000ae0:	8a3b      	ldrh	r3, [r7, #16]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	b21b      	sxth	r3, r3
 8000ae8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000aea:	4619      	mov	r1, r3
 8000aec:	f7ff fd4c 	bl	8000588 <writePixel>
        }
        if (cornername & 0x2) {
 8000af0:	787b      	ldrb	r3, [r7, #1]
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d01b      	beq.n	8000b32 <drawCircleHelper+0x10c>
            writePixel(x0 + x, y0 - y, color);
 8000afa:	88fa      	ldrh	r2, [r7, #6]
 8000afc:	8a3b      	ldrh	r3, [r7, #16]
 8000afe:	4413      	add	r3, r2
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	b218      	sxth	r0, r3
 8000b04:	88ba      	ldrh	r2, [r7, #4]
 8000b06:	89fb      	ldrh	r3, [r7, #14]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	b21b      	sxth	r3, r3
 8000b0e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000b10:	4619      	mov	r1, r3
 8000b12:	f7ff fd39 	bl	8000588 <writePixel>
            writePixel(x0 + y, y0 - x, color);
 8000b16:	88fa      	ldrh	r2, [r7, #6]
 8000b18:	89fb      	ldrh	r3, [r7, #14]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	b218      	sxth	r0, r3
 8000b20:	88ba      	ldrh	r2, [r7, #4]
 8000b22:	8a3b      	ldrh	r3, [r7, #16]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	b21b      	sxth	r3, r3
 8000b2a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f7ff fd2b 	bl	8000588 <writePixel>
        }
        if (cornername & 0x8) {
 8000b32:	787b      	ldrb	r3, [r7, #1]
 8000b34:	f003 0308 	and.w	r3, r3, #8
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d01b      	beq.n	8000b74 <drawCircleHelper+0x14e>
            writePixel(x0 - y, y0 + x, color);
 8000b3c:	88fa      	ldrh	r2, [r7, #6]
 8000b3e:	89fb      	ldrh	r3, [r7, #14]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	b218      	sxth	r0, r3
 8000b46:	88ba      	ldrh	r2, [r7, #4]
 8000b48:	8a3b      	ldrh	r3, [r7, #16]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	b21b      	sxth	r3, r3
 8000b50:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000b52:	4619      	mov	r1, r3
 8000b54:	f7ff fd18 	bl	8000588 <writePixel>
            writePixel(x0 - x, y0 + y, color);
 8000b58:	88fa      	ldrh	r2, [r7, #6]
 8000b5a:	8a3b      	ldrh	r3, [r7, #16]
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	b218      	sxth	r0, r3
 8000b62:	88ba      	ldrh	r2, [r7, #4]
 8000b64:	89fb      	ldrh	r3, [r7, #14]
 8000b66:	4413      	add	r3, r2
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	b21b      	sxth	r3, r3
 8000b6c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f7ff fd0a 	bl	8000588 <writePixel>
        }
        if (cornername & 0x1) {
 8000b74:	787b      	ldrb	r3, [r7, #1]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d01b      	beq.n	8000bb6 <drawCircleHelper+0x190>
            writePixel(x0 - y, y0 - x, color);
 8000b7e:	88fa      	ldrh	r2, [r7, #6]
 8000b80:	89fb      	ldrh	r3, [r7, #14]
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	b218      	sxth	r0, r3
 8000b88:	88ba      	ldrh	r2, [r7, #4]
 8000b8a:	8a3b      	ldrh	r3, [r7, #16]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	b21b      	sxth	r3, r3
 8000b92:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000b94:	4619      	mov	r1, r3
 8000b96:	f7ff fcf7 	bl	8000588 <writePixel>
            writePixel(x0 - x, y0 - y, color);
 8000b9a:	88fa      	ldrh	r2, [r7, #6]
 8000b9c:	8a3b      	ldrh	r3, [r7, #16]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	b218      	sxth	r0, r3
 8000ba4:	88ba      	ldrh	r2, [r7, #4]
 8000ba6:	89fb      	ldrh	r3, [r7, #14]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f7ff fce9 	bl	8000588 <writePixel>
    while (x<y) {
 8000bb6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000bba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	f6ff af53 	blt.w	8000a6a <drawCircleHelper+0x44>
        }
    }
}
 8000bc4:	bf00      	nop
 8000bc6:	bf00      	nop
 8000bc8:	371c      	adds	r7, #28
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd90      	pop	{r4, r7, pc}

08000bce <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 8000bce:	b590      	push	{r4, r7, lr}
 8000bd0:	b087      	sub	sp, #28
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	4604      	mov	r4, r0
 8000bd6:	4608      	mov	r0, r1
 8000bd8:	4611      	mov	r1, r2
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4623      	mov	r3, r4
 8000bde:	80fb      	strh	r3, [r7, #6]
 8000be0:	4603      	mov	r3, r0
 8000be2:	80bb      	strh	r3, [r7, #4]
 8000be4:	460b      	mov	r3, r1
 8000be6:	807b      	strh	r3, [r7, #2]
 8000be8:	4613      	mov	r3, r2
 8000bea:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 8000bec:	887b      	ldrh	r3, [r7, #2]
 8000bee:	f1c3 0301 	rsb	r3, r3, #1
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8000bfa:	887b      	ldrh	r3, [r7, #2]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	03d2      	lsls	r2, r2, #15
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8000c0c:	887b      	ldrh	r3, [r7, #2]
 8000c0e:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 8000c10:	8a3b      	ldrh	r3, [r7, #16]
 8000c12:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 8000c14:	89fb      	ldrh	r3, [r7, #14]
 8000c16:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 8000c18:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	3301      	adds	r3, #1
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	853b      	strh	r3, [r7, #40]	@ 0x28

    while(x < y) {
 8000c24:	e095      	b.n	8000d52 <fillCircleHelper+0x184>
        if (f >= 0) {
 8000c26:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db0e      	blt.n	8000c4c <fillCircleHelper+0x7e>
            y--;
 8000c2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	3b01      	subs	r3, #1
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8000c3a:	8a7b      	ldrh	r3, [r7, #18]
 8000c3c:	3302      	adds	r3, #2
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8000c42:	8afa      	ldrh	r2, [r7, #22]
 8000c44:	8a7b      	ldrh	r3, [r7, #18]
 8000c46:	4413      	add	r3, r2
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8000c4c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	3301      	adds	r3, #1
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8000c58:	8abb      	ldrh	r3, [r7, #20]
 8000c5a:	3302      	adds	r3, #2
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8000c60:	8afa      	ldrh	r2, [r7, #22]
 8000c62:	8abb      	ldrh	r3, [r7, #20]
 8000c64:	4413      	add	r3, r2
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 8000c6a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c6e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	db31      	blt.n	8000cda <fillCircleHelper+0x10c>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 8000c76:	787b      	ldrb	r3, [r7, #1]
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d013      	beq.n	8000ca8 <fillCircleHelper+0xda>
 8000c80:	88fa      	ldrh	r2, [r7, #6]
 8000c82:	8a3b      	ldrh	r3, [r7, #16]
 8000c84:	4413      	add	r3, r2
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	b218      	sxth	r0, r3
 8000c8a:	88ba      	ldrh	r2, [r7, #4]
 8000c8c:	89fb      	ldrh	r3, [r7, #14]
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	b219      	sxth	r1, r3
 8000c94:	89fb      	ldrh	r3, [r7, #14]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000c9c:	4413      	add	r3, r2
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	b21a      	sxth	r2, r3
 8000ca2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000ca4:	f7ff fd27 	bl	80006f6 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 8000ca8:	787b      	ldrb	r3, [r7, #1]
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d013      	beq.n	8000cda <fillCircleHelper+0x10c>
 8000cb2:	88fa      	ldrh	r2, [r7, #6]
 8000cb4:	8a3b      	ldrh	r3, [r7, #16]
 8000cb6:	1ad3      	subs	r3, r2, r3
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	b218      	sxth	r0, r3
 8000cbc:	88ba      	ldrh	r2, [r7, #4]
 8000cbe:	89fb      	ldrh	r3, [r7, #14]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	b219      	sxth	r1, r3
 8000cc6:	89fb      	ldrh	r3, [r7, #14]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000cce:	4413      	add	r3, r2
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	b21a      	sxth	r2, r3
 8000cd4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000cd6:	f7ff fd0e 	bl	80006f6 <drawFastVLine>
        }
        if(y != py) {
 8000cda:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000cde:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d033      	beq.n	8000d4e <fillCircleHelper+0x180>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 8000ce6:	787b      	ldrb	r3, [r7, #1]
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d013      	beq.n	8000d18 <fillCircleHelper+0x14a>
 8000cf0:	88fa      	ldrh	r2, [r7, #6]
 8000cf2:	897b      	ldrh	r3, [r7, #10]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	b218      	sxth	r0, r3
 8000cfa:	88ba      	ldrh	r2, [r7, #4]
 8000cfc:	89bb      	ldrh	r3, [r7, #12]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	b219      	sxth	r1, r3
 8000d04:	89bb      	ldrh	r3, [r7, #12]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000d0c:	4413      	add	r3, r2
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	b21a      	sxth	r2, r3
 8000d12:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000d14:	f7ff fcef 	bl	80006f6 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 8000d18:	787b      	ldrb	r3, [r7, #1]
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d013      	beq.n	8000d4a <fillCircleHelper+0x17c>
 8000d22:	88fa      	ldrh	r2, [r7, #6]
 8000d24:	897b      	ldrh	r3, [r7, #10]
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	b218      	sxth	r0, r3
 8000d2c:	88ba      	ldrh	r2, [r7, #4]
 8000d2e:	89bb      	ldrh	r3, [r7, #12]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	b219      	sxth	r1, r3
 8000d36:	89bb      	ldrh	r3, [r7, #12]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000d3e:	4413      	add	r3, r2
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	b21a      	sxth	r2, r3
 8000d44:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000d46:	f7ff fcd6 	bl	80006f6 <drawFastVLine>
            py = y;
 8000d4a:	89fb      	ldrh	r3, [r7, #14]
 8000d4c:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 8000d4e:	8a3b      	ldrh	r3, [r7, #16]
 8000d50:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 8000d52:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000d56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	f6ff af63 	blt.w	8000c26 <fillCircleHelper+0x58>
    }
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	371c      	adds	r7, #28
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd90      	pop	{r4, r7, pc}

08000d6a <fillCircle>:

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8000d6a:	b590      	push	{r4, r7, lr}
 8000d6c:	b085      	sub	sp, #20
 8000d6e:	af02      	add	r7, sp, #8
 8000d70:	4604      	mov	r4, r0
 8000d72:	4608      	mov	r0, r1
 8000d74:	4611      	mov	r1, r2
 8000d76:	461a      	mov	r2, r3
 8000d78:	4623      	mov	r3, r4
 8000d7a:	80fb      	strh	r3, [r7, #6]
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	80bb      	strh	r3, [r7, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	807b      	strh	r3, [r7, #2]
 8000d84:	4613      	mov	r3, r2
 8000d86:	803b      	strh	r3, [r7, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 8000d88:	88ba      	ldrh	r2, [r7, #4]
 8000d8a:	887b      	ldrh	r3, [r7, #2]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	b219      	sxth	r1, r3
 8000d92:	887b      	ldrh	r3, [r7, #2]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	3301      	adds	r3, #1
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	b21a      	sxth	r2, r3
 8000d9e:	883b      	ldrh	r3, [r7, #0]
 8000da0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000da4:	f7ff fca7 	bl	80006f6 <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8000da8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000dac:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000db0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000db4:	883b      	ldrh	r3, [r7, #0]
 8000db6:	9301      	str	r3, [sp, #4]
 8000db8:	2300      	movs	r3, #0
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	f7ff ff06 	bl	8000bce <fillCircleHelper>
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd90      	pop	{r4, r7, pc}

08000dca <drawRect>:



void drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000dca:	b590      	push	{r4, r7, lr}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4604      	mov	r4, r0
 8000dd2:	4608      	mov	r0, r1
 8000dd4:	4611      	mov	r1, r2
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	4623      	mov	r3, r4
 8000dda:	80fb      	strh	r3, [r7, #6]
 8000ddc:	4603      	mov	r3, r0
 8000dde:	80bb      	strh	r3, [r7, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	807b      	strh	r3, [r7, #2]
 8000de4:	4613      	mov	r3, r2
 8000de6:	803b      	strh	r3, [r7, #0]
    drawFastHLine(x, y, w, color);
 8000de8:	8b3b      	ldrh	r3, [r7, #24]
 8000dea:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000dee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000df2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000df6:	f7ff fca3 	bl	8000740 <drawFastHLine>
    drawFastHLine(x, y+h-1, w, color);
 8000dfa:	88ba      	ldrh	r2, [r7, #4]
 8000dfc:	883b      	ldrh	r3, [r7, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	3b01      	subs	r3, #1
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	b219      	sxth	r1, r3
 8000e08:	8b3b      	ldrh	r3, [r7, #24]
 8000e0a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000e0e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000e12:	f7ff fc95 	bl	8000740 <drawFastHLine>
    drawFastVLine(x, y, h, color);
 8000e16:	8b3b      	ldrh	r3, [r7, #24]
 8000e18:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000e1c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000e20:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000e24:	f7ff fc67 	bl	80006f6 <drawFastVLine>
    drawFastVLine(x+w-1, y, h, color);
 8000e28:	88fa      	ldrh	r2, [r7, #6]
 8000e2a:	887b      	ldrh	r3, [r7, #2]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	3b01      	subs	r3, #1
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	b218      	sxth	r0, r3
 8000e36:	8b3b      	ldrh	r3, [r7, #24]
 8000e38:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000e3c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000e40:	f7ff fc59 	bl	80006f6 <drawFastVLine>
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd90      	pop	{r4, r7, pc}

08000e4c <drawRoundRect>:

void drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8000e4c:	b590      	push	{r4, r7, lr}
 8000e4e:	b087      	sub	sp, #28
 8000e50:	af02      	add	r7, sp, #8
 8000e52:	4604      	mov	r4, r0
 8000e54:	4608      	mov	r0, r1
 8000e56:	4611      	mov	r1, r2
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4623      	mov	r3, r4
 8000e5c:	80fb      	strh	r3, [r7, #6]
 8000e5e:	4603      	mov	r3, r0
 8000e60:	80bb      	strh	r3, [r7, #4]
 8000e62:	460b      	mov	r3, r1
 8000e64:	807b      	strh	r3, [r7, #2]
 8000e66:	4613      	mov	r3, r2
 8000e68:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8000e6a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000e6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e72:	4293      	cmp	r3, r2
 8000e74:	bfa8      	it	ge
 8000e76:	4613      	movge	r3, r2
 8000e78:	b21b      	sxth	r3, r3
 8000e7a:	0fda      	lsrs	r2, r3, #31
 8000e7c:	4413      	add	r3, r2
 8000e7e:	105b      	asrs	r3, r3, #1
 8000e80:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8000e82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000e86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	dd01      	ble.n	8000e92 <drawRoundRect+0x46>
 8000e8e:	89fb      	ldrh	r3, [r7, #14]
 8000e90:	843b      	strh	r3, [r7, #32]
    // smarter version
    drawFastHLine(x+r  , y    , w-2*r, color); // Top
 8000e92:	88fa      	ldrh	r2, [r7, #6]
 8000e94:	8c3b      	ldrh	r3, [r7, #32]
 8000e96:	4413      	add	r3, r2
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	b218      	sxth	r0, r3
 8000e9c:	887a      	ldrh	r2, [r7, #2]
 8000e9e:	8c3b      	ldrh	r3, [r7, #32]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	b21a      	sxth	r2, r3
 8000eaa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000eac:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000eb0:	f7ff fc46 	bl	8000740 <drawFastHLine>
    drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8000eb4:	88fa      	ldrh	r2, [r7, #6]
 8000eb6:	8c3b      	ldrh	r3, [r7, #32]
 8000eb8:	4413      	add	r3, r2
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	b218      	sxth	r0, r3
 8000ebe:	88ba      	ldrh	r2, [r7, #4]
 8000ec0:	883b      	ldrh	r3, [r7, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	b219      	sxth	r1, r3
 8000ecc:	887a      	ldrh	r2, [r7, #2]
 8000ece:	8c3b      	ldrh	r3, [r7, #32]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	b21a      	sxth	r2, r3
 8000eda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000edc:	f7ff fc30 	bl	8000740 <drawFastHLine>
    drawFastVLine(x    , y+r  , h-2*r, color); // Left
 8000ee0:	88ba      	ldrh	r2, [r7, #4]
 8000ee2:	8c3b      	ldrh	r3, [r7, #32]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	b219      	sxth	r1, r3
 8000eea:	883a      	ldrh	r2, [r7, #0]
 8000eec:	8c3b      	ldrh	r3, [r7, #32]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	b21a      	sxth	r2, r3
 8000ef8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000efa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000efe:	f7ff fbfa 	bl	80006f6 <drawFastVLine>
    drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 8000f02:	88fa      	ldrh	r2, [r7, #6]
 8000f04:	887b      	ldrh	r3, [r7, #2]
 8000f06:	4413      	add	r3, r2
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	b218      	sxth	r0, r3
 8000f10:	88ba      	ldrh	r2, [r7, #4]
 8000f12:	8c3b      	ldrh	r3, [r7, #32]
 8000f14:	4413      	add	r3, r2
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	b219      	sxth	r1, r3
 8000f1a:	883a      	ldrh	r2, [r7, #0]
 8000f1c:	8c3b      	ldrh	r3, [r7, #32]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	b21a      	sxth	r2, r3
 8000f28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f2a:	f7ff fbe4 	bl	80006f6 <drawFastVLine>
    // draw four corners
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 8000f2e:	88fa      	ldrh	r2, [r7, #6]
 8000f30:	8c3b      	ldrh	r3, [r7, #32]
 8000f32:	4413      	add	r3, r2
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	b218      	sxth	r0, r3
 8000f38:	88ba      	ldrh	r2, [r7, #4]
 8000f3a:	8c3b      	ldrh	r3, [r7, #32]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	b219      	sxth	r1, r3
 8000f42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000f46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	f7ff fd6b 	bl	8000a26 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8000f50:	88fa      	ldrh	r2, [r7, #6]
 8000f52:	887b      	ldrh	r3, [r7, #2]
 8000f54:	4413      	add	r3, r2
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	8c3b      	ldrh	r3, [r7, #32]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	b218      	sxth	r0, r3
 8000f64:	88ba      	ldrh	r2, [r7, #4]
 8000f66:	8c3b      	ldrh	r3, [r7, #32]
 8000f68:	4413      	add	r3, r2
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	b219      	sxth	r1, r3
 8000f6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000f72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2302      	movs	r3, #2
 8000f78:	f7ff fd55 	bl	8000a26 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8000f7c:	88fa      	ldrh	r2, [r7, #6]
 8000f7e:	887b      	ldrh	r3, [r7, #2]
 8000f80:	4413      	add	r3, r2
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	8c3b      	ldrh	r3, [r7, #32]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	b218      	sxth	r0, r3
 8000f90:	88ba      	ldrh	r2, [r7, #4]
 8000f92:	883b      	ldrh	r3, [r7, #0]
 8000f94:	4413      	add	r3, r2
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	8c3b      	ldrh	r3, [r7, #32]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	b219      	sxth	r1, r3
 8000fa4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000fa8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2304      	movs	r3, #4
 8000fae:	f7ff fd3a 	bl	8000a26 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8000fb2:	88fa      	ldrh	r2, [r7, #6]
 8000fb4:	8c3b      	ldrh	r3, [r7, #32]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	b218      	sxth	r0, r3
 8000fbc:	88ba      	ldrh	r2, [r7, #4]
 8000fbe:	883b      	ldrh	r3, [r7, #0]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	8c3b      	ldrh	r3, [r7, #32]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	b219      	sxth	r1, r3
 8000fd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000fd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2308      	movs	r3, #8
 8000fda:	f7ff fd24 	bl	8000a26 <drawCircleHelper>
}
 8000fde:	bf00      	nop
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd90      	pop	{r4, r7, pc}

08000fe6 <fillRoundRect>:


void fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8000fe6:	b590      	push	{r4, r7, lr}
 8000fe8:	b087      	sub	sp, #28
 8000fea:	af02      	add	r7, sp, #8
 8000fec:	4604      	mov	r4, r0
 8000fee:	4608      	mov	r0, r1
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4623      	mov	r3, r4
 8000ff6:	80fb      	strh	r3, [r7, #6]
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	80bb      	strh	r3, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	807b      	strh	r3, [r7, #2]
 8001000:	4613      	mov	r3, r2
 8001002:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8001004:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001008:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800100c:	4293      	cmp	r3, r2
 800100e:	bfa8      	it	ge
 8001010:	4613      	movge	r3, r2
 8001012:	b21b      	sxth	r3, r3
 8001014:	0fda      	lsrs	r2, r3, #31
 8001016:	4413      	add	r3, r2
 8001018:	105b      	asrs	r3, r3, #1
 800101a:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 800101c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001020:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001024:	429a      	cmp	r2, r3
 8001026:	dd01      	ble.n	800102c <fillRoundRect+0x46>
 8001028:	89fb      	ldrh	r3, [r7, #14]
 800102a:	843b      	strh	r3, [r7, #32]
    // smarter version
    fillRect(x+r, y, w-2*r, h, color);
 800102c:	88fa      	ldrh	r2, [r7, #6]
 800102e:	8c3b      	ldrh	r3, [r7, #32]
 8001030:	4413      	add	r3, r2
 8001032:	b29b      	uxth	r3, r3
 8001034:	b218      	sxth	r0, r3
 8001036:	887a      	ldrh	r2, [r7, #2]
 8001038:	8c3b      	ldrh	r3, [r7, #32]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	b29b      	uxth	r3, r3
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	b29b      	uxth	r3, r3
 8001042:	b21a      	sxth	r2, r3
 8001044:	f9b7 4000 	ldrsh.w	r4, [r7]
 8001048:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800104c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	4623      	mov	r3, r4
 8001052:	f7ff fa75 	bl	8000540 <fillRect>
    // draw four corners
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8001056:	88fa      	ldrh	r2, [r7, #6]
 8001058:	887b      	ldrh	r3, [r7, #2]
 800105a:	4413      	add	r3, r2
 800105c:	b29a      	uxth	r2, r3
 800105e:	8c3b      	ldrh	r3, [r7, #32]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	b29b      	uxth	r3, r3
 8001064:	3b01      	subs	r3, #1
 8001066:	b29b      	uxth	r3, r3
 8001068:	b218      	sxth	r0, r3
 800106a:	88ba      	ldrh	r2, [r7, #4]
 800106c:	8c3b      	ldrh	r3, [r7, #32]
 800106e:	4413      	add	r3, r2
 8001070:	b29b      	uxth	r3, r3
 8001072:	b219      	sxth	r1, r3
 8001074:	883a      	ldrh	r2, [r7, #0]
 8001076:	8c3b      	ldrh	r3, [r7, #32]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	b29b      	uxth	r3, r3
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	b29b      	uxth	r3, r3
 8001080:	3b01      	subs	r3, #1
 8001082:	b29b      	uxth	r3, r3
 8001084:	b21b      	sxth	r3, r3
 8001086:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800108a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800108c:	9201      	str	r2, [sp, #4]
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	4622      	mov	r2, r4
 8001094:	f7ff fd9b 	bl	8000bce <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8001098:	88fa      	ldrh	r2, [r7, #6]
 800109a:	8c3b      	ldrh	r3, [r7, #32]
 800109c:	4413      	add	r3, r2
 800109e:	b29b      	uxth	r3, r3
 80010a0:	b218      	sxth	r0, r3
 80010a2:	88ba      	ldrh	r2, [r7, #4]
 80010a4:	8c3b      	ldrh	r3, [r7, #32]
 80010a6:	4413      	add	r3, r2
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	b219      	sxth	r1, r3
 80010ac:	883a      	ldrh	r2, [r7, #0]
 80010ae:	8c3b      	ldrh	r3, [r7, #32]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	3b01      	subs	r3, #1
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	b21b      	sxth	r3, r3
 80010be:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 80010c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80010c4:	9201      	str	r2, [sp, #4]
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2302      	movs	r3, #2
 80010ca:	4622      	mov	r2, r4
 80010cc:	f7ff fd7f 	bl	8000bce <fillCircleHelper>
}
 80010d0:	bf00      	nop
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd90      	pop	{r4, r7, pc}

080010d8 <drawTriangle>:


void drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 80010d8:	b590      	push	{r4, r7, lr}
 80010da:	b085      	sub	sp, #20
 80010dc:	af02      	add	r7, sp, #8
 80010de:	4604      	mov	r4, r0
 80010e0:	4608      	mov	r0, r1
 80010e2:	4611      	mov	r1, r2
 80010e4:	461a      	mov	r2, r3
 80010e6:	4623      	mov	r3, r4
 80010e8:	80fb      	strh	r3, [r7, #6]
 80010ea:	4603      	mov	r3, r0
 80010ec:	80bb      	strh	r3, [r7, #4]
 80010ee:	460b      	mov	r3, r1
 80010f0:	807b      	strh	r3, [r7, #2]
 80010f2:	4613      	mov	r3, r2
 80010f4:	803b      	strh	r3, [r7, #0]
    drawLine(x0, y0, x1, y1, color);
 80010f6:	f9b7 4000 	ldrsh.w	r4, [r7]
 80010fa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80010fe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001102:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001106:	8c3b      	ldrh	r3, [r7, #32]
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	4623      	mov	r3, r4
 800110c:	f7ff fb3d 	bl	800078a <drawLine>
    drawLine(x1, y1, x2, y2, color);
 8001110:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 8001114:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001118:	f9b7 1000 	ldrsh.w	r1, [r7]
 800111c:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8001120:	8c3b      	ldrh	r3, [r7, #32]
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	4623      	mov	r3, r4
 8001126:	f7ff fb30 	bl	800078a <drawLine>
    drawLine(x2, y2, x0, y0, color);
 800112a:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800112e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001132:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8001136:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800113a:	8c3b      	ldrh	r3, [r7, #32]
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	4623      	mov	r3, r4
 8001140:	f7ff fb23 	bl	800078a <drawLine>
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	bd90      	pop	{r4, r7, pc}

0800114c <fillTriangle>:


void fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b08f      	sub	sp, #60	@ 0x3c
 8001150:	af00      	add	r7, sp, #0
 8001152:	4604      	mov	r4, r0
 8001154:	4608      	mov	r0, r1
 8001156:	4611      	mov	r1, r2
 8001158:	461a      	mov	r2, r3
 800115a:	4623      	mov	r3, r4
 800115c:	80fb      	strh	r3, [r7, #6]
 800115e:	4603      	mov	r3, r0
 8001160:	80bb      	strh	r3, [r7, #4]
 8001162:	460b      	mov	r3, r1
 8001164:	807b      	strh	r3, [r7, #2]
 8001166:	4613      	mov	r3, r2
 8001168:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 800116a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800116e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001172:	429a      	cmp	r2, r3
 8001174:	dd0b      	ble.n	800118e <fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8001176:	88bb      	ldrh	r3, [r7, #4]
 8001178:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800117a:	883b      	ldrh	r3, [r7, #0]
 800117c:	80bb      	strh	r3, [r7, #4]
 800117e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001180:	803b      	strh	r3, [r7, #0]
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001186:	887b      	ldrh	r3, [r7, #2]
 8001188:	80fb      	strh	r3, [r7, #6]
 800118a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800118c:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 800118e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001192:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001196:	429a      	cmp	r2, r3
 8001198:	dd0f      	ble.n	80011ba <fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 800119a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800119e:	847b      	strh	r3, [r7, #34]	@ 0x22
 80011a0:	883b      	ldrh	r3, [r7, #0]
 80011a2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80011a6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80011a8:	803b      	strh	r3, [r7, #0]
 80011aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80011ae:	843b      	strh	r3, [r7, #32]
 80011b0:	887b      	ldrh	r3, [r7, #2]
 80011b2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80011b6:	8c3b      	ldrh	r3, [r7, #32]
 80011b8:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 80011ba:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80011be:	f9b7 3000 	ldrsh.w	r3, [r7]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	dd0b      	ble.n	80011de <fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 80011c6:	88bb      	ldrh	r3, [r7, #4]
 80011c8:	83fb      	strh	r3, [r7, #30]
 80011ca:	883b      	ldrh	r3, [r7, #0]
 80011cc:	80bb      	strh	r3, [r7, #4]
 80011ce:	8bfb      	ldrh	r3, [r7, #30]
 80011d0:	803b      	strh	r3, [r7, #0]
 80011d2:	88fb      	ldrh	r3, [r7, #6]
 80011d4:	83bb      	strh	r3, [r7, #28]
 80011d6:	887b      	ldrh	r3, [r7, #2]
 80011d8:	80fb      	strh	r3, [r7, #6]
 80011da:	8bbb      	ldrh	r3, [r7, #28]
 80011dc:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 80011de:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80011e2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d137      	bne.n	800125a <fillTriangle+0x10e>
        a = b = x0;
 80011ea:	88fb      	ldrh	r3, [r7, #6]
 80011ec:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80011ee:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80011f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        if(x1 < a)      a = x1;
 80011f2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80011f6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80011fa:	429a      	cmp	r2, r3
 80011fc:	da02      	bge.n	8001204 <fillTriangle+0xb8>
 80011fe:	887b      	ldrh	r3, [r7, #2]
 8001200:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001202:	e007      	b.n	8001214 <fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 8001204:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001208:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800120c:	429a      	cmp	r2, r3
 800120e:	dd01      	ble.n	8001214 <fillTriangle+0xc8>
 8001210:	887b      	ldrh	r3, [r7, #2]
 8001212:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if(x2 < a)      a = x2;
 8001214:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 8001218:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800121c:	429a      	cmp	r2, r3
 800121e:	da03      	bge.n	8001228 <fillTriangle+0xdc>
 8001220:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001224:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001226:	e008      	b.n	800123a <fillTriangle+0xee>
        else if(x2 > b) b = x2;
 8001228:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 800122c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001230:	429a      	cmp	r2, r3
 8001232:	dd02      	ble.n	800123a <fillTriangle+0xee>
 8001234:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001238:	86bb      	strh	r3, [r7, #52]	@ 0x34
        drawFastHLine(a, y0, b-a+1, color);
 800123a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800123c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	b29b      	uxth	r3, r3
 8001242:	3301      	adds	r3, #1
 8001244:	b29b      	uxth	r3, r3
 8001246:	b21a      	sxth	r2, r3
 8001248:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800124c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001250:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 8001254:	f7ff fa74 	bl	8000740 <drawFastHLine>
        return;
 8001258:	e0d4      	b.n	8001404 <fillTriangle+0x2b8>
    }

    int16_t
    dx01 = x1 - x0,
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	b29b      	uxth	r3, r3
 8001262:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8001264:	883a      	ldrh	r2, [r7, #0]
 8001266:	88bb      	ldrh	r3, [r7, #4]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	b29b      	uxth	r3, r3
 800126c:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 800126e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	b29b      	uxth	r3, r3
 8001278:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 800127a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800127e:	88bb      	ldrh	r3, [r7, #4]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	b29b      	uxth	r3, r3
 8001284:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8001286:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800128a:	887b      	ldrh	r3, [r7, #2]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	b29b      	uxth	r3, r3
 8001290:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8001292:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8001296:	883b      	ldrh	r3, [r7, #0]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	b29b      	uxth	r3, r3
 800129c:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 800129e:	2300      	movs	r3, #0
 80012a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sb   = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 80012a6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80012aa:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d102      	bne.n	80012b8 <fillTriangle+0x16c>
 80012b2:	883b      	ldrh	r3, [r7, #0]
 80012b4:	863b      	strh	r3, [r7, #48]	@ 0x30
 80012b6:	e003      	b.n	80012c0 <fillTriangle+0x174>
    else         last = y1-1; // Skip it
 80012b8:	883b      	ldrh	r3, [r7, #0]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	b29b      	uxth	r3, r3
 80012be:	863b      	strh	r3, [r7, #48]	@ 0x30

    for(y=y0; y<=last; y++) {
 80012c0:	88bb      	ldrh	r3, [r7, #4]
 80012c2:	867b      	strh	r3, [r7, #50]	@ 0x32
 80012c4:	e03e      	b.n	8001344 <fillTriangle+0x1f8>
        a   = x0 + sa / dy01;
 80012c6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	4413      	add	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        b   = x0 + sb / dy02;
 80012da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	4413      	add	r3, r2
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	86bb      	strh	r3, [r7, #52]	@ 0x34
        sa += dx01;
 80012ee:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80012f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012f4:	4413      	add	r3, r2
 80012f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        sb += dx02;
 80012f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012fe:	4413      	add	r3, r2
 8001300:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8001302:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 8001306:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800130a:	429a      	cmp	r2, r3
 800130c:	dd05      	ble.n	800131a <fillTriangle+0x1ce>
 800130e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001310:	81bb      	strh	r3, [r7, #12]
 8001312:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001314:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001316:	89bb      	ldrh	r3, [r7, #12]
 8001318:	86bb      	strh	r3, [r7, #52]	@ 0x34
        drawFastHLine(a, y, b-a+1, color);
 800131a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800131c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	b29b      	uxth	r3, r3
 8001322:	3301      	adds	r3, #1
 8001324:	b29b      	uxth	r3, r3
 8001326:	b21a      	sxth	r2, r3
 8001328:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800132c:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 8001330:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 8001334:	f7ff fa04 	bl	8000740 <drawFastHLine>
    for(y=y0; y<=last; y++) {
 8001338:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800133c:	b29b      	uxth	r3, r3
 800133e:	3301      	adds	r3, #1
 8001340:	b29b      	uxth	r3, r3
 8001342:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001344:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 8001348:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800134c:	429a      	cmp	r2, r3
 800134e:	ddba      	ble.n	80012c6 <fillTriangle+0x17a>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8001350:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001354:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 8001358:	f9b7 2000 	ldrsh.w	r2, [r7]
 800135c:	1a8a      	subs	r2, r1, r2
 800135e:	fb02 f303 	mul.w	r3, r2, r3
 8001362:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8001364:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001368:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 800136c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001370:	1a8a      	subs	r2, r1, r2
 8001372:	fb02 f303 	mul.w	r3, r2, r3
 8001376:	62bb      	str	r3, [r7, #40]	@ 0x28
    for(; y<=y2; y++) {
 8001378:	e03e      	b.n	80013f8 <fillTriangle+0x2ac>
        a   = x1 + sa / dy12;
 800137a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800137e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001380:	fb92 f3f3 	sdiv	r3, r2, r3
 8001384:	b29a      	uxth	r2, r3
 8001386:	887b      	ldrh	r3, [r7, #2]
 8001388:	4413      	add	r3, r2
 800138a:	b29b      	uxth	r3, r3
 800138c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        b   = x0 + sb / dy02;
 800138e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001392:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001394:	fb92 f3f3 	sdiv	r3, r2, r3
 8001398:	b29a      	uxth	r2, r3
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	4413      	add	r3, r2
 800139e:	b29b      	uxth	r3, r3
 80013a0:	86bb      	strh	r3, [r7, #52]	@ 0x34
        sa += dx12;
 80013a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80013a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013a8:	4413      	add	r3, r2
 80013aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        sb += dx02;
 80013ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013b2:	4413      	add	r3, r2
 80013b4:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 80013b6:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 80013ba:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80013be:	429a      	cmp	r2, r3
 80013c0:	dd05      	ble.n	80013ce <fillTriangle+0x282>
 80013c2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80013c4:	81fb      	strh	r3, [r7, #14]
 80013c6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80013c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80013ca:	89fb      	ldrh	r3, [r7, #14]
 80013cc:	86bb      	strh	r3, [r7, #52]	@ 0x34
        drawFastHLine(a, y, b-a+1, color);
 80013ce:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80013d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	3301      	adds	r3, #1
 80013d8:	b29b      	uxth	r3, r3
 80013da:	b21a      	sxth	r2, r3
 80013dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80013e0:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 80013e4:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 80013e8:	f7ff f9aa 	bl	8000740 <drawFastHLine>
    for(; y<=y2; y++) {
 80013ec:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	3301      	adds	r3, #1
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	867b      	strh	r3, [r7, #50]	@ 0x32
 80013f8:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 80013fc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001400:	429a      	cmp	r2, r3
 8001402:	ddba      	ble.n	800137a <fillTriangle+0x22e>
    }
}
 8001404:	373c      	adds	r7, #60	@ 0x3c
 8001406:	46bd      	mov	sp, r7
 8001408:	bd90      	pop	{r4, r7, pc}
	...

0800140c <fillScreen>:

void fillScreen(uint16_t color) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af02      	add	r7, sp, #8
 8001412:	4603      	mov	r3, r0
 8001414:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8001416:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <fillScreen+0x2c>)
 8001418:	f9b3 2000 	ldrsh.w	r2, [r3]
 800141c:	4b07      	ldr	r3, [pc, #28]	@ (800143c <fillScreen+0x30>)
 800141e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	460b      	mov	r3, r1
 8001428:	2100      	movs	r1, #0
 800142a:	2000      	movs	r0, #0
 800142c:	f7ff f888 	bl	8000540 <fillRect>
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200000ac 	.word	0x200000ac
 800143c:	200000ae 	.word	0x200000ae

08001440 <testLines>:



void testLines(uint16_t color)
{
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b08b      	sub	sp, #44	@ 0x2c
 8001444:	af02      	add	r7, sp, #8
 8001446:	4603      	mov	r3, r0
 8001448:	80fb      	strh	r3, [r7, #6]
    int           x1, y1, x2, y2,
                  w = _width,
 800144a:	4b7c      	ldr	r3, [pc, #496]	@ (800163c <testLines+0x1fc>)
 800144c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001450:	617b      	str	r3, [r7, #20]
                  h = _height;
 8001452:	4b7b      	ldr	r3, [pc, #492]	@ (8001640 <testLines+0x200>)
 8001454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001458:	613b      	str	r3, [r7, #16]

    fillScreen(BLACK);
 800145a:	2000      	movs	r0, #0
 800145c:	f7ff ffd6 	bl	800140c <fillScreen>

    x1 = y1 = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	3b01      	subs	r3, #1
 800146c:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
 8001472:	e00f      	b.n	8001494 <testLines+0x54>
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	b218      	sxth	r0, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	b219      	sxth	r1, r3
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	b21a      	sxth	r2, r3
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	b21c      	sxth	r4, r3
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	4623      	mov	r3, r4
 800148a:	f7ff f97e 	bl	800078a <drawLine>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3306      	adds	r3, #6
 8001492:	61fb      	str	r3, [r7, #28]
 8001494:	69fa      	ldr	r2, [r7, #28]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	429a      	cmp	r2, r3
 800149a:	dbeb      	blt.n	8001474 <testLines+0x34>
    x2    = w - 1;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	3b01      	subs	r3, #1
 80014a0:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 80014a2:	2300      	movs	r3, #0
 80014a4:	61bb      	str	r3, [r7, #24]
 80014a6:	e00f      	b.n	80014c8 <testLines+0x88>
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	b218      	sxth	r0, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	b219      	sxth	r1, r3
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	b21a      	sxth	r2, r3
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	b21c      	sxth	r4, r3
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	4623      	mov	r3, r4
 80014be:	f7ff f964 	bl	800078a <drawLine>
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	3306      	adds	r3, #6
 80014c6:	61bb      	str	r3, [r7, #24]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	dbeb      	blt.n	80014a8 <testLines+0x68>

    fillScreen(BLACK);
 80014d0:	2000      	movs	r0, #0
 80014d2:	f7ff ff9b 	bl	800140c <fillScreen>

    x1    = w - 1;
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	3b01      	subs	r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
 80014ea:	e00f      	b.n	800150c <testLines+0xcc>
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	b218      	sxth	r0, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	b219      	sxth	r1, r3
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	b21a      	sxth	r2, r3
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	b21c      	sxth	r4, r3
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	4623      	mov	r3, r4
 8001502:	f7ff f942 	bl	800078a <drawLine>
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3306      	adds	r3, #6
 800150a:	61fb      	str	r3, [r7, #28]
 800150c:	69fa      	ldr	r2, [r7, #28]
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	429a      	cmp	r2, r3
 8001512:	dbeb      	blt.n	80014ec <testLines+0xac>
    x2    = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
 800151c:	e00f      	b.n	800153e <testLines+0xfe>
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	b218      	sxth	r0, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	b219      	sxth	r1, r3
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	b21a      	sxth	r2, r3
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	b21c      	sxth	r4, r3
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	4623      	mov	r3, r4
 8001534:	f7ff f929 	bl	800078a <drawLine>
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	3306      	adds	r3, #6
 800153c:	61bb      	str	r3, [r7, #24]
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	429a      	cmp	r2, r3
 8001544:	dbeb      	blt.n	800151e <testLines+0xde>

    fillScreen(BLACK);
 8001546:	2000      	movs	r0, #0
 8001548:	f7ff ff60 	bl	800140c <fillScreen>

    x1    = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	3b01      	subs	r3, #1
 8001554:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
 800155e:	e00f      	b.n	8001580 <testLines+0x140>
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	b218      	sxth	r0, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	b219      	sxth	r1, r3
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	b21a      	sxth	r2, r3
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	b21c      	sxth	r4, r3
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	4623      	mov	r3, r4
 8001576:	f7ff f908 	bl	800078a <drawLine>
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3306      	adds	r3, #6
 800157e:	61fb      	str	r3, [r7, #28]
 8001580:	69fa      	ldr	r2, [r7, #28]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	429a      	cmp	r2, r3
 8001586:	dbeb      	blt.n	8001560 <testLines+0x120>
    x2    = w - 1;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	3b01      	subs	r3, #1
 800158c:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 800158e:	2300      	movs	r3, #0
 8001590:	61bb      	str	r3, [r7, #24]
 8001592:	e00f      	b.n	80015b4 <testLines+0x174>
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	b218      	sxth	r0, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	b219      	sxth	r1, r3
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	b21a      	sxth	r2, r3
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	b21c      	sxth	r4, r3
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	4623      	mov	r3, r4
 80015aa:	f7ff f8ee 	bl	800078a <drawLine>
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	3306      	adds	r3, #6
 80015b2:	61bb      	str	r3, [r7, #24]
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	dbeb      	blt.n	8001594 <testLines+0x154>

    fillScreen(BLACK);
 80015bc:	2000      	movs	r0, #0
 80015be:	f7ff ff25 	bl	800140c <fillScreen>

    x1    = w - 1;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
 80015d6:	e00f      	b.n	80015f8 <testLines+0x1b8>
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	b218      	sxth	r0, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	b219      	sxth	r1, r3
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	b21c      	sxth	r4, r3
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	4623      	mov	r3, r4
 80015ee:	f7ff f8cc 	bl	800078a <drawLine>
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3306      	adds	r3, #6
 80015f6:	61fb      	str	r3, [r7, #28]
 80015f8:	69fa      	ldr	r2, [r7, #28]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	dbeb      	blt.n	80015d8 <testLines+0x198>
    x2    = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8001604:	2300      	movs	r3, #0
 8001606:	61bb      	str	r3, [r7, #24]
 8001608:	e00f      	b.n	800162a <testLines+0x1ea>
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	b218      	sxth	r0, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	b219      	sxth	r1, r3
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	b21a      	sxth	r2, r3
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	b21c      	sxth	r4, r3
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	4623      	mov	r3, r4
 8001620:	f7ff f8b3 	bl	800078a <drawLine>
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	3306      	adds	r3, #6
 8001628:	61bb      	str	r3, [r7, #24]
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	429a      	cmp	r2, r3
 8001630:	dbeb      	blt.n	800160a <testLines+0x1ca>

}
 8001632:	bf00      	nop
 8001634:	bf00      	nop
 8001636:	3724      	adds	r7, #36	@ 0x24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd90      	pop	{r4, r7, pc}
 800163c:	200000ac 	.word	0x200000ac
 8001640:	200000ae 	.word	0x200000ae

08001644 <testFastLines>:

void testFastLines(uint16_t color1, uint16_t color2)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	460a      	mov	r2, r1
 800164e:	80fb      	strh	r3, [r7, #6]
 8001650:	4613      	mov	r3, r2
 8001652:	80bb      	strh	r3, [r7, #4]
    int           x, y, w = _width, h = _height;
 8001654:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <testFastLines+0x78>)
 8001656:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	4b18      	ldr	r3, [pc, #96]	@ (80016c0 <testFastLines+0x7c>)
 800165e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001662:	60bb      	str	r3, [r7, #8]

    fillScreen(BLACK);
 8001664:	2000      	movs	r0, #0
 8001666:	f7ff fed1 	bl	800140c <fillScreen>
    for (y = 0; y < h; y += 5) drawFastHLine(0, y, w, color1);
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	e00a      	b.n	8001686 <testFastLines+0x42>
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	b219      	sxth	r1, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	b21a      	sxth	r2, r3
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	2000      	movs	r0, #0
 800167c:	f7ff f860 	bl	8000740 <drawFastHLine>
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	3305      	adds	r3, #5
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	429a      	cmp	r2, r3
 800168c:	dbf0      	blt.n	8001670 <testFastLines+0x2c>
    for (x = 0; x < w; x += 5) drawFastVLine(x, 0, h, color2);
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	e00a      	b.n	80016aa <testFastLines+0x66>
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	b218      	sxth	r0, r3
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	b21a      	sxth	r2, r3
 800169c:	88bb      	ldrh	r3, [r7, #4]
 800169e:	2100      	movs	r1, #0
 80016a0:	f7ff f829 	bl	80006f6 <drawFastVLine>
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	3305      	adds	r3, #5
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	dbf0      	blt.n	8001694 <testFastLines+0x50>
}
 80016b2:	bf00      	nop
 80016b4:	bf00      	nop
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	200000ac 	.word	0x200000ac
 80016c0:	200000ae 	.word	0x200000ae

080016c4 <testRects>:

void testRects(uint16_t color)
{
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b08b      	sub	sp, #44	@ 0x2c
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	4603      	mov	r3, r0
 80016cc:	80fb      	strh	r3, [r7, #6]
    int           n, i, i2,
                  cx = _width  / 2,
 80016ce:	4b24      	ldr	r3, [pc, #144]	@ (8001760 <testRects+0x9c>)
 80016d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d4:	0fda      	lsrs	r2, r3, #31
 80016d6:	4413      	add	r3, r2
 80016d8:	105b      	asrs	r3, r3, #1
 80016da:	b21b      	sxth	r3, r3
 80016dc:	61bb      	str	r3, [r7, #24]
                  cy = _height / 2;
 80016de:	4b21      	ldr	r3, [pc, #132]	@ (8001764 <testRects+0xa0>)
 80016e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e4:	0fda      	lsrs	r2, r3, #31
 80016e6:	4413      	add	r3, r2
 80016e8:	105b      	asrs	r3, r3, #1
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	617b      	str	r3, [r7, #20]

    fillScreen(BLACK);
 80016ee:	2000      	movs	r0, #0
 80016f0:	f7ff fe8c 	bl	800140c <fillScreen>
    n     = min(_width, _height);
 80016f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <testRects+0xa0>)
 80016f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80016fa:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <testRects+0x9c>)
 80016fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001700:	4293      	cmp	r3, r2
 8001702:	bfa8      	it	ge
 8001704:	4613      	movge	r3, r2
 8001706:	b21b      	sxth	r3, r3
 8001708:	613b      	str	r3, [r7, #16]
    for (i = 2; i < n; i += 6) {
 800170a:	2302      	movs	r3, #2
 800170c:	61fb      	str	r3, [r7, #28]
 800170e:	e01e      	b.n	800174e <testRects+0x8a>
        i2 = i / 2;
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	0fda      	lsrs	r2, r3, #31
 8001714:	4413      	add	r3, r2
 8001716:	105b      	asrs	r3, r3, #1
 8001718:	60fb      	str	r3, [r7, #12]
        drawRect(cx - i2, cy - i2, i, i, color);
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	b29a      	uxth	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	b29b      	uxth	r3, r3
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	b29b      	uxth	r3, r3
 8001726:	b218      	sxth	r0, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	b29a      	uxth	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	b29b      	uxth	r3, r3
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	b29b      	uxth	r3, r3
 8001734:	b219      	sxth	r1, r3
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	b21a      	sxth	r2, r3
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	b21c      	sxth	r4, r3
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	4623      	mov	r3, r4
 8001744:	f7ff fb41 	bl	8000dca <drawRect>
    for (i = 2; i < n; i += 6) {
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	3306      	adds	r3, #6
 800174c:	61fb      	str	r3, [r7, #28]
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	429a      	cmp	r2, r3
 8001754:	dbdc      	blt.n	8001710 <testRects+0x4c>
    }

}
 8001756:	bf00      	nop
 8001758:	bf00      	nop
 800175a:	3724      	adds	r7, #36	@ 0x24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd90      	pop	{r4, r7, pc}
 8001760:	200000ac 	.word	0x200000ac
 8001764:	200000ae 	.word	0x200000ae

08001768 <testFilledRects>:

void testFilledRects(uint16_t color1, uint16_t color2)
{
 8001768:	b590      	push	{r4, r7, lr}
 800176a:	b08b      	sub	sp, #44	@ 0x2c
 800176c:	af02      	add	r7, sp, #8
 800176e:	4603      	mov	r3, r0
 8001770:	460a      	mov	r2, r1
 8001772:	80fb      	strh	r3, [r7, #6]
 8001774:	4613      	mov	r3, r2
 8001776:	80bb      	strh	r3, [r7, #4]
    int           n, i, i2,
                  cx = _width  / 2 - 1,
 8001778:	4b30      	ldr	r3, [pc, #192]	@ (800183c <testFilledRects+0xd4>)
 800177a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177e:	0fda      	lsrs	r2, r3, #31
 8001780:	4413      	add	r3, r2
 8001782:	105b      	asrs	r3, r3, #1
 8001784:	b21b      	sxth	r3, r3
 8001786:	3b01      	subs	r3, #1
 8001788:	61bb      	str	r3, [r7, #24]
                  cy = _height / 2 - 1;
 800178a:	4b2d      	ldr	r3, [pc, #180]	@ (8001840 <testFilledRects+0xd8>)
 800178c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001790:	0fda      	lsrs	r2, r3, #31
 8001792:	4413      	add	r3, r2
 8001794:	105b      	asrs	r3, r3, #1
 8001796:	b21b      	sxth	r3, r3
 8001798:	3b01      	subs	r3, #1
 800179a:	617b      	str	r3, [r7, #20]

    fillScreen(BLACK);
 800179c:	2000      	movs	r0, #0
 800179e:	f7ff fe35 	bl	800140c <fillScreen>
    n = min(_width, _height);
 80017a2:	4b27      	ldr	r3, [pc, #156]	@ (8001840 <testFilledRects+0xd8>)
 80017a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80017a8:	4b24      	ldr	r3, [pc, #144]	@ (800183c <testFilledRects+0xd4>)
 80017aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ae:	4293      	cmp	r3, r2
 80017b0:	bfa8      	it	ge
 80017b2:	4613      	movge	r3, r2
 80017b4:	b21b      	sxth	r3, r3
 80017b6:	613b      	str	r3, [r7, #16]
    for (i = n; i > 0; i -= 6) {
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	61fb      	str	r3, [r7, #28]
 80017bc:	e035      	b.n	800182a <testFilledRects+0xc2>
        i2    = i / 2;
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	0fda      	lsrs	r2, r3, #31
 80017c2:	4413      	add	r3, r2
 80017c4:	105b      	asrs	r3, r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]

        fillRect(cx - i2, cy - i2, i, i, color1);
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	b218      	sxth	r0, r3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	b29a      	uxth	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	b29b      	uxth	r3, r3
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	b219      	sxth	r1, r3
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	b21a      	sxth	r2, r3
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	b21c      	sxth	r4, r3
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	4623      	mov	r3, r4
 80017f2:	f7fe fea5 	bl	8000540 <fillRect>

        drawRect(cx - i2, cy - i2, i, i, color2);
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	b29b      	uxth	r3, r3
 8001802:	b218      	sxth	r0, r3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	b29a      	uxth	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	b29b      	uxth	r3, r3
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	b29b      	uxth	r3, r3
 8001810:	b219      	sxth	r1, r3
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	b21a      	sxth	r2, r3
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	b21c      	sxth	r4, r3
 800181a:	88bb      	ldrh	r3, [r7, #4]
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	4623      	mov	r3, r4
 8001820:	f7ff fad3 	bl	8000dca <drawRect>
    for (i = n; i > 0; i -= 6) {
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	3b06      	subs	r3, #6
 8001828:	61fb      	str	r3, [r7, #28]
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	2b00      	cmp	r3, #0
 800182e:	dcc6      	bgt.n	80017be <testFilledRects+0x56>
    }
}
 8001830:	bf00      	nop
 8001832:	bf00      	nop
 8001834:	3724      	adds	r7, #36	@ 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd90      	pop	{r4, r7, pc}
 800183a:	bf00      	nop
 800183c:	200000ac 	.word	0x200000ac
 8001840:	200000ae 	.word	0x200000ae

08001844 <testFilledCircles>:

void testFilledCircles(uint8_t radius, uint16_t color)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	460a      	mov	r2, r1
 800184e:	71fb      	strb	r3, [r7, #7]
 8001850:	4613      	mov	r3, r2
 8001852:	80bb      	strh	r3, [r7, #4]
    int x, y, w = _width, h = _height, r2 = radius * 2;
 8001854:	4b18      	ldr	r3, [pc, #96]	@ (80018b8 <testFilledCircles+0x74>)
 8001856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	4b17      	ldr	r3, [pc, #92]	@ (80018bc <testFilledCircles+0x78>)
 800185e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	60fb      	str	r3, [r7, #12]

    fillScreen(BLACK);
 800186a:	2000      	movs	r0, #0
 800186c:	f7ff fdce 	bl	800140c <fillScreen>
    for (x = radius; x < w; x += r2) {
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	61fb      	str	r3, [r7, #28]
 8001874:	e017      	b.n	80018a6 <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	61bb      	str	r3, [r7, #24]
 800187a:	e00c      	b.n	8001896 <testFilledCircles+0x52>
            fillCircle(x, y, radius, color);
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	b218      	sxth	r0, r3
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	b219      	sxth	r1, r3
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	b21a      	sxth	r2, r3
 8001888:	88bb      	ldrh	r3, [r7, #4]
 800188a:	f7ff fa6e 	bl	8000d6a <fillCircle>
        for (y = radius; y < h; y += r2) {
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4413      	add	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	429a      	cmp	r2, r3
 800189c:	dbee      	blt.n	800187c <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4413      	add	r3, r2
 80018a4:	61fb      	str	r3, [r7, #28]
 80018a6:	69fa      	ldr	r2, [r7, #28]
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	dbe3      	blt.n	8001876 <testFilledCircles+0x32>
        }
    }

}
 80018ae:	bf00      	nop
 80018b0:	bf00      	nop
 80018b2:	3720      	adds	r7, #32
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200000ac 	.word	0x200000ac
 80018bc:	200000ae 	.word	0x200000ae

080018c0 <testCircles>:

void testCircles(uint8_t radius, uint16_t color)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	460a      	mov	r2, r1
 80018ca:	71fb      	strb	r3, [r7, #7]
 80018cc:	4613      	mov	r3, r2
 80018ce:	80bb      	strh	r3, [r7, #4]
    int           x, y, r2 = radius * 2,
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
                        w = _width  + radius,
 80018d6:	4b19      	ldr	r3, [pc, #100]	@ (800193c <testCircles+0x7c>)
 80018d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018dc:	461a      	mov	r2, r3
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	4413      	add	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
                        h = _height + radius;
 80018e4:	4b16      	ldr	r3, [pc, #88]	@ (8001940 <testCircles+0x80>)
 80018e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ea:	461a      	mov	r2, r3
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	4413      	add	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]

    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	e017      	b.n	8001928 <testCircles+0x68>
        for (y = 0; y < h; y += r2) {
 80018f8:	2300      	movs	r3, #0
 80018fa:	61bb      	str	r3, [r7, #24]
 80018fc:	e00c      	b.n	8001918 <testCircles+0x58>
            drawCircle(x, y, radius, color);
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	b218      	sxth	r0, r3
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	b219      	sxth	r1, r3
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	b21a      	sxth	r2, r3
 800190a:	88bb      	ldrh	r3, [r7, #4]
 800190c:	f7fe ff9f 	bl	800084e <drawCircle>
        for (y = 0; y < h; y += r2) {
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	4413      	add	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	429a      	cmp	r2, r3
 800191e:	dbee      	blt.n	80018fe <testCircles+0x3e>
    for (x = 0; x < w; x += r2) {
 8001920:	69fa      	ldr	r2, [r7, #28]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	4413      	add	r3, r2
 8001926:	61fb      	str	r3, [r7, #28]
 8001928:	69fa      	ldr	r2, [r7, #28]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	429a      	cmp	r2, r3
 800192e:	dbe3      	blt.n	80018f8 <testCircles+0x38>
        }
    }

}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	3720      	adds	r7, #32
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200000ac 	.word	0x200000ac
 8001940:	200000ae 	.word	0x200000ae

08001944 <testTriangles>:

void testTriangles()
{
 8001944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001946:	b089      	sub	sp, #36	@ 0x24
 8001948:	af04      	add	r7, sp, #16
    int           n, i, cx = _width  / 2 - 1,
 800194a:	4b2e      	ldr	r3, [pc, #184]	@ (8001a04 <testTriangles+0xc0>)
 800194c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001950:	0fda      	lsrs	r2, r3, #31
 8001952:	4413      	add	r3, r2
 8001954:	105b      	asrs	r3, r3, #1
 8001956:	b21b      	sxth	r3, r3
 8001958:	3b01      	subs	r3, #1
 800195a:	60bb      	str	r3, [r7, #8]
                        cy = _height / 2 - 1;
 800195c:	4b2a      	ldr	r3, [pc, #168]	@ (8001a08 <testTriangles+0xc4>)
 800195e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001962:	0fda      	lsrs	r2, r3, #31
 8001964:	4413      	add	r3, r2
 8001966:	105b      	asrs	r3, r3, #1
 8001968:	b21b      	sxth	r3, r3
 800196a:	3b01      	subs	r3, #1
 800196c:	607b      	str	r3, [r7, #4]

    fillScreen(BLACK);
 800196e:	2000      	movs	r0, #0
 8001970:	f7ff fd4c 	bl	800140c <fillScreen>
    n     = min(cx, cy);
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	4293      	cmp	r3, r2
 800197a:	bfa8      	it	ge
 800197c:	4613      	movge	r3, r2
 800197e:	603b      	str	r3, [r7, #0]
    for (i = 0; i < n; i += 5) {
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	e035      	b.n	80019f2 <testTriangles+0xae>
        drawTriangle(
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	b218      	sxth	r0, r3
            cx    , cy - i, // peak
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	b29a      	uxth	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	b29b      	uxth	r3, r3
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	b29b      	uxth	r3, r3
        drawTriangle(
 8001996:	b21c      	sxth	r4, r3
            cx - i, cy + i, // bottom left
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	b29a      	uxth	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	b29b      	uxth	r3, r3
        drawTriangle(
 80019a4:	b21d      	sxth	r5, r3
            cx - i, cy + i, // bottom left
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	4413      	add	r3, r2
 80019b0:	b29b      	uxth	r3, r3
        drawTriangle(
 80019b2:	b21e      	sxth	r6, r3
            cx + i, cy + i, // bottom right
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	4413      	add	r3, r2
 80019be:	b29b      	uxth	r3, r3
        drawTriangle(
 80019c0:	b21b      	sxth	r3, r3
            cx + i, cy + i, // bottom right
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	b291      	uxth	r1, r2
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	b292      	uxth	r2, r2
 80019ca:	440a      	add	r2, r1
 80019cc:	b292      	uxth	r2, r2
        drawTriangle(
 80019ce:	b212      	sxth	r2, r2
            color565(0, 0, i));
 80019d0:	68f9      	ldr	r1, [r7, #12]
 80019d2:	10c9      	asrs	r1, r1, #3
 80019d4:	b289      	uxth	r1, r1
        drawTriangle(
 80019d6:	f001 011f 	and.w	r1, r1, #31
 80019da:	b289      	uxth	r1, r1
 80019dc:	9102      	str	r1, [sp, #8]
 80019de:	9201      	str	r2, [sp, #4]
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	4633      	mov	r3, r6
 80019e4:	462a      	mov	r2, r5
 80019e6:	4621      	mov	r1, r4
 80019e8:	f7ff fb76 	bl	80010d8 <drawTriangle>
    for (i = 0; i < n; i += 5) {
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	3305      	adds	r3, #5
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	dbc5      	blt.n	8001986 <testTriangles+0x42>
    }

}
 80019fa:	bf00      	nop
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a04:	200000ac 	.word	0x200000ac
 8001a08:	200000ae 	.word	0x200000ae

08001a0c <testFilledTriangles>:

void testFilledTriangles() {
 8001a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a0e:	b089      	sub	sp, #36	@ 0x24
 8001a10:	af04      	add	r7, sp, #16
    int           i, cx = _width  / 2 - 1,
 8001a12:	4b54      	ldr	r3, [pc, #336]	@ (8001b64 <testFilledTriangles+0x158>)
 8001a14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a18:	0fda      	lsrs	r2, r3, #31
 8001a1a:	4413      	add	r3, r2
 8001a1c:	105b      	asrs	r3, r3, #1
 8001a1e:	b21b      	sxth	r3, r3
 8001a20:	3b01      	subs	r3, #1
 8001a22:	60bb      	str	r3, [r7, #8]
                     cy = _height / 2 - 1;
 8001a24:	4b50      	ldr	r3, [pc, #320]	@ (8001b68 <testFilledTriangles+0x15c>)
 8001a26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a2a:	0fda      	lsrs	r2, r3, #31
 8001a2c:	4413      	add	r3, r2
 8001a2e:	105b      	asrs	r3, r3, #1
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	3b01      	subs	r3, #1
 8001a34:	607b      	str	r3, [r7, #4]

    fillScreen(BLACK);
 8001a36:	2000      	movs	r0, #0
 8001a38:	f7ff fce8 	bl	800140c <fillScreen>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	4293      	cmp	r3, r2
 8001a42:	bfa8      	it	ge
 8001a44:	4613      	movge	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	e083      	b.n	8001b52 <testFilledTriangles+0x146>
    	fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	b21c      	sxth	r4, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	b21d      	sxth	r5, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	b21e      	sxth	r6, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	4413      	add	r3, r2
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	fa0f fc83 	sxth.w	ip, r3
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	b21b      	sxth	r3, r3
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	b291      	uxth	r1, r2
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	b292      	uxth	r2, r2
 8001a90:	440a      	add	r2, r1
 8001a92:	b292      	uxth	r2, r2
 8001a94:	b212      	sxth	r2, r2
    	                         color565(0, i, i));
 8001a96:	68f9      	ldr	r1, [r7, #12]
 8001a98:	b209      	sxth	r1, r1
 8001a9a:	00c9      	lsls	r1, r1, #3
 8001a9c:	b209      	sxth	r1, r1
 8001a9e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8001aa2:	b208      	sxth	r0, r1
 8001aa4:	68f9      	ldr	r1, [r7, #12]
 8001aa6:	10c9      	asrs	r1, r1, #3
 8001aa8:	b209      	sxth	r1, r1
 8001aaa:	f001 011f 	and.w	r1, r1, #31
 8001aae:	b209      	sxth	r1, r1
 8001ab0:	4301      	orrs	r1, r0
 8001ab2:	b209      	sxth	r1, r1
    	fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 8001ab4:	b289      	uxth	r1, r1
 8001ab6:	9102      	str	r1, [sp, #8]
 8001ab8:	9201      	str	r2, [sp, #4]
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	4663      	mov	r3, ip
 8001abe:	4632      	mov	r2, r6
 8001ac0:	4629      	mov	r1, r5
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	f7ff fb42 	bl	800114c <fillTriangle>
    	drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	b21c      	sxth	r4, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	b21d      	sxth	r5, r3
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	b21e      	sxth	r6, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	4413      	add	r3, r2
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	fa0f fc83 	sxth.w	ip, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	b21a      	sxth	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	b299      	uxth	r1, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	440b      	add	r3, r1
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	b219      	sxth	r1, r3
    	                         color565(i, i, 0));
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	021b      	lsls	r3, r3, #8
 8001b1a:	b21b      	sxth	r3, r3
 8001b1c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001b20:	f023 0307 	bic.w	r3, r3, #7
 8001b24:	b218      	sxth	r0, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	b21b      	sxth	r3, r3
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	b21b      	sxth	r3, r3
 8001b2e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8001b32:	b21b      	sxth	r3, r3
 8001b34:	4303      	orrs	r3, r0
 8001b36:	b21b      	sxth	r3, r3
    	drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	9302      	str	r3, [sp, #8]
 8001b3c:	9101      	str	r1, [sp, #4]
 8001b3e:	9200      	str	r2, [sp, #0]
 8001b40:	4663      	mov	r3, ip
 8001b42:	4632      	mov	r2, r6
 8001b44:	4629      	mov	r1, r5
 8001b46:	4620      	mov	r0, r4
 8001b48:	f7ff fac6 	bl	80010d8 <drawTriangle>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	3b05      	subs	r3, #5
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b0a      	cmp	r3, #10
 8001b56:	f73f af78 	bgt.w	8001a4a <testFilledTriangles+0x3e>
    }
}
 8001b5a:	bf00      	nop
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b64:	200000ac 	.word	0x200000ac
 8001b68:	200000ae 	.word	0x200000ae

08001b6c <testRoundRects>:

void testRoundRects() {
 8001b6c:	b5b0      	push	{r4, r5, r7, lr}
 8001b6e:	b08a      	sub	sp, #40	@ 0x28
 8001b70:	af02      	add	r7, sp, #8
    int           w, i, i2, red, step,
                  cx = _width  / 2 - 1,
 8001b72:	4b33      	ldr	r3, [pc, #204]	@ (8001c40 <testRoundRects+0xd4>)
 8001b74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b78:	0fda      	lsrs	r2, r3, #31
 8001b7a:	4413      	add	r3, r2
 8001b7c:	105b      	asrs	r3, r3, #1
 8001b7e:	b21b      	sxth	r3, r3
 8001b80:	3b01      	subs	r3, #1
 8001b82:	617b      	str	r3, [r7, #20]
                  cy = _height / 2 - 1;
 8001b84:	4b2f      	ldr	r3, [pc, #188]	@ (8001c44 <testRoundRects+0xd8>)
 8001b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b8a:	0fda      	lsrs	r2, r3, #31
 8001b8c:	4413      	add	r3, r2
 8001b8e:	105b      	asrs	r3, r3, #1
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	3b01      	subs	r3, #1
 8001b94:	613b      	str	r3, [r7, #16]

    fillScreen(BLACK);
 8001b96:	2000      	movs	r0, #0
 8001b98:	f7ff fc38 	bl	800140c <fillScreen>
    w     = min(_width, _height);
 8001b9c:	4b29      	ldr	r3, [pc, #164]	@ (8001c44 <testRoundRects+0xd8>)
 8001b9e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ba2:	4b27      	ldr	r3, [pc, #156]	@ (8001c40 <testRoundRects+0xd4>)
 8001ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	bfa8      	it	ge
 8001bac:	4613      	movge	r3, r2
 8001bae:	b21b      	sxth	r3, r3
 8001bb0:	60fb      	str	r3, [r7, #12]
    red = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
    step = (256 * 6) / w;
 8001bb6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bc0:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < w; i += 6) {
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
 8001bc6:	e032      	b.n	8001c2e <testRoundRects+0xc2>
        i2 = i / 2;
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	0fda      	lsrs	r2, r3, #31
 8001bcc:	4413      	add	r3, r2
 8001bce:	105b      	asrs	r3, r3, #1
 8001bd0:	607b      	str	r3, [r7, #4]
        red += step;
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        drawRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(red, 0, 0));
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	b218      	sxth	r0, r3
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	b219      	sxth	r1, r3
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	b21c      	sxth	r4, r3
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	b21d      	sxth	r5, r3
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	da00      	bge.n	8001c06 <testRoundRects+0x9a>
 8001c04:	3307      	adds	r3, #7
 8001c06:	10db      	asrs	r3, r3, #3
 8001c08:	b21a      	sxth	r2, r3
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001c16:	f023 0307 	bic.w	r3, r3, #7
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	9301      	str	r3, [sp, #4]
 8001c1e:	9200      	str	r2, [sp, #0]
 8001c20:	462b      	mov	r3, r5
 8001c22:	4622      	mov	r2, r4
 8001c24:	f7ff f912 	bl	8000e4c <drawRoundRect>
    for (i = 0; i < w; i += 6) {
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	3306      	adds	r3, #6
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	69fa      	ldr	r2, [r7, #28]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	dbc8      	blt.n	8001bc8 <testRoundRects+0x5c>
    }

}
 8001c36:	bf00      	nop
 8001c38:	bf00      	nop
 8001c3a:	3720      	adds	r7, #32
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c40:	200000ac 	.word	0x200000ac
 8001c44:	200000ae 	.word	0x200000ae

08001c48 <testFilledRoundRects>:

void testFilledRoundRects() {
 8001c48:	b5b0      	push	{r4, r5, r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af02      	add	r7, sp, #8
    int           i, i2, green, step,
                  cx = _width  / 2 - 1,
 8001c4e:	4b36      	ldr	r3, [pc, #216]	@ (8001d28 <testFilledRoundRects+0xe0>)
 8001c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c54:	0fda      	lsrs	r2, r3, #31
 8001c56:	4413      	add	r3, r2
 8001c58:	105b      	asrs	r3, r3, #1
 8001c5a:	b21b      	sxth	r3, r3
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	60fb      	str	r3, [r7, #12]
                  cy = _height / 2 - 1;
 8001c60:	4b32      	ldr	r3, [pc, #200]	@ (8001d2c <testFilledRoundRects+0xe4>)
 8001c62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c66:	0fda      	lsrs	r2, r3, #31
 8001c68:	4413      	add	r3, r2
 8001c6a:	105b      	asrs	r3, r3, #1
 8001c6c:	b21b      	sxth	r3, r3
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	60bb      	str	r3, [r7, #8]

    fillScreen(BLACK);
 8001c72:	2000      	movs	r0, #0
 8001c74:	f7ff fbca 	bl	800140c <fillScreen>
    green = 256;
 8001c78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c7c:	613b      	str	r3, [r7, #16]
    step = (256 * 6) / min(_width, _height);
 8001c7e:	4b2b      	ldr	r3, [pc, #172]	@ (8001d2c <testFilledRoundRects+0xe4>)
 8001c80:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c84:	4b28      	ldr	r3, [pc, #160]	@ (8001d28 <testFilledRoundRects+0xe0>)
 8001c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	bfa8      	it	ge
 8001c8e:	4613      	movge	r3, r2
 8001c90:	b21b      	sxth	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001c98:	fb93 f3f2 	sdiv	r3, r3, r2
 8001c9c:	607b      	str	r3, [r7, #4]
    for (i = min(_width, _height); i > 20; i -= 6) {
 8001c9e:	4b23      	ldr	r3, [pc, #140]	@ (8001d2c <testFilledRoundRects+0xe4>)
 8001ca0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ca4:	4b20      	ldr	r3, [pc, #128]	@ (8001d28 <testFilledRoundRects+0xe0>)
 8001ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001caa:	4293      	cmp	r3, r2
 8001cac:	bfa8      	it	ge
 8001cae:	4613      	movge	r3, r2
 8001cb0:	b21b      	sxth	r3, r3
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	e030      	b.n	8001d18 <testFilledRoundRects+0xd0>
        i2 = i / 2;
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	0fda      	lsrs	r2, r3, #31
 8001cba:	4413      	add	r3, r2
 8001cbc:	105b      	asrs	r3, r3, #1
 8001cbe:	603b      	str	r3, [r7, #0]
        green -= step;
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	613b      	str	r3, [r7, #16]
        fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	b218      	sxth	r0, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	b219      	sxth	r1, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	b21c      	sxth	r4, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	b21d      	sxth	r5, r3
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	da00      	bge.n	8001cf4 <testFilledRoundRects+0xac>
 8001cf2:	3307      	adds	r3, #7
 8001cf4:	10db      	asrs	r3, r3, #3
 8001cf6:	b21b      	sxth	r3, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	b292      	uxth	r2, r2
 8001cfc:	00d2      	lsls	r2, r2, #3
 8001cfe:	b292      	uxth	r2, r2
 8001d00:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8001d04:	b292      	uxth	r2, r2
 8001d06:	9201      	str	r2, [sp, #4]
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	462b      	mov	r3, r5
 8001d0c:	4622      	mov	r2, r4
 8001d0e:	f7ff f96a 	bl	8000fe6 <fillRoundRect>
    for (i = min(_width, _height); i > 20; i -= 6) {
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	3b06      	subs	r3, #6
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	2b14      	cmp	r3, #20
 8001d1c:	dccb      	bgt.n	8001cb6 <testFilledRoundRects+0x6e>
    }

}
 8001d1e:	bf00      	nop
 8001d20:	bf00      	nop
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bdb0      	pop	{r4, r5, r7, pc}
 8001d28:	200000ac 	.word	0x200000ac
 8001d2c:	200000ae 	.word	0x200000ae

08001d30 <testFillScreen>:
void testFillScreen()
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
    fillScreen(BLACK);
 8001d34:	2000      	movs	r0, #0
 8001d36:	f7ff fb69 	bl	800140c <fillScreen>
    fillScreen(RED);
 8001d3a:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001d3e:	f7ff fb65 	bl	800140c <fillScreen>
    fillScreen(GREEN);
 8001d42:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8001d46:	f7ff fb61 	bl	800140c <fillScreen>
    fillScreen(BLUE);
 8001d4a:	201f      	movs	r0, #31
 8001d4c:	f7ff fb5e 	bl	800140c <fillScreen>
    fillScreen(BLACK);
 8001d50:	2000      	movs	r0, #0
 8001d52:	f7ff fb5b 	bl	800140c <fillScreen>
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <testAll>:

void testAll (void)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	af00      	add	r7, sp, #0
	testFillScreen();
 8001d5e:	f7ff ffe7 	bl	8001d30 <testFillScreen>
	testLines(CYAN);
 8001d62:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 8001d66:	f7ff fb6b 	bl	8001440 <testLines>
	testFastLines(RED, BLUE);
 8001d6a:	211f      	movs	r1, #31
 8001d6c:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001d70:	f7ff fc68 	bl	8001644 <testFastLines>
	testRects(GREEN);
 8001d74:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8001d78:	f7ff fca4 	bl	80016c4 <testRects>
	testFilledRects(YELLOW, MAGENTA);
 8001d7c:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 8001d80:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8001d84:	f7ff fcf0 	bl	8001768 <testFilledRects>
	testFilledCircles(10, MAGENTA);
 8001d88:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 8001d8c:	200a      	movs	r0, #10
 8001d8e:	f7ff fd59 	bl	8001844 <testFilledCircles>
	testCircles(10, WHITE);
 8001d92:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001d96:	200a      	movs	r0, #10
 8001d98:	f7ff fd92 	bl	80018c0 <testCircles>
	testTriangles();
 8001d9c:	f7ff fdd2 	bl	8001944 <testTriangles>
	testFilledTriangles();
 8001da0:	f7ff fe34 	bl	8001a0c <testFilledTriangles>
	testRoundRects();
 8001da4:	f7ff fee2 	bl	8001b6c <testRoundRects>
	testFilledRoundRects();
 8001da8:	f7ff ff4e 	bl	8001c48 <testFilledRoundRects>
}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_SPI_ErrorCallback>:
//	         spi_ready = 1;  // if you're using a flagc
//	         //HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
//	     }
// }

 void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
     if (hspi->Instance == ST7735_SPI_PORT.Instance) {
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b12      	ldr	r3, [pc, #72]	@ (8001e08 <HAL_SPI_ErrorCallback+0x58>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d11c      	bne.n	8001dfe <HAL_SPI_ErrorCallback+0x4e>
         // Clean up DMA state on error
         if (dma_buffer != NULL) {
 8001dc4:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <HAL_SPI_ErrorCallback+0x5c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00a      	beq.n	8001de2 <HAL_SPI_ErrorCallback+0x32>
             free(dma_buffer);
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e0c <HAL_SPI_ErrorCallback+0x5c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f006 ffaf 	bl	8008d34 <free>
             dma_buffer = NULL;
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e0c <HAL_SPI_ErrorCallback+0x5c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
             dma_buffer_size = 0;
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e10 <HAL_SPI_ErrorCallback+0x60>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
         }
         ST7735_Unselect();
 8001de2:	f000 f87d 	bl	8001ee0 <ST7735_Unselect>
         spi_ready = 1;
 8001de6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e14 <HAL_SPI_ErrorCallback+0x64>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
         dma_active = 0;
 8001dec:	4b0a      	ldr	r3, [pc, #40]	@ (8001e18 <HAL_SPI_ErrorCallback+0x68>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]

         // Optional: Reset SPI peripheral if needed
         HAL_SPI_DeInit(&ST7735_SPI_PORT);
 8001df2:	4805      	ldr	r0, [pc, #20]	@ (8001e08 <HAL_SPI_ErrorCallback+0x58>)
 8001df4:	f004 f89f 	bl	8005f36 <HAL_SPI_DeInit>
         HAL_SPI_Init(&ST7735_SPI_PORT);
 8001df8:	4803      	ldr	r0, [pc, #12]	@ (8001e08 <HAL_SPI_ErrorCallback+0x58>)
 8001dfa:	f003 fff9 	bl	8005df0 <HAL_SPI_Init>
     }
 }
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200001a8 	.word	0x200001a8
 8001e0c:	200000b8 	.word	0x200000b8
 8001e10:	200000bc 	.word	0x200000bc
 8001e14:	20000000 	.word	0x20000000
 8001e18:	200000b5 	.word	0x200000b5

08001e1c <HAL_SPI_TxCpltCallback>:

 void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
     if (hspi->Instance == ST7735_SPI_PORT.Instance) {
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b0f      	ldr	r3, [pc, #60]	@ (8001e68 <HAL_SPI_TxCpltCallback+0x4c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d116      	bne.n	8001e5e <HAL_SPI_TxCpltCallback+0x42>
         // Free the previous DMA buffer if it exists
         if (dma_buffer != NULL) {
 8001e30:	4b0e      	ldr	r3, [pc, #56]	@ (8001e6c <HAL_SPI_TxCpltCallback+0x50>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00a      	beq.n	8001e4e <HAL_SPI_TxCpltCallback+0x32>
             free(dma_buffer);
 8001e38:	4b0c      	ldr	r3, [pc, #48]	@ (8001e6c <HAL_SPI_TxCpltCallback+0x50>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f006 ff79 	bl	8008d34 <free>
             dma_buffer = NULL;
 8001e42:	4b0a      	ldr	r3, [pc, #40]	@ (8001e6c <HAL_SPI_TxCpltCallback+0x50>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
             dma_buffer_size = 0;
 8001e48:	4b09      	ldr	r3, [pc, #36]	@ (8001e70 <HAL_SPI_TxCpltCallback+0x54>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
         }

         ST7735_Unselect();
 8001e4e:	f000 f847 	bl	8001ee0 <ST7735_Unselect>
         spi_ready = 1;      // SPI is now ready
 8001e52:	4b08      	ldr	r3, [pc, #32]	@ (8001e74 <HAL_SPI_TxCpltCallback+0x58>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]
         dma_active = 0;     // DMA is no longer active
 8001e58:	4b07      	ldr	r3, [pc, #28]	@ (8001e78 <HAL_SPI_TxCpltCallback+0x5c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]
     }
 }
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	200001a8 	.word	0x200001a8
 8001e6c:	200000b8 	.word	0x200000b8
 8001e70:	200000bc 	.word	0x200000bc
 8001e74:	20000000 	.word	0x20000000
 8001e78:	200000b5 	.word	0x200000b5

08001e7c <ST7735_WaitForDMA>:
//          dma_busy = 0;
//          // Optionally trigger next transfer here
//      }
//  }

 void ST7735_WaitForDMA(void) {
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
     uint32_t timeout = 1000;  // Reasonable timeout
 8001e82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e86:	607b      	str	r3, [r7, #4]
     while(dma_active && timeout--) {
 8001e88:	e000      	b.n	8001e8c <ST7735_WaitForDMA+0x10>
         __NOP();  // Wait or yield to RTOS if you're using one
 8001e8a:	bf00      	nop
     while(dma_active && timeout--) {
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec0 <ST7735_WaitForDMA+0x44>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d004      	beq.n	8001ea0 <ST7735_WaitForDMA+0x24>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	1e5a      	subs	r2, r3, #1
 8001e9a:	607a      	str	r2, [r7, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f4      	bne.n	8001e8a <ST7735_WaitForDMA+0xe>
     }
     if (timeout == 0) {
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d105      	bne.n	8001eb2 <ST7735_WaitForDMA+0x36>
         // Handle timeout error
         dma_active = 0;
 8001ea6:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <ST7735_WaitForDMA+0x44>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
         spi_ready = 1;
 8001eac:	4b05      	ldr	r3, [pc, #20]	@ (8001ec4 <ST7735_WaitForDMA+0x48>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
     }
 }
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	200000b5 	.word	0x200000b5
 8001ec4:	20000000 	.word	0x20000000

08001ec8 <ST7735_Select>:


void ST7735_Select()
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);//to select the LCD and start the communication CS=0
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ed2:	4802      	ldr	r0, [pc, #8]	@ (8001edc <ST7735_Select+0x14>)
 8001ed4:	f002 fbde 	bl	8004694 <HAL_GPIO_WritePin>
}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	48000c00 	.word	0x48000c00

08001ee0 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);//to deselect the LCD set CS=1
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001eea:	4802      	ldr	r0, [pc, #8]	@ (8001ef4 <ST7735_Unselect+0x14>)
 8001eec:	f002 fbd2 	bl	8004694 <HAL_GPIO_WritePin>
}
 8001ef0:	bf00      	nop
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	48000c00 	.word	0x48000c00

08001ef8 <ST7735_Reset>:

void ST7735_Reset()
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);//first reset =0
 8001efc:	2200      	movs	r2, #0
 8001efe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f02:	4807      	ldr	r0, [pc, #28]	@ (8001f20 <ST7735_Reset+0x28>)
 8001f04:	f002 fbc6 	bl	8004694 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001f08:	2005      	movs	r0, #5
 8001f0a:	f001 fb65 	bl	80035d8 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);//reset=1
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f14:	4802      	ldr	r0, [pc, #8]	@ (8001f20 <ST7735_Reset+0x28>)
 8001f16:	f002 fbbd 	bl	8004694 <HAL_GPIO_WritePin>
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	48000c00 	.word	0x48000c00

08001f24 <ST7735_WriteCommand>:
//    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);//to send data DC=1
//    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size,HAL_MAX_DELAY);
//	//HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
//
//}
void ST7735_WriteCommand(uint8_t cmd) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
    ST7735_WaitForDMA();  // Wait for any DMA to complete
 8001f2e:	f7ff ffa5 	bl	8001e7c <ST7735_WaitForDMA>

    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8001f32:	2200      	movs	r2, #0
 8001f34:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f38:	4806      	ldr	r0, [pc, #24]	@ (8001f54 <ST7735_WriteCommand+0x30>)
 8001f3a:	f002 fbab 	bl	8004694 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, 1, HAL_MAX_DELAY);
 8001f3e:	1df9      	adds	r1, r7, #7
 8001f40:	f04f 33ff 	mov.w	r3, #4294967295
 8001f44:	2201      	movs	r2, #1
 8001f46:	4804      	ldr	r0, [pc, #16]	@ (8001f58 <ST7735_WriteCommand+0x34>)
 8001f48:	f004 f81d 	bl	8005f86 <HAL_SPI_Transmit>
}
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	48001400 	.word	0x48001400
 8001f58:	200001a8 	.word	0x200001a8

08001f5c <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
    ST7735_WaitForDMA();  // Wait for any DMA to complete
 8001f66:	f7ff ff89 	bl	8001e7c <ST7735_WaitForDMA>

    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f70:	4807      	ldr	r0, [pc, #28]	@ (8001f90 <ST7735_WriteData+0x34>)
 8001f72:	f002 fb8f 	bl	8004694 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4804      	ldr	r0, [pc, #16]	@ (8001f94 <ST7735_WriteData+0x38>)
 8001f82:	f004 f800 	bl	8005f86 <HAL_SPI_Transmit>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	48001400 	.word	0x48001400
 8001f94:	200001a8 	.word	0x200001a8

08001f98 <DisplayInit>:

void DisplayInit(const uint8_t *addr)//the pointer that points to the series of commands which has the list of commands,arguments total, arguments,optional delay
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;//the number of command is stored in numCommand and the pointer is incremented
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	1c5a      	adds	r2, r3, #1
 8001fa4:	607a      	str	r2, [r7, #4]
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {// the while loop will follow with command is decremented until total commands is zero
 8001faa:	e034      	b.n	8002016 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;//cmd stores the command and pointer is updated
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	1c5a      	adds	r2, r3, #1
 8001fb0:	607a      	str	r2, [r7, #4]
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);//the command is sent via SPI_DMA
 8001fb6:	7afb      	ldrb	r3, [r7, #11]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ffb3 	bl	8001f24 <ST7735_WriteCommand>

        numArgs = *addr++;//the pointer stores the number of arguments and increments
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	1c5a      	adds	r2, r3, #1
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;//if the delay is calculated by taking AND of number of argument and delay
 8001fc8:	7abb      	ldrb	r3, [r7, #10]
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fd0:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;//if delay is same the num argument and the invert of DELAY AND will give zero
 8001fd2:	7abb      	ldrb	r3, [r7, #10]
 8001fd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fd8:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {//if it is more then 1 write the arguments
 8001fda:	7abb      	ldrb	r3, [r7, #10]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);//send the buffer and buffer's size
 8001fe0:	7abb      	ldrb	r3, [r7, #10]
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff ffb9 	bl	8001f5c <ST7735_WriteData>
            addr += numArgs;//adder pointer is added by numArgs
 8001fea:	7abb      	ldrb	r3, [r7, #10]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	4413      	add	r3, r2
 8001ff0:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001ff2:	89bb      	ldrh	r3, [r7, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00e      	beq.n	8002016 <DisplayInit+0x7e>
            ms = *addr++;//the pointer is pointed in ms then incremented
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	607a      	str	r2, [r7, #4]
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;//if the ms is 25 update it to 500
 8002002:	89bb      	ldrh	r3, [r7, #12]
 8002004:	2bff      	cmp	r3, #255	@ 0xff
 8002006:	d102      	bne.n	800200e <DisplayInit+0x76>
 8002008:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800200c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800200e:	89bb      	ldrh	r3, [r7, #12]
 8002010:	4618      	mov	r0, r3
 8002012:	f001 fae1 	bl	80035d8 <HAL_Delay>
    while(numCommands--) {// the while loop will follow with command is decremented until total commands is zero
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	1e5a      	subs	r2, r3, #1
 800201a:	73fa      	strb	r2, [r7, #15]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1c5      	bne.n	8001fac <DisplayInit+0x14>
        }
    }
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 800202c:	b590      	push	{r4, r7, lr}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	4604      	mov	r4, r0
 8002034:	4608      	mov	r0, r1
 8002036:	4611      	mov	r1, r2
 8002038:	461a      	mov	r2, r3
 800203a:	4623      	mov	r3, r4
 800203c:	71fb      	strb	r3, [r7, #7]
 800203e:	4603      	mov	r3, r0
 8002040:	71bb      	strb	r3, [r7, #6]
 8002042:	460b      	mov	r3, r1
 8002044:	717b      	strb	r3, [r7, #5]
 8002046:	4613      	mov	r3, r2
 8002048:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);//column address
 800204a:	202a      	movs	r0, #42	@ 0x2a
 800204c:	f7ff ff6a 	bl	8001f24 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8002050:	2300      	movs	r3, #0
 8002052:	733b      	strb	r3, [r7, #12]
 8002054:	4b17      	ldr	r3, [pc, #92]	@ (80020b4 <ST7735_SetAddressWindow+0x88>)
 8002056:	781a      	ldrb	r2, [r3, #0]
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	4413      	add	r3, r2
 800205c:	b2db      	uxtb	r3, r3
 800205e:	737b      	strb	r3, [r7, #13]
 8002060:	2300      	movs	r3, #0
 8002062:	73bb      	strb	r3, [r7, #14]
 8002064:	4b13      	ldr	r3, [pc, #76]	@ (80020b4 <ST7735_SetAddressWindow+0x88>)
 8002066:	781a      	ldrb	r2, [r3, #0]
 8002068:	797b      	ldrb	r3, [r7, #5]
 800206a:	4413      	add	r3, r2
 800206c:	b2db      	uxtb	r3, r3
 800206e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8002070:	f107 030c 	add.w	r3, r7, #12
 8002074:	2104      	movs	r1, #4
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff ff70 	bl	8001f5c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);// row address
 800207c:	202b      	movs	r0, #43	@ 0x2b
 800207e:	f7ff ff51 	bl	8001f24 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8002082:	4b0d      	ldr	r3, [pc, #52]	@ (80020b8 <ST7735_SetAddressWindow+0x8c>)
 8002084:	781a      	ldrb	r2, [r3, #0]
 8002086:	79bb      	ldrb	r3, [r7, #6]
 8002088:	4413      	add	r3, r2
 800208a:	b2db      	uxtb	r3, r3
 800208c:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 800208e:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <ST7735_SetAddressWindow+0x8c>)
 8002090:	781a      	ldrb	r2, [r3, #0]
 8002092:	793b      	ldrb	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	b2db      	uxtb	r3, r3
 8002098:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800209a:	f107 030c 	add.w	r3, r7, #12
 800209e:	2104      	movs	r1, #4
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ff5b 	bl	8001f5c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80020a6:	202c      	movs	r0, #44	@ 0x2c
 80020a8:	f7ff ff3c 	bl	8001f24 <ST7735_WriteCommand>
}
 80020ac:	bf00      	nop
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd90      	pop	{r4, r7, pc}
 80020b4:	200000b3 	.word	0x200000b3
 80020b8:	200000b4 	.word	0x200000b4

080020bc <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 80020c6:	f7ff feff 	bl	8001ec8 <ST7735_Select>
    ST7735_Reset();
 80020ca:	f7ff ff15 	bl	8001ef8 <ST7735_Reset>
    DisplayInit(init_cmds1);
 80020ce:	480c      	ldr	r0, [pc, #48]	@ (8002100 <ST7735_Init+0x44>)
 80020d0:	f7ff ff62 	bl	8001f98 <DisplayInit>
    DisplayInit(init_cmds2);
 80020d4:	480b      	ldr	r0, [pc, #44]	@ (8002104 <ST7735_Init+0x48>)
 80020d6:	f7ff ff5f 	bl	8001f98 <DisplayInit>
    DisplayInit(init_cmds3);
 80020da:	480b      	ldr	r0, [pc, #44]	@ (8002108 <ST7735_Init+0x4c>)
 80020dc:	f7ff ff5c 	bl	8001f98 <DisplayInit>
//    The color order (RGB vs BGR).
#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 80020e0:	4b0a      	ldr	r3, [pc, #40]	@ (800210c <ST7735_Init+0x50>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 80020e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002110 <ST7735_Init+0x54>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 f810 	bl	8002114 <ST7735_SetRotation>
    ST7735_Unselect();
 80020f4:	f7ff fef4 	bl	8001ee0 <ST7735_Unselect>

}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	08009040 	.word	0x08009040
 8002104:	08009078 	.word	0x08009078
 8002108:	08009088 	.word	0x08009088
 800210c:	200000b1 	.word	0x200000b1
 8002110:	200000b2 	.word	0x200000b2

08002114 <ST7735_SetRotation>:
//
//2: upside-down portrait (rotated 180°)
//
//3: landscape (rotated 270°)
void ST7735_SetRotation(uint8_t m)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	b2da      	uxtb	r2, r3
 800212a:	4b33      	ldr	r3, [pc, #204]	@ (80021f8 <ST7735_SetRotation+0xe4>)
 800212c:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800212e:	4b32      	ldr	r3, [pc, #200]	@ (80021f8 <ST7735_SetRotation+0xe4>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b03      	cmp	r3, #3
 8002134:	d84e      	bhi.n	80021d4 <ST7735_SetRotation+0xc0>
 8002136:	a201      	add	r2, pc, #4	@ (adr r2, 800213c <ST7735_SetRotation+0x28>)
 8002138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213c:	0800214d 	.word	0x0800214d
 8002140:	0800216f 	.word	0x0800216f
 8002144:	08002191 	.word	0x08002191
 8002148:	080021b3 	.word	0x080021b3
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;//selecting the right madctl bit
 800214c:	23c0      	movs	r3, #192	@ 0xc0
 800214e:	73fb      	strb	r3, [r7, #15]
      //ST7735_MADCTL_MX → mirror X (flip left-right)
//      ST7735_MADCTL_MY → mirror Y (flip top-bottom)
//      ST7735_MADCTL_MV → swap X and Y (transpose image axes)
//      ST7735_MADCTL_BGR / RGB → color order (Blue-Green-Red or Red-Green-Blue)
      _height = ST7735_HEIGHT;
 8002150:	4b2a      	ldr	r3, [pc, #168]	@ (80021fc <ST7735_SetRotation+0xe8>)
 8002152:	22a0      	movs	r2, #160	@ 0xa0
 8002154:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8002156:	4b2a      	ldr	r3, [pc, #168]	@ (8002200 <ST7735_SetRotation+0xec>)
 8002158:	2280      	movs	r2, #128	@ 0x80
 800215a:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 800215c:	4b29      	ldr	r3, [pc, #164]	@ (8002204 <ST7735_SetRotation+0xf0>)
 800215e:	781a      	ldrb	r2, [r3, #0]
 8002160:	4b29      	ldr	r3, [pc, #164]	@ (8002208 <ST7735_SetRotation+0xf4>)
 8002162:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8002164:	4b29      	ldr	r3, [pc, #164]	@ (800220c <ST7735_SetRotation+0xf8>)
 8002166:	781a      	ldrb	r2, [r3, #0]
 8002168:	4b29      	ldr	r3, [pc, #164]	@ (8002210 <ST7735_SetRotation+0xfc>)
 800216a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800216c:	e032      	b.n	80021d4 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800216e:	23a0      	movs	r3, #160	@ 0xa0
 8002170:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8002172:	4b23      	ldr	r3, [pc, #140]	@ (8002200 <ST7735_SetRotation+0xec>)
 8002174:	22a0      	movs	r2, #160	@ 0xa0
 8002176:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8002178:	4b20      	ldr	r3, [pc, #128]	@ (80021fc <ST7735_SetRotation+0xe8>)
 800217a:	2280      	movs	r2, #128	@ 0x80
 800217c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800217e:	4b21      	ldr	r3, [pc, #132]	@ (8002204 <ST7735_SetRotation+0xf0>)
 8002180:	781a      	ldrb	r2, [r3, #0]
 8002182:	4b23      	ldr	r3, [pc, #140]	@ (8002210 <ST7735_SetRotation+0xfc>)
 8002184:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8002186:	4b21      	ldr	r3, [pc, #132]	@ (800220c <ST7735_SetRotation+0xf8>)
 8002188:	781a      	ldrb	r2, [r3, #0]
 800218a:	4b1f      	ldr	r3, [pc, #124]	@ (8002208 <ST7735_SetRotation+0xf4>)
 800218c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800218e:	e021      	b.n	80021d4 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8002190:	2300      	movs	r3, #0
 8002192:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8002194:	4b19      	ldr	r3, [pc, #100]	@ (80021fc <ST7735_SetRotation+0xe8>)
 8002196:	22a0      	movs	r2, #160	@ 0xa0
 8002198:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800219a:	4b19      	ldr	r3, [pc, #100]	@ (8002200 <ST7735_SetRotation+0xec>)
 800219c:	2280      	movs	r2, #128	@ 0x80
 800219e:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 80021a0:	4b18      	ldr	r3, [pc, #96]	@ (8002204 <ST7735_SetRotation+0xf0>)
 80021a2:	781a      	ldrb	r2, [r3, #0]
 80021a4:	4b18      	ldr	r3, [pc, #96]	@ (8002208 <ST7735_SetRotation+0xf4>)
 80021a6:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80021a8:	4b18      	ldr	r3, [pc, #96]	@ (800220c <ST7735_SetRotation+0xf8>)
 80021aa:	781a      	ldrb	r2, [r3, #0]
 80021ac:	4b18      	ldr	r3, [pc, #96]	@ (8002210 <ST7735_SetRotation+0xfc>)
 80021ae:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80021b0:	e010      	b.n	80021d4 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80021b2:	2360      	movs	r3, #96	@ 0x60
 80021b4:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80021b6:	4b12      	ldr	r3, [pc, #72]	@ (8002200 <ST7735_SetRotation+0xec>)
 80021b8:	22a0      	movs	r2, #160	@ 0xa0
 80021ba:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80021bc:	4b0f      	ldr	r3, [pc, #60]	@ (80021fc <ST7735_SetRotation+0xe8>)
 80021be:	2280      	movs	r2, #128	@ 0x80
 80021c0:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80021c2:	4b10      	ldr	r3, [pc, #64]	@ (8002204 <ST7735_SetRotation+0xf0>)
 80021c4:	781a      	ldrb	r2, [r3, #0]
 80021c6:	4b12      	ldr	r3, [pc, #72]	@ (8002210 <ST7735_SetRotation+0xfc>)
 80021c8:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80021ca:	4b10      	ldr	r3, [pc, #64]	@ (800220c <ST7735_SetRotation+0xf8>)
 80021cc:	781a      	ldrb	r2, [r3, #0]
 80021ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002208 <ST7735_SetRotation+0xf4>)
 80021d0:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80021d2:	bf00      	nop
  }
  ST7735_Select();
 80021d4:	f7ff fe78 	bl	8001ec8 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 80021d8:	2036      	movs	r0, #54	@ 0x36
 80021da:	f7ff fea3 	bl	8001f24 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 80021de:	f107 030f 	add.w	r3, r7, #15
 80021e2:	2101      	movs	r1, #1
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff feb9 	bl	8001f5c <ST7735_WriteData>
  ST7735_Unselect();
 80021ea:	f7ff fe79 	bl	8001ee0 <ST7735_Unselect>
}
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	200000b0 	.word	0x200000b0
 80021fc:	200000ae 	.word	0x200000ae
 8002200:	200000ac 	.word	0x200000ac
 8002204:	200000b1 	.word	0x200000b1
 8002208:	200000b3 	.word	0x200000b3
 800220c:	200000b2 	.word	0x200000b2
 8002210:	200000b4 	.word	0x200000b4

08002214 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	80fb      	strh	r3, [r7, #6]
 800221e:	460b      	mov	r3, r1
 8002220:	80bb      	strh	r3, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8002226:	88fb      	ldrh	r3, [r7, #6]
 8002228:	4a17      	ldr	r2, [pc, #92]	@ (8002288 <ST7735_DrawPixel+0x74>)
 800222a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800222e:	4293      	cmp	r3, r2
 8002230:	da26      	bge.n	8002280 <ST7735_DrawPixel+0x6c>
 8002232:	88bb      	ldrh	r3, [r7, #4]
 8002234:	4a15      	ldr	r2, [pc, #84]	@ (800228c <ST7735_DrawPixel+0x78>)
 8002236:	f9b2 2000 	ldrsh.w	r2, [r2]
 800223a:	4293      	cmp	r3, r2
 800223c:	da20      	bge.n	8002280 <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 800223e:	f7ff fe43 	bl	8001ec8 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	b2d8      	uxtb	r0, r3
 8002246:	88bb      	ldrh	r3, [r7, #4]
 8002248:	b2d9      	uxtb	r1, r3
 800224a:	88fb      	ldrh	r3, [r7, #6]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	3301      	adds	r3, #1
 8002250:	b2da      	uxtb	r2, r3
 8002252:	88bb      	ldrh	r3, [r7, #4]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	3301      	adds	r3, #1
 8002258:	b2db      	uxtb	r3, r3
 800225a:	f7ff fee7 	bl	800202c <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800225e:	887b      	ldrh	r3, [r7, #2]
 8002260:	0a1b      	lsrs	r3, r3, #8
 8002262:	b29b      	uxth	r3, r3
 8002264:	b2db      	uxtb	r3, r3
 8002266:	733b      	strb	r3, [r7, #12]
 8002268:	887b      	ldrh	r3, [r7, #2]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 800226e:	f107 030c 	add.w	r3, r7, #12
 8002272:	2102      	movs	r1, #2
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fe71 	bl	8001f5c <ST7735_WriteData>

    ST7735_Unselect();
 800227a:	f7ff fe31 	bl	8001ee0 <ST7735_Unselect>
 800227e:	e000      	b.n	8002282 <ST7735_DrawPixel+0x6e>
        return;
 8002280:	bf00      	nop
}
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	200000ac 	.word	0x200000ac
 800228c:	200000ae 	.word	0x200000ae

08002290 <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002290:	b082      	sub	sp, #8
 8002292:	b590      	push	{r4, r7, lr}
 8002294:	b089      	sub	sp, #36	@ 0x24
 8002296:	af00      	add	r7, sp, #0
 8002298:	637b      	str	r3, [r7, #52]	@ 0x34
 800229a:	4603      	mov	r3, r0
 800229c:	80fb      	strh	r3, [r7, #6]
 800229e:	460b      	mov	r3, r1
 80022a0:	80bb      	strh	r3, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80022a6:	88fb      	ldrh	r3, [r7, #6]
 80022a8:	b2d8      	uxtb	r0, r3
 80022aa:	88bb      	ldrh	r3, [r7, #4]
 80022ac:	b2d9      	uxtb	r1, r3
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80022b6:	4413      	add	r3, r2
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	3b01      	subs	r3, #1
 80022bc:	b2dc      	uxtb	r4, r3
 80022be:	88bb      	ldrh	r3, [r7, #4]
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80022c6:	4413      	add	r3, r2
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	3b01      	subs	r3, #1
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	4622      	mov	r2, r4
 80022d0:	f7ff feac 	bl	800202c <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80022d4:	2300      	movs	r3, #0
 80022d6:	61fb      	str	r3, [r7, #28]
 80022d8:	e043      	b.n	8002362 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80022da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	3b20      	subs	r3, #32
 80022e0:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	4619      	mov	r1, r3
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	440b      	add	r3, r1
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
 80022fa:	e029      	b.n	8002350 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00e      	beq.n	800232a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800230c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800230e:	0a1b      	lsrs	r3, r3, #8
 8002310:	b29b      	uxth	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	743b      	strb	r3, [r7, #16]
 8002316:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002318:	b2db      	uxtb	r3, r3
 800231a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800231c:	f107 0310 	add.w	r3, r7, #16
 8002320:	2102      	movs	r1, #2
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fe1a 	bl	8001f5c <ST7735_WriteData>
 8002328:	e00f      	b.n	800234a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800232a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800232e:	0a1b      	lsrs	r3, r3, #8
 8002330:	b29b      	uxth	r3, r3
 8002332:	b2db      	uxtb	r3, r3
 8002334:	733b      	strb	r3, [r7, #12]
 8002336:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800233a:	b2db      	uxtb	r3, r3
 800233c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800233e:	f107 030c 	add.w	r3, r7, #12
 8002342:	2102      	movs	r1, #2
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fe09 	bl	8001f5c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	3301      	adds	r3, #1
 800234e:	61bb      	str	r3, [r7, #24]
 8002350:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002354:	461a      	mov	r2, r3
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	4293      	cmp	r3, r2
 800235a:	d3cf      	bcc.n	80022fc <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	3301      	adds	r3, #1
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002366:	461a      	mov	r2, r3
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	4293      	cmp	r3, r2
 800236c:	d3b5      	bcc.n	80022da <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800236e:	bf00      	nop
 8002370:	bf00      	nop
 8002372:	3724      	adds	r7, #36	@ 0x24
 8002374:	46bd      	mov	sp, r7
 8002376:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800237a:	b002      	add	sp, #8
 800237c:	4770      	bx	lr
	...

08002380 <ST7735_WriteString>:
//        str++;
//    }
//
//    ST7735_Unselect();
//}
void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002380:	b082      	sub	sp, #8
 8002382:	b580      	push	{r7, lr}
 8002384:	b086      	sub	sp, #24
 8002386:	af04      	add	r7, sp, #16
 8002388:	603a      	str	r2, [r7, #0]
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	4603      	mov	r3, r0
 800238e:	80fb      	strh	r3, [r7, #6]
 8002390:	460b      	mov	r3, r1
 8002392:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8002394:	f7ff fd98 	bl	8001ec8 <ST7735_Select>

    while (*str) {
 8002398:	e04a      	b.n	8002430 <ST7735_WriteString+0xb0>
        if (*str == '\r') {
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b0d      	cmp	r3, #13
 80023a0:	d103      	bne.n	80023aa <ST7735_WriteString+0x2a>
            str++;  // skip carriage return
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	3301      	adds	r3, #1
 80023a6:	603b      	str	r3, [r7, #0]
            continue;
 80023a8:	e042      	b.n	8002430 <ST7735_WriteString+0xb0>
        }

        if (*str == '\n') {
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b0a      	cmp	r3, #10
 80023b0:	d112      	bne.n	80023d8 <ST7735_WriteString+0x58>
            x = 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80023b6:	7d7b      	ldrb	r3, [r7, #21]
 80023b8:	461a      	mov	r2, r3
 80023ba:	88bb      	ldrh	r3, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	80bb      	strh	r3, [r7, #4]
            if (y + font.height >= _height) {
 80023c0:	88bb      	ldrh	r3, [r7, #4]
 80023c2:	7d7a      	ldrb	r2, [r7, #21]
 80023c4:	4413      	add	r3, r2
 80023c6:	4a23      	ldr	r2, [pc, #140]	@ (8002454 <ST7735_WriteString+0xd4>)
 80023c8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80023cc:	4293      	cmp	r3, r2
 80023ce:	da34      	bge.n	800243a <ST7735_WriteString+0xba>
                break;  // no more space on screen
            }
            str++;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	3301      	adds	r3, #1
 80023d4:	603b      	str	r3, [r7, #0]
            continue;
 80023d6:	e02b      	b.n	8002430 <ST7735_WriteString+0xb0>
        }

        if (x + font.width >= _width) {
 80023d8:	88fb      	ldrh	r3, [r7, #6]
 80023da:	7d3a      	ldrb	r2, [r7, #20]
 80023dc:	4413      	add	r3, r2
 80023de:	4a1e      	ldr	r2, [pc, #120]	@ (8002458 <ST7735_WriteString+0xd8>)
 80023e0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80023e4:	4293      	cmp	r3, r2
 80023e6:	db0e      	blt.n	8002406 <ST7735_WriteString+0x86>
            x = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80023ec:	7d7b      	ldrb	r3, [r7, #21]
 80023ee:	461a      	mov	r2, r3
 80023f0:	88bb      	ldrh	r3, [r7, #4]
 80023f2:	4413      	add	r3, r2
 80023f4:	80bb      	strh	r3, [r7, #4]
            if (y + font.height >= _height) {
 80023f6:	88bb      	ldrh	r3, [r7, #4]
 80023f8:	7d7a      	ldrb	r2, [r7, #21]
 80023fa:	4413      	add	r3, r2
 80023fc:	4a15      	ldr	r2, [pc, #84]	@ (8002454 <ST7735_WriteString+0xd4>)
 80023fe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002402:	4293      	cmp	r3, r2
 8002404:	da1b      	bge.n	800243e <ST7735_WriteString+0xbe>
                break;
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	781a      	ldrb	r2, [r3, #0]
 800240a:	88b9      	ldrh	r1, [r7, #4]
 800240c:	88f8      	ldrh	r0, [r7, #6]
 800240e:	8c3b      	ldrh	r3, [r7, #32]
 8002410:	9302      	str	r3, [sp, #8]
 8002412:	8bbb      	ldrh	r3, [r7, #28]
 8002414:	9301      	str	r3, [sp, #4]
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f7ff ff38 	bl	8002290 <ST7735_WriteChar>
        x += font.width;
 8002420:	7d3b      	ldrb	r3, [r7, #20]
 8002422:	461a      	mov	r2, r3
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	4413      	add	r3, r2
 8002428:	80fb      	strh	r3, [r7, #6]
        str++;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	3301      	adds	r3, #1
 800242e:	603b      	str	r3, [r7, #0]
    while (*str) {
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1b0      	bne.n	800239a <ST7735_WriteString+0x1a>
 8002438:	e002      	b.n	8002440 <ST7735_WriteString+0xc0>
                break;  // no more space on screen
 800243a:	bf00      	nop
 800243c:	e000      	b.n	8002440 <ST7735_WriteString+0xc0>
                break;
 800243e:	bf00      	nop
    }

    ST7735_Unselect();
 8002440:	f7ff fd4e 	bl	8001ee0 <ST7735_Unselect>
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800244e:	b002      	add	sp, #8
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	200000ae 	.word	0x200000ae
 8002458:	200000ac 	.word	0x200000ac

0800245c <ST7735_FillRectangle>:
}

// Assume you have ST7735 width and height defined globally
// #define ST7735_WIDTH 128
// #define ST7735_HEIGHT 160
void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800245c:	b590      	push	{r4, r7, lr}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
 8002462:	4604      	mov	r4, r0
 8002464:	4608      	mov	r0, r1
 8002466:	4611      	mov	r1, r2
 8002468:	461a      	mov	r2, r3
 800246a:	4623      	mov	r3, r4
 800246c:	80fb      	strh	r3, [r7, #6]
 800246e:	4603      	mov	r3, r0
 8002470:	80bb      	strh	r3, [r7, #4]
 8002472:	460b      	mov	r3, r1
 8002474:	807b      	strh	r3, [r7, #2]
 8002476:	4613      	mov	r3, r2
 8002478:	803b      	strh	r3, [r7, #0]
    // Boundary checks
    if ((x >= _width) || (y >= _height)) return;
 800247a:	88fb      	ldrh	r3, [r7, #6]
 800247c:	4a54      	ldr	r2, [pc, #336]	@ (80025d0 <ST7735_FillRectangle+0x174>)
 800247e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002482:	4293      	cmp	r3, r2
 8002484:	f280 80a0 	bge.w	80025c8 <ST7735_FillRectangle+0x16c>
 8002488:	88bb      	ldrh	r3, [r7, #4]
 800248a:	4a52      	ldr	r2, [pc, #328]	@ (80025d4 <ST7735_FillRectangle+0x178>)
 800248c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002490:	4293      	cmp	r3, r2
 8002492:	f280 8099 	bge.w	80025c8 <ST7735_FillRectangle+0x16c>
    if ((x + w - 1) >= _width) w = _width - x;
 8002496:	88fa      	ldrh	r2, [r7, #6]
 8002498:	887b      	ldrh	r3, [r7, #2]
 800249a:	4413      	add	r3, r2
 800249c:	4a4c      	ldr	r2, [pc, #304]	@ (80025d0 <ST7735_FillRectangle+0x174>)
 800249e:	f9b2 2000 	ldrsh.w	r2, [r2]
 80024a2:	4293      	cmp	r3, r2
 80024a4:	dd06      	ble.n	80024b4 <ST7735_FillRectangle+0x58>
 80024a6:	4b4a      	ldr	r3, [pc, #296]	@ (80025d0 <ST7735_FillRectangle+0x174>)
 80024a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	88fb      	ldrh	r3, [r7, #6]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	807b      	strh	r3, [r7, #2]
    if ((y + h - 1) >= _height) h = _height - y;
 80024b4:	88ba      	ldrh	r2, [r7, #4]
 80024b6:	883b      	ldrh	r3, [r7, #0]
 80024b8:	4413      	add	r3, r2
 80024ba:	4a46      	ldr	r2, [pc, #280]	@ (80025d4 <ST7735_FillRectangle+0x178>)
 80024bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80024c0:	4293      	cmp	r3, r2
 80024c2:	dd06      	ble.n	80024d2 <ST7735_FillRectangle+0x76>
 80024c4:	4b43      	ldr	r3, [pc, #268]	@ (80025d4 <ST7735_FillRectangle+0x178>)
 80024c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	88bb      	ldrh	r3, [r7, #4]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	803b      	strh	r3, [r7, #0]

    // Wait for any previous DMA to complete
    ST7735_WaitForDMA();
 80024d2:	f7ff fcd3 	bl	8001e7c <ST7735_WaitForDMA>

    ST7735_Select();
 80024d6:	f7ff fcf7 	bl	8001ec8 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 80024da:	88fb      	ldrh	r3, [r7, #6]
 80024dc:	b2d8      	uxtb	r0, r3
 80024de:	88bb      	ldrh	r3, [r7, #4]
 80024e0:	b2d9      	uxtb	r1, r3
 80024e2:	88fb      	ldrh	r3, [r7, #6]
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	887b      	ldrh	r3, [r7, #2]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	4413      	add	r3, r2
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b2dc      	uxtb	r4, r3
 80024f2:	88bb      	ldrh	r3, [r7, #4]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	883b      	ldrh	r3, [r7, #0]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	4413      	add	r3, r2
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	3b01      	subs	r3, #1
 8002500:	b2db      	uxtb	r3, r3
 8002502:	4622      	mov	r2, r4
 8002504:	f7ff fd92 	bl	800202c <ST7735_SetAddressWindow>

    uint32_t size = w * h;
 8002508:	887b      	ldrh	r3, [r7, #2]
 800250a:	883a      	ldrh	r2, [r7, #0]
 800250c:	fb02 f303 	mul.w	r3, r2, r3
 8002510:	613b      	str	r3, [r7, #16]
    uint8_t *buffer = malloc(size * 2);  // 2 bytes per pixel (RGB565)
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	4618      	mov	r0, r3
 8002518:	f006 fc04 	bl	8008d24 <malloc>
 800251c:	4603      	mov	r3, r0
 800251e:	60fb      	str	r3, [r7, #12]

    if (buffer == NULL) {
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d102      	bne.n	800252c <ST7735_FillRectangle+0xd0>
        ST7735_Unselect();
 8002526:	f7ff fcdb 	bl	8001ee0 <ST7735_Unselect>
        return;
 800252a:	e04e      	b.n	80025ca <ST7735_FillRectangle+0x16e>
    }

    // Fill buffer with color
    uint8_t high = color >> 8;
 800252c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800252e:	0a1b      	lsrs	r3, r3, #8
 8002530:	b29b      	uxth	r3, r3
 8002532:	72fb      	strb	r3, [r7, #11]
    uint8_t low = color & 0xFF;
 8002534:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002536:	72bb      	strb	r3, [r7, #10]
    for (uint32_t i = 0; i < size; i++) {
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]
 800253c:	e00f      	b.n	800255e <ST7735_FillRectangle+0x102>
        buffer[i * 2] = high;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	4413      	add	r3, r2
 8002546:	7afa      	ldrb	r2, [r7, #11]
 8002548:	701a      	strb	r2, [r3, #0]
        buffer[i * 2 + 1] = low;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	3301      	adds	r3, #1
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	4413      	add	r3, r2
 8002554:	7aba      	ldrb	r2, [r7, #10]
 8002556:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < size; i++) {
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	3301      	adds	r3, #1
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	429a      	cmp	r2, r3
 8002564:	d3eb      	bcc.n	800253e <ST7735_FillRectangle+0xe2>
    }


    // Set DMA state before starting transfer
    spi_ready = 0;
 8002566:	4b1c      	ldr	r3, [pc, #112]	@ (80025d8 <ST7735_FillRectangle+0x17c>)
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
    dma_active = 1;
 800256c:	4b1b      	ldr	r3, [pc, #108]	@ (80025dc <ST7735_FillRectangle+0x180>)
 800256e:	2201      	movs	r2, #1
 8002570:	701a      	strb	r2, [r3, #0]
    dma_buffer = buffer;
 8002572:	4a1b      	ldr	r2, [pc, #108]	@ (80025e0 <ST7735_FillRectangle+0x184>)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6013      	str	r3, [r2, #0]
    dma_buffer_size = size * 2;
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4a19      	ldr	r2, [pc, #100]	@ (80025e4 <ST7735_FillRectangle+0x188>)
 800257e:	6013      	str	r3, [r2, #0]

    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8002580:	2201      	movs	r2, #1
 8002582:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002586:	4818      	ldr	r0, [pc, #96]	@ (80025e8 <ST7735_FillRectangle+0x18c>)
 8002588:	f002 f884 	bl	8004694 <HAL_GPIO_WritePin>

    if (HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buffer, size * 2) != HAL_OK) {
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	b29b      	uxth	r3, r3
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	b29b      	uxth	r3, r3
 8002594:	461a      	mov	r2, r3
 8002596:	68f9      	ldr	r1, [r7, #12]
 8002598:	4814      	ldr	r0, [pc, #80]	@ (80025ec <ST7735_FillRectangle+0x190>)
 800259a:	f003 fe6b 	bl	8006274 <HAL_SPI_Transmit_DMA>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d012      	beq.n	80025ca <ST7735_FillRectangle+0x16e>
        // If DMA start fails, clean up
        free(buffer);
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f006 fbc5 	bl	8008d34 <free>
        dma_buffer = NULL;
 80025aa:	4b0d      	ldr	r3, [pc, #52]	@ (80025e0 <ST7735_FillRectangle+0x184>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
        dma_buffer_size = 0;
 80025b0:	4b0c      	ldr	r3, [pc, #48]	@ (80025e4 <ST7735_FillRectangle+0x188>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
        spi_ready = 1;
 80025b6:	4b08      	ldr	r3, [pc, #32]	@ (80025d8 <ST7735_FillRectangle+0x17c>)
 80025b8:	2201      	movs	r2, #1
 80025ba:	701a      	strb	r2, [r3, #0]
        dma_active = 0;
 80025bc:	4b07      	ldr	r3, [pc, #28]	@ (80025dc <ST7735_FillRectangle+0x180>)
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]
        ST7735_Unselect();
 80025c2:	f7ff fc8d 	bl	8001ee0 <ST7735_Unselect>
 80025c6:	e000      	b.n	80025ca <ST7735_FillRectangle+0x16e>
    if ((x >= _width) || (y >= _height)) return;
 80025c8:	bf00      	nop
    }
}
 80025ca:	371c      	adds	r7, #28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd90      	pop	{r4, r7, pc}
 80025d0:	200000ac 	.word	0x200000ac
 80025d4:	200000ae 	.word	0x200000ae
 80025d8:	20000000 	.word	0x20000000
 80025dc:	200000b5 	.word	0x200000b5
 80025e0:	200000b8 	.word	0x200000b8
 80025e4:	200000bc 	.word	0x200000bc
 80025e8:	48001400 	.word	0x48001400
 80025ec:	200001a8 	.word	0x200001a8

080025f0 <HAL_UART_RxCpltCallback>:
volatile uint8_t rx_ready = 0;
char last_char;
uint8_t rx_char;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == LPUART1) {
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a09      	ldr	r2, [pc, #36]	@ (8002624 <HAL_UART_RxCpltCallback+0x34>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d10b      	bne.n	800261a <HAL_UART_RxCpltCallback+0x2a>
        last_char = rx_char;
 8002602:	4b09      	ldr	r3, [pc, #36]	@ (8002628 <HAL_UART_RxCpltCallback+0x38>)
 8002604:	781a      	ldrb	r2, [r3, #0]
 8002606:	4b09      	ldr	r3, [pc, #36]	@ (800262c <HAL_UART_RxCpltCallback+0x3c>)
 8002608:	701a      	strb	r2, [r3, #0]
        rx_ready = 1; // Signal main loop
 800260a:	4b09      	ldr	r3, [pc, #36]	@ (8002630 <HAL_UART_RxCpltCallback+0x40>)
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&hlpuart1, &rx_char, 1);
 8002610:	2201      	movs	r2, #1
 8002612:	4905      	ldr	r1, [pc, #20]	@ (8002628 <HAL_UART_RxCpltCallback+0x38>)
 8002614:	4807      	ldr	r0, [pc, #28]	@ (8002634 <HAL_UART_RxCpltCallback+0x44>)
 8002616:	f005 f873 	bl	8007700 <HAL_UART_Receive_IT>
    }
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40008000 	.word	0x40008000
 8002628:	200002ea 	.word	0x200002ea
 800262c:	200002e9 	.word	0x200002e9
 8002630:	200002e8 	.word	0x200002e8
 8002634:	20000120 	.word	0x20000120

08002638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800263c:	f000 ff57 	bl	80034ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002640:	f000 f8ea 	bl	8002818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002644:	f000 fa86 	bl	8002b54 <MX_GPIO_Init>
  MX_DMA_Init();
 8002648:	f000 fa5e 	bl	8002b08 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800264c:	f000 f962 	bl	8002914 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8002650:	f000 f98c 	bl	800296c <MX_SPI1_Init>
  MX_TIM1_Init();
 8002654:	f000 f9c8 	bl	80029e8 <MX_TIM1_Init>
  MX_AES_Init();
 8002658:	f000 f930 	bl	80028bc <MX_AES_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800265c:	2100      	movs	r1, #0
 800265e:	4865      	ldr	r0, [pc, #404]	@ (80027f4 <main+0x1bc>)
 8002660:	f004 f93e 	bl	80068e0 <HAL_TIM_PWM_Start>

  // Test: set brightness to 50%
  set_backlight_brightness(brightness);
 8002664:	4b64      	ldr	r3, [pc, #400]	@ (80027f8 <main+0x1c0>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f000 fc37 	bl	8002edc <set_backlight_brightness>
  ST7735_Init(0);
 800266e:	2000      	movs	r0, #0
 8002670:	f7ff fd24 	bl	80020bc <ST7735_Init>
  fillScreen(BLACK);
 8002674:	2000      	movs	r0, #0
 8002676:	f7fe fec9 	bl	800140c <fillScreen>
  ST7735_SetRotation (1);
 800267a:	2001      	movs	r0, #1
 800267c:	f7ff fd4a 	bl	8002114 <ST7735_SetRotation>
  draw_menu(selected);
 8002680:	4b5e      	ldr	r3, [pc, #376]	@ (80027fc <main+0x1c4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f000 fbd9 	bl	8002e3c <draw_menu>
//  char rx_buffer[8];
  HAL_UART_Receive_IT(&hlpuart1, &rx_char, 1);
 800268a:	2201      	movs	r2, #1
 800268c:	495c      	ldr	r1, [pc, #368]	@ (8002800 <main+0x1c8>)
 800268e:	485d      	ldr	r0, [pc, #372]	@ (8002804 <main+0x1cc>)
 8002690:	f005 f836 	bl	8007700 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (rx_ready) {
 8002694:	4b5c      	ldr	r3, [pc, #368]	@ (8002808 <main+0x1d0>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0fa      	beq.n	8002694 <main+0x5c>
	         rx_ready = 0;
 800269e:	4b5a      	ldr	r3, [pc, #360]	@ (8002808 <main+0x1d0>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]

	         switch (last_char) {
 80026a4:	4b59      	ldr	r3, [pc, #356]	@ (800280c <main+0x1d4>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b0d      	cmp	r3, #13
 80026aa:	d061      	beq.n	8002770 <main+0x138>
 80026ac:	2b0d      	cmp	r3, #13
 80026ae:	dbf1      	blt.n	8002694 <main+0x5c>
 80026b0:	2b77      	cmp	r3, #119	@ 0x77
 80026b2:	dcef      	bgt.n	8002694 <main+0x5c>
 80026b4:	2b61      	cmp	r3, #97	@ 0x61
 80026b6:	dbed      	blt.n	8002694 <main+0x5c>
 80026b8:	3b61      	subs	r3, #97	@ 0x61
 80026ba:	2b16      	cmp	r3, #22
 80026bc:	d8ea      	bhi.n	8002694 <main+0x5c>
 80026be:	a201      	add	r2, pc, #4	@ (adr r2, 80026c4 <main+0x8c>)
 80026c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c4:	08002799 	.word	0x08002799
 80026c8:	08002695 	.word	0x08002695
 80026cc:	08002695 	.word	0x08002695
 80026d0:	080027c5 	.word	0x080027c5
 80026d4:	08002695 	.word	0x08002695
 80026d8:	08002695 	.word	0x08002695
 80026dc:	08002695 	.word	0x08002695
 80026e0:	08002695 	.word	0x08002695
 80026e4:	08002695 	.word	0x08002695
 80026e8:	08002695 	.word	0x08002695
 80026ec:	08002695 	.word	0x08002695
 80026f0:	08002695 	.word	0x08002695
 80026f4:	08002695 	.word	0x08002695
 80026f8:	08002695 	.word	0x08002695
 80026fc:	08002695 	.word	0x08002695
 8002700:	08002695 	.word	0x08002695
 8002704:	08002695 	.word	0x08002695
 8002708:	08002695 	.word	0x08002695
 800270c:	08002749 	.word	0x08002749
 8002710:	08002695 	.word	0x08002695
 8002714:	08002695 	.word	0x08002695
 8002718:	08002695 	.word	0x08002695
 800271c:	08002721 	.word	0x08002721
	             case 'w':
	                 selected--;
 8002720:	4b36      	ldr	r3, [pc, #216]	@ (80027fc <main+0x1c4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	3b01      	subs	r3, #1
 8002726:	4a35      	ldr	r2, [pc, #212]	@ (80027fc <main+0x1c4>)
 8002728:	6013      	str	r3, [r2, #0]
	                 if (selected < 0) selected = NUM_OPTIONS - 1;
 800272a:	4b34      	ldr	r3, [pc, #208]	@ (80027fc <main+0x1c4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	da04      	bge.n	800273c <main+0x104>
 8002732:	4b37      	ldr	r3, [pc, #220]	@ (8002810 <main+0x1d8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	3b01      	subs	r3, #1
 8002738:	4a30      	ldr	r2, [pc, #192]	@ (80027fc <main+0x1c4>)
 800273a:	6013      	str	r3, [r2, #0]
	                 draw_menu(selected);
 800273c:	4b2f      	ldr	r3, [pc, #188]	@ (80027fc <main+0x1c4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f000 fb7b 	bl	8002e3c <draw_menu>
	                 break;
 8002746:	e054      	b.n	80027f2 <main+0x1ba>

	             case 's':
	                 selected++;
 8002748:	4b2c      	ldr	r3, [pc, #176]	@ (80027fc <main+0x1c4>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	3301      	adds	r3, #1
 800274e:	4a2b      	ldr	r2, [pc, #172]	@ (80027fc <main+0x1c4>)
 8002750:	6013      	str	r3, [r2, #0]
	                 if (selected >= NUM_OPTIONS) selected = 0;
 8002752:	4b2a      	ldr	r3, [pc, #168]	@ (80027fc <main+0x1c4>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	4b2e      	ldr	r3, [pc, #184]	@ (8002810 <main+0x1d8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	db02      	blt.n	8002764 <main+0x12c>
 800275e:	4b27      	ldr	r3, [pc, #156]	@ (80027fc <main+0x1c4>)
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
	                 draw_menu(selected);
 8002764:	4b25      	ldr	r3, [pc, #148]	@ (80027fc <main+0x1c4>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f000 fb67 	bl	8002e3c <draw_menu>
	                 break;
 800276e:	e040      	b.n	80027f2 <main+0x1ba>

	             case '\r':
	            	 fillScreen(BLACK);
 8002770:	2000      	movs	r0, #0
 8002772:	f7fe fe4b 	bl	800140c <fillScreen>
	            	 menu[selected].action();
 8002776:	4b21      	ldr	r3, [pc, #132]	@ (80027fc <main+0x1c4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a26      	ldr	r2, [pc, #152]	@ (8002814 <main+0x1dc>)
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4413      	add	r3, r2
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	4798      	blx	r3
	                 HAL_Delay(1000);
 8002784:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002788:	f000 ff26 	bl	80035d8 <HAL_Delay>
	                 draw_menu(selected);
 800278c:	4b1b      	ldr	r3, [pc, #108]	@ (80027fc <main+0x1c4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f000 fb53 	bl	8002e3c <draw_menu>

	                 break;
 8002796:	e02c      	b.n	80027f2 <main+0x1ba>
	             case 'a': // decrease brightness
	                    if (brightness >= 10) brightness -= 10;
 8002798:	4b17      	ldr	r3, [pc, #92]	@ (80027f8 <main+0x1c0>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b09      	cmp	r3, #9
 800279e:	d906      	bls.n	80027ae <main+0x176>
 80027a0:	4b15      	ldr	r3, [pc, #84]	@ (80027f8 <main+0x1c0>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	3b0a      	subs	r3, #10
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	4b13      	ldr	r3, [pc, #76]	@ (80027f8 <main+0x1c0>)
 80027aa:	701a      	strb	r2, [r3, #0]
 80027ac:	e002      	b.n	80027b4 <main+0x17c>
	                    else brightness = 0;
 80027ae:	4b12      	ldr	r3, [pc, #72]	@ (80027f8 <main+0x1c0>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
	                    set_backlight_brightness(brightness);
 80027b4:	4b10      	ldr	r3, [pc, #64]	@ (80027f8 <main+0x1c0>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 fb8f 	bl	8002edc <set_backlight_brightness>
	                    backlight_display();
 80027be:	f000 fbb1 	bl	8002f24 <backlight_display>
	                    break;
 80027c2:	e016      	b.n	80027f2 <main+0x1ba>

	                case 'd': // increase brightness
	                    if (brightness <= 90) brightness += 10;
 80027c4:	4b0c      	ldr	r3, [pc, #48]	@ (80027f8 <main+0x1c0>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b5a      	cmp	r3, #90	@ 0x5a
 80027ca:	d806      	bhi.n	80027da <main+0x1a2>
 80027cc:	4b0a      	ldr	r3, [pc, #40]	@ (80027f8 <main+0x1c0>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	330a      	adds	r3, #10
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	4b08      	ldr	r3, [pc, #32]	@ (80027f8 <main+0x1c0>)
 80027d6:	701a      	strb	r2, [r3, #0]
 80027d8:	e002      	b.n	80027e0 <main+0x1a8>
	                    else brightness = 100;
 80027da:	4b07      	ldr	r3, [pc, #28]	@ (80027f8 <main+0x1c0>)
 80027dc:	2264      	movs	r2, #100	@ 0x64
 80027de:	701a      	strb	r2, [r3, #0]
	                    set_backlight_brightness(brightness);
 80027e0:	4b05      	ldr	r3, [pc, #20]	@ (80027f8 <main+0x1c0>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 fb79 	bl	8002edc <set_backlight_brightness>
	                    backlight_display();
 80027ea:	f000 fb9b 	bl	8002f24 <backlight_display>
	                    break;
 80027ee:	bf00      	nop
 80027f0:	e750      	b.n	8002694 <main+0x5c>
	  if (rx_ready) {
 80027f2:	e74f      	b.n	8002694 <main+0x5c>
 80027f4:	2000029c 	.word	0x2000029c
 80027f8:	2000002c 	.word	0x2000002c
 80027fc:	200002ec 	.word	0x200002ec
 8002800:	200002ea 	.word	0x200002ea
 8002804:	20000120 	.word	0x20000120
 8002808:	200002e8 	.word	0x200002e8
 800280c:	200002e9 	.word	0x200002e9
 8002810:	08009e30 	.word	0x08009e30
 8002814:	2000000c 	.word	0x2000000c

08002818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b096      	sub	sp, #88	@ 0x58
 800281c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800281e:	f107 0314 	add.w	r3, r7, #20
 8002822:	2244      	movs	r2, #68	@ 0x44
 8002824:	2100      	movs	r1, #0
 8002826:	4618      	mov	r0, r3
 8002828:	f006 fb3a 	bl	8008ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800282c:	463b      	mov	r3, r7
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	605a      	str	r2, [r3, #4]
 8002834:	609a      	str	r2, [r3, #8]
 8002836:	60da      	str	r2, [r3, #12]
 8002838:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800283a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800283e:	f001 ff69 	bl	8004714 <HAL_PWREx_ControlVoltageScaling>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002848:	f000 fa24 	bl	8002c94 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800284c:	2302      	movs	r3, #2
 800284e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002850:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002854:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002856:	2340      	movs	r3, #64	@ 0x40
 8002858:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800285a:	2302      	movs	r3, #2
 800285c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800285e:	2302      	movs	r3, #2
 8002860:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002862:	2301      	movs	r3, #1
 8002864:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002866:	230a      	movs	r3, #10
 8002868:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800286a:	2302      	movs	r3, #2
 800286c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800286e:	2302      	movs	r3, #2
 8002870:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002872:	2302      	movs	r3, #2
 8002874:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002876:	f107 0314 	add.w	r3, r7, #20
 800287a:	4618      	mov	r0, r3
 800287c:	f001 ffb0 	bl	80047e0 <HAL_RCC_OscConfig>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002886:	f000 fa05 	bl	8002c94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800288a:	230f      	movs	r3, #15
 800288c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800288e:	2303      	movs	r3, #3
 8002890:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002892:	2300      	movs	r3, #0
 8002894:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800289a:	2300      	movs	r3, #0
 800289c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800289e:	463b      	mov	r3, r7
 80028a0:	2104      	movs	r1, #4
 80028a2:	4618      	mov	r0, r3
 80028a4:	f002 fbb6 	bl	8005014 <HAL_RCC_ClockConfig>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80028ae:	f000 f9f1 	bl	8002c94 <Error_Handler>
  }
}
 80028b2:	bf00      	nop
 80028b4:	3758      	adds	r7, #88	@ 0x58
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <MX_AES_Init>:
  * @brief AES Initialization Function
  * @param None
  * @retval None
  */
static void MX_AES_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE END AES_Init 0 */

  /* USER CODE BEGIN AES_Init 1 */

  /* USER CODE END AES_Init 1 */
  hcryp.Instance = AES;
 80028c0:	4b10      	ldr	r3, [pc, #64]	@ (8002904 <MX_AES_Init+0x48>)
 80028c2:	4a11      	ldr	r2, [pc, #68]	@ (8002908 <MX_AES_Init+0x4c>)
 80028c4:	601a      	str	r2, [r3, #0]
  hcryp.Init.DataType = CRYP_DATATYPE_8B;
 80028c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002904 <MX_AES_Init+0x48>)
 80028c8:	2204      	movs	r2, #4
 80028ca:	609a      	str	r2, [r3, #8]
  hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
 80028cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002904 <MX_AES_Init+0x48>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	60da      	str	r2, [r3, #12]
  hcryp.Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
 80028d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002904 <MX_AES_Init+0x48>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	611a      	str	r2, [r3, #16]
  hcryp.Init.ChainingMode = CRYP_CHAINMODE_AES_CBC;
 80028d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002904 <MX_AES_Init+0x48>)
 80028da:	2220      	movs	r2, #32
 80028dc:	615a      	str	r2, [r3, #20]
  hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 80028de:	4b09      	ldr	r3, [pc, #36]	@ (8002904 <MX_AES_Init+0x48>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	619a      	str	r2, [r3, #24]
  hcryp.Init.pKey = (uint8_t *)pKeyAES;
 80028e4:	4b07      	ldr	r3, [pc, #28]	@ (8002904 <MX_AES_Init+0x48>)
 80028e6:	4a09      	ldr	r2, [pc, #36]	@ (800290c <MX_AES_Init+0x50>)
 80028e8:	621a      	str	r2, [r3, #32]
  hcryp.Init.pInitVect = (uint8_t *)pInitVectAES;
 80028ea:	4b06      	ldr	r3, [pc, #24]	@ (8002904 <MX_AES_Init+0x48>)
 80028ec:	4a08      	ldr	r2, [pc, #32]	@ (8002910 <MX_AES_Init+0x54>)
 80028ee:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 80028f0:	4804      	ldr	r0, [pc, #16]	@ (8002904 <MX_AES_Init+0x48>)
 80028f2:	f000 ffa6 	bl	8003842 <HAL_CRYP_Init>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_AES_Init+0x44>
  {
    Error_Handler();
 80028fc:	f000 f9ca 	bl	8002c94 <Error_Handler>
  }
  /* USER CODE BEGIN AES_Init 2 */

  /* USER CODE END AES_Init 2 */

}
 8002900:	bf00      	nop
 8002902:	bd80      	pop	{r7, pc}
 8002904:	200000c0 	.word	0x200000c0
 8002908:	50060000 	.word	0x50060000
 800290c:	08009e10 	.word	0x08009e10
 8002910:	08009e20 	.word	0x08009e20

08002914 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002918:	4b12      	ldr	r3, [pc, #72]	@ (8002964 <MX_LPUART1_UART_Init+0x50>)
 800291a:	4a13      	ldr	r2, [pc, #76]	@ (8002968 <MX_LPUART1_UART_Init+0x54>)
 800291c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800291e:	4b11      	ldr	r3, [pc, #68]	@ (8002964 <MX_LPUART1_UART_Init+0x50>)
 8002920:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002924:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002926:	4b0f      	ldr	r3, [pc, #60]	@ (8002964 <MX_LPUART1_UART_Init+0x50>)
 8002928:	2200      	movs	r2, #0
 800292a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800292c:	4b0d      	ldr	r3, [pc, #52]	@ (8002964 <MX_LPUART1_UART_Init+0x50>)
 800292e:	2200      	movs	r2, #0
 8002930:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002932:	4b0c      	ldr	r3, [pc, #48]	@ (8002964 <MX_LPUART1_UART_Init+0x50>)
 8002934:	2200      	movs	r2, #0
 8002936:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002938:	4b0a      	ldr	r3, [pc, #40]	@ (8002964 <MX_LPUART1_UART_Init+0x50>)
 800293a:	220c      	movs	r2, #12
 800293c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800293e:	4b09      	ldr	r3, [pc, #36]	@ (8002964 <MX_LPUART1_UART_Init+0x50>)
 8002940:	2200      	movs	r2, #0
 8002942:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002944:	4b07      	ldr	r3, [pc, #28]	@ (8002964 <MX_LPUART1_UART_Init+0x50>)
 8002946:	2200      	movs	r2, #0
 8002948:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800294a:	4b06      	ldr	r3, [pc, #24]	@ (8002964 <MX_LPUART1_UART_Init+0x50>)
 800294c:	2200      	movs	r2, #0
 800294e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002950:	4804      	ldr	r0, [pc, #16]	@ (8002964 <MX_LPUART1_UART_Init+0x50>)
 8002952:	f004 fe87 	bl	8007664 <HAL_UART_Init>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 800295c:	f000 f99a 	bl	8002c94 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002960:	bf00      	nop
 8002962:	bd80      	pop	{r7, pc}
 8002964:	20000120 	.word	0x20000120
 8002968:	40008000 	.word	0x40008000

0800296c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002970:	4b1b      	ldr	r3, [pc, #108]	@ (80029e0 <MX_SPI1_Init+0x74>)
 8002972:	4a1c      	ldr	r2, [pc, #112]	@ (80029e4 <MX_SPI1_Init+0x78>)
 8002974:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002976:	4b1a      	ldr	r3, [pc, #104]	@ (80029e0 <MX_SPI1_Init+0x74>)
 8002978:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800297c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800297e:	4b18      	ldr	r3, [pc, #96]	@ (80029e0 <MX_SPI1_Init+0x74>)
 8002980:	2200      	movs	r2, #0
 8002982:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002984:	4b16      	ldr	r3, [pc, #88]	@ (80029e0 <MX_SPI1_Init+0x74>)
 8002986:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800298a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800298c:	4b14      	ldr	r3, [pc, #80]	@ (80029e0 <MX_SPI1_Init+0x74>)
 800298e:	2200      	movs	r2, #0
 8002990:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002992:	4b13      	ldr	r3, [pc, #76]	@ (80029e0 <MX_SPI1_Init+0x74>)
 8002994:	2200      	movs	r2, #0
 8002996:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002998:	4b11      	ldr	r3, [pc, #68]	@ (80029e0 <MX_SPI1_Init+0x74>)
 800299a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800299e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80029a0:	4b0f      	ldr	r3, [pc, #60]	@ (80029e0 <MX_SPI1_Init+0x74>)
 80029a2:	2218      	movs	r2, #24
 80029a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029a6:	4b0e      	ldr	r3, [pc, #56]	@ (80029e0 <MX_SPI1_Init+0x74>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029ac:	4b0c      	ldr	r3, [pc, #48]	@ (80029e0 <MX_SPI1_Init+0x74>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029b2:	4b0b      	ldr	r3, [pc, #44]	@ (80029e0 <MX_SPI1_Init+0x74>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80029b8:	4b09      	ldr	r3, [pc, #36]	@ (80029e0 <MX_SPI1_Init+0x74>)
 80029ba:	2207      	movs	r2, #7
 80029bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80029be:	4b08      	ldr	r3, [pc, #32]	@ (80029e0 <MX_SPI1_Init+0x74>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80029c4:	4b06      	ldr	r3, [pc, #24]	@ (80029e0 <MX_SPI1_Init+0x74>)
 80029c6:	2208      	movs	r2, #8
 80029c8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80029ca:	4805      	ldr	r0, [pc, #20]	@ (80029e0 <MX_SPI1_Init+0x74>)
 80029cc:	f003 fa10 	bl	8005df0 <HAL_SPI_Init>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80029d6:	f000 f95d 	bl	8002c94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	200001a8 	.word	0x200001a8
 80029e4:	40013000 	.word	0x40013000

080029e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b096      	sub	sp, #88	@ 0x58
 80029ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ee:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029fa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	605a      	str	r2, [r3, #4]
 8002a04:	609a      	str	r2, [r3, #8]
 8002a06:	60da      	str	r2, [r3, #12]
 8002a08:	611a      	str	r2, [r3, #16]
 8002a0a:	615a      	str	r2, [r3, #20]
 8002a0c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a0e:	1d3b      	adds	r3, r7, #4
 8002a10:	222c      	movs	r2, #44	@ 0x2c
 8002a12:	2100      	movs	r1, #0
 8002a14:	4618      	mov	r0, r3
 8002a16:	f006 fa43 	bl	8008ea0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a1a:	4b39      	ldr	r3, [pc, #228]	@ (8002b00 <MX_TIM1_Init+0x118>)
 8002a1c:	4a39      	ldr	r2, [pc, #228]	@ (8002b04 <MX_TIM1_Init+0x11c>)
 8002a1e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8002a20:	4b37      	ldr	r3, [pc, #220]	@ (8002b00 <MX_TIM1_Init+0x118>)
 8002a22:	2207      	movs	r2, #7
 8002a24:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a26:	4b36      	ldr	r3, [pc, #216]	@ (8002b00 <MX_TIM1_Init+0x118>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002a2c:	4b34      	ldr	r3, [pc, #208]	@ (8002b00 <MX_TIM1_Init+0x118>)
 8002a2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a34:	4b32      	ldr	r3, [pc, #200]	@ (8002b00 <MX_TIM1_Init+0x118>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a3a:	4b31      	ldr	r3, [pc, #196]	@ (8002b00 <MX_TIM1_Init+0x118>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a40:	4b2f      	ldr	r3, [pc, #188]	@ (8002b00 <MX_TIM1_Init+0x118>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002a46:	482e      	ldr	r0, [pc, #184]	@ (8002b00 <MX_TIM1_Init+0x118>)
 8002a48:	f003 fef2 	bl	8006830 <HAL_TIM_PWM_Init>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002a52:	f000 f91f 	bl	8002c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a56:	2300      	movs	r3, #0
 8002a58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a62:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002a66:	4619      	mov	r1, r3
 8002a68:	4825      	ldr	r0, [pc, #148]	@ (8002b00 <MX_TIM1_Init+0x118>)
 8002a6a:	f004 fcf5 	bl	8007458 <HAL_TIMEx_MasterConfigSynchronization>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002a74:	f000 f90e 	bl	8002c94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a78:	2360      	movs	r3, #96	@ 0x60
 8002a7a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a80:	2300      	movs	r3, #0
 8002a82:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a84:	2300      	movs	r3, #0
 8002a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a90:	2300      	movs	r3, #0
 8002a92:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a94:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002a98:	2200      	movs	r2, #0
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4818      	ldr	r0, [pc, #96]	@ (8002b00 <MX_TIM1_Init+0x118>)
 8002a9e:	f004 f825 	bl	8006aec <HAL_TIM_PWM_ConfigChannel>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002aa8:	f000 f8f4 	bl	8002c94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002aac:	2300      	movs	r3, #0
 8002aae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ac0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ac4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002ace:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002adc:	1d3b      	adds	r3, r7, #4
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4807      	ldr	r0, [pc, #28]	@ (8002b00 <MX_TIM1_Init+0x118>)
 8002ae2:	f004 fd41 	bl	8007568 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8002aec:	f000 f8d2 	bl	8002c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002af0:	4803      	ldr	r0, [pc, #12]	@ (8002b00 <MX_TIM1_Init+0x118>)
 8002af2:	f000 fc05 	bl	8003300 <HAL_TIM_MspPostInit>

}
 8002af6:	bf00      	nop
 8002af8:	3758      	adds	r7, #88	@ 0x58
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	2000029c 	.word	0x2000029c
 8002b04:	40012c00 	.word	0x40012c00

08002b08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b0e:	4b10      	ldr	r3, [pc, #64]	@ (8002b50 <MX_DMA_Init+0x48>)
 8002b10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b12:	4a0f      	ldr	r2, [pc, #60]	@ (8002b50 <MX_DMA_Init+0x48>)
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	6493      	str	r3, [r2, #72]	@ 0x48
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b50 <MX_DMA_Init+0x48>)
 8002b1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	607b      	str	r3, [r7, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002b26:	2200      	movs	r2, #0
 8002b28:	2100      	movs	r1, #0
 8002b2a:	200c      	movs	r0, #12
 8002b2c:	f000 fe53 	bl	80037d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002b30:	200c      	movs	r0, #12
 8002b32:	f000 fe6c 	bl	800380e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002b36:	2200      	movs	r2, #0
 8002b38:	2100      	movs	r1, #0
 8002b3a:	200d      	movs	r0, #13
 8002b3c:	f000 fe4b 	bl	80037d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002b40:	200d      	movs	r0, #13
 8002b42:	f000 fe64 	bl	800380e <HAL_NVIC_EnableIRQ>

}
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40021000 	.word	0x40021000

08002b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08c      	sub	sp, #48	@ 0x30
 8002b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b5a:	f107 031c 	add.w	r3, r7, #28
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	605a      	str	r2, [r3, #4]
 8002b64:	609a      	str	r2, [r3, #8]
 8002b66:	60da      	str	r2, [r3, #12]
 8002b68:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6a:	4b46      	ldr	r3, [pc, #280]	@ (8002c84 <MX_GPIO_Init+0x130>)
 8002b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b6e:	4a45      	ldr	r2, [pc, #276]	@ (8002c84 <MX_GPIO_Init+0x130>)
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b76:	4b43      	ldr	r3, [pc, #268]	@ (8002c84 <MX_GPIO_Init+0x130>)
 8002b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	61bb      	str	r3, [r7, #24]
 8002b80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b82:	4b40      	ldr	r3, [pc, #256]	@ (8002c84 <MX_GPIO_Init+0x130>)
 8002b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b86:	4a3f      	ldr	r2, [pc, #252]	@ (8002c84 <MX_GPIO_Init+0x130>)
 8002b88:	f043 0320 	orr.w	r3, r3, #32
 8002b8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b8e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c84 <MX_GPIO_Init+0x130>)
 8002b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b92:	f003 0320 	and.w	r3, r3, #32
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b9a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c84 <MX_GPIO_Init+0x130>)
 8002b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b9e:	4a39      	ldr	r2, [pc, #228]	@ (8002c84 <MX_GPIO_Init+0x130>)
 8002ba0:	f043 0310 	orr.w	r3, r3, #16
 8002ba4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ba6:	4b37      	ldr	r3, [pc, #220]	@ (8002c84 <MX_GPIO_Init+0x130>)
 8002ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002baa:	f003 0310 	and.w	r3, r3, #16
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb2:	4b34      	ldr	r3, [pc, #208]	@ (8002c84 <MX_GPIO_Init+0x130>)
 8002bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bb6:	4a33      	ldr	r2, [pc, #204]	@ (8002c84 <MX_GPIO_Init+0x130>)
 8002bb8:	f043 0302 	orr.w	r3, r3, #2
 8002bbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bbe:	4b31      	ldr	r3, [pc, #196]	@ (8002c84 <MX_GPIO_Init+0x130>)
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bca:	4b2e      	ldr	r3, [pc, #184]	@ (8002c84 <MX_GPIO_Init+0x130>)
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bce:	4a2d      	ldr	r2, [pc, #180]	@ (8002c84 <MX_GPIO_Init+0x130>)
 8002bd0:	f043 0308 	orr.w	r3, r3, #8
 8002bd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8002c84 <MX_GPIO_Init+0x130>)
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	60bb      	str	r3, [r7, #8]
 8002be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002be2:	4b28      	ldr	r3, [pc, #160]	@ (8002c84 <MX_GPIO_Init+0x130>)
 8002be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be6:	4a27      	ldr	r2, [pc, #156]	@ (8002c84 <MX_GPIO_Init+0x130>)
 8002be8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bee:	4b25      	ldr	r3, [pc, #148]	@ (8002c84 <MX_GPIO_Init+0x130>)
 8002bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bf6:	607b      	str	r3, [r7, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8002bfa:	f001 fde1 	bl	80047c0 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c04:	4820      	ldr	r0, [pc, #128]	@ (8002c88 <MX_GPIO_Init+0x134>)
 8002c06:	f001 fd45 	bl	8004694 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002c10:	481e      	ldr	r0, [pc, #120]	@ (8002c8c <MX_GPIO_Init+0x138>)
 8002c12:	f001 fd3f 	bl	8004694 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS_Pin|reset_Pin, GPIO_PIN_RESET);
 8002c16:	2200      	movs	r2, #0
 8002c18:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8002c1c:	481c      	ldr	r0, [pc, #112]	@ (8002c90 <MX_GPIO_Init+0x13c>)
 8002c1e:	f001 fd39 	bl	8004694 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DC_Pin */
  GPIO_InitStruct.Pin = DC_Pin;
 8002c22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c30:	2300      	movs	r3, #0
 8002c32:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8002c34:	f107 031c 	add.w	r3, r7, #28
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4813      	ldr	r0, [pc, #76]	@ (8002c88 <MX_GPIO_Init+0x134>)
 8002c3c:	f001 faa6 	bl	800418c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002c40:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c46:	2301      	movs	r3, #1
 8002c48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c52:	f107 031c 	add.w	r3, r7, #28
 8002c56:	4619      	mov	r1, r3
 8002c58:	480c      	ldr	r0, [pc, #48]	@ (8002c8c <MX_GPIO_Init+0x138>)
 8002c5a:	f001 fa97 	bl	800418c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin reset_Pin */
  GPIO_InitStruct.Pin = CS_Pin|reset_Pin;
 8002c5e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c64:	2301      	movs	r3, #1
 8002c66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c70:	f107 031c 	add.w	r3, r7, #28
 8002c74:	4619      	mov	r1, r3
 8002c76:	4806      	ldr	r0, [pc, #24]	@ (8002c90 <MX_GPIO_Init+0x13c>)
 8002c78:	f001 fa88 	bl	800418c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002c7c:	bf00      	nop
 8002c7e:	3730      	adds	r7, #48	@ 0x30
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40021000 	.word	0x40021000
 8002c88:	48001400 	.word	0x48001400
 8002c8c:	48000400 	.word	0x48000400
 8002c90:	48000c00 	.word	0x48000c00

08002c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c98:	b672      	cpsid	i
}
 8002c9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c9c:	bf00      	nop
 8002c9e:	e7fd      	b.n	8002c9c <Error_Handler+0x8>

08002ca0 <action_test_lcd>:


uint8_t brightness = 50;  // Default 50%


void action_test_lcd(){testAll();}
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	f7ff f859 	bl	8001d5a <testAll>
 8002ca8:	bf00      	nop
 8002caa:	bd80      	pop	{r7, pc}

08002cac <draw_bulb_on>:

void draw_bulb_on(void) {
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af02      	add	r7, sp, #8
	fillScreen(BLACK);
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f7fe fbaa 	bl	800140c <fillScreen>
    fillCircle(64, 40, 20, YELLOW);         // Bulb head
 8002cb8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002cbc:	2214      	movs	r2, #20
 8002cbe:	2128      	movs	r1, #40	@ 0x28
 8002cc0:	2040      	movs	r0, #64	@ 0x40
 8002cc2:	f7fe f852 	bl	8000d6a <fillCircle>
    ST7735_FillRectangle(60, 60, 8, 15, GRAY);          // Bulb base
 8002cc6:	f248 4310 	movw	r3, #33808	@ 0x8410
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	230f      	movs	r3, #15
 8002cce:	2208      	movs	r2, #8
 8002cd0:	213c      	movs	r1, #60	@ 0x3c
 8002cd2:	203c      	movs	r0, #60	@ 0x3c
 8002cd4:	f7ff fbc2 	bl	800245c <ST7735_FillRectangle>
    drawLine(64, 75, 64, 100, ORANGE);      // Glow line
 8002cd8:	f64f 53a0 	movw	r3, #64928	@ 0xfda0
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	2364      	movs	r3, #100	@ 0x64
 8002ce0:	2240      	movs	r2, #64	@ 0x40
 8002ce2:	214b      	movs	r1, #75	@ 0x4b
 8002ce4:	2040      	movs	r0, #64	@ 0x40
 8002ce6:	f7fd fd50 	bl	800078a <drawLine>
}
 8002cea:	bf00      	nop
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <draw_bulb_off>:
//draw simple led off
void draw_bulb_off(void) {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af02      	add	r7, sp, #8
    fillScreen(BLACK);
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	f7fe fb88 	bl	800140c <fillScreen>
    fillCircle(64, 40, 20, GRAY);         // Bulb head
 8002cfc:	f248 4310 	movw	r3, #33808	@ 0x8410
 8002d00:	2214      	movs	r2, #20
 8002d02:	2128      	movs	r1, #40	@ 0x28
 8002d04:	2040      	movs	r0, #64	@ 0x40
 8002d06:	f7fe f830 	bl	8000d6a <fillCircle>
    ST7735_FillRectangle(60, 60, 8, 15, WHITE);          // Bulb base
 8002d0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	230f      	movs	r3, #15
 8002d12:	2208      	movs	r2, #8
 8002d14:	213c      	movs	r1, #60	@ 0x3c
 8002d16:	203c      	movs	r0, #60	@ 0x3c
 8002d18:	f7ff fba0 	bl	800245c <ST7735_FillRectangle>
    drawLine(64, 75, 64, 100, ORANGE);      // Glow line
 8002d1c:	f64f 53a0 	movw	r3, #64928	@ 0xfda0
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	2364      	movs	r3, #100	@ 0x64
 8002d24:	2240      	movs	r2, #64	@ 0x40
 8002d26:	214b      	movs	r1, #75	@ 0x4b
 8002d28:	2040      	movs	r0, #64	@ 0x40
 8002d2a:	f7fd fd2e 	bl	800078a <drawLine>
}
 8002d2e:	bf00      	nop
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <action_led_on>:
void action_led_on(){
 8002d34:	b590      	push	{r4, r7, lr}
 8002d36:	b089      	sub	sp, #36	@ 0x24
 8002d38:	af04      	add	r7, sp, #16
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // LED ON
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d40:	480f      	ldr	r0, [pc, #60]	@ (8002d80 <action_led_on+0x4c>)
 8002d42:	f001 fca7 	bl	8004694 <HAL_GPIO_WritePin>
	char msg[] = "LED turned ON\r\n";
 8002d46:	4b0f      	ldr	r3, [pc, #60]	@ (8002d84 <action_led_on+0x50>)
 8002d48:	463c      	mov	r4, r7
 8002d4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	fillScreen(BLACK);
 8002d50:	2000      	movs	r0, #0
 8002d52:	f7fe fb5b 	bl	800140c <fillScreen>
	draw_bulb_on();
 8002d56:	f7ff ffa9 	bl	8002cac <draw_bulb_on>
	ST7735_WriteString(5, 90,msg, Font_11x18, YELLOW, BLACK);
 8002d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d88 <action_led_on+0x54>)
 8002d5c:	4639      	mov	r1, r7
 8002d5e:	2200      	movs	r2, #0
 8002d60:	9202      	str	r2, [sp, #8]
 8002d62:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002d66:	9201      	str	r2, [sp, #4]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	9200      	str	r2, [sp, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	460a      	mov	r2, r1
 8002d70:	215a      	movs	r1, #90	@ 0x5a
 8002d72:	2005      	movs	r0, #5
 8002d74:	f7ff fb04 	bl	8002380 <ST7735_WriteString>
}
 8002d78:	bf00      	nop
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd90      	pop	{r4, r7, pc}
 8002d80:	48000400 	.word	0x48000400
 8002d84:	08008ffc 	.word	0x08008ffc
 8002d88:	20000004 	.word	0x20000004

08002d8c <action_led_off>:
void action_led_off(){
 8002d8c:	b5b0      	push	{r4, r5, r7, lr}
 8002d8e:	b08a      	sub	sp, #40	@ 0x28
 8002d90:	af04      	add	r7, sp, #16
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // LED OFF
 8002d92:	2200      	movs	r2, #0
 8002d94:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d98:	4810      	ldr	r0, [pc, #64]	@ (8002ddc <action_led_off+0x50>)
 8002d9a:	f001 fc7b 	bl	8004694 <HAL_GPIO_WritePin>
	char msg[] = "LED turned OFF\r\n";
 8002d9e:	4b10      	ldr	r3, [pc, #64]	@ (8002de0 <action_led_off+0x54>)
 8002da0:	1d3c      	adds	r4, r7, #4
 8002da2:	461d      	mov	r5, r3
 8002da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002da8:	682b      	ldr	r3, [r5, #0]
 8002daa:	7023      	strb	r3, [r4, #0]
	fillScreen(BLACK);
 8002dac:	2000      	movs	r0, #0
 8002dae:	f7fe fb2d 	bl	800140c <fillScreen>
	draw_bulb_off();
 8002db2:	f7ff ff9d 	bl	8002cf0 <draw_bulb_off>
	ST7735_WriteString(5, 90,msg, Font_11x18,CYAN, BLACK);
 8002db6:	4b0b      	ldr	r3, [pc, #44]	@ (8002de4 <action_led_off+0x58>)
 8002db8:	1d39      	adds	r1, r7, #4
 8002dba:	2200      	movs	r2, #0
 8002dbc:	9202      	str	r2, [sp, #8]
 8002dbe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002dc2:	9201      	str	r2, [sp, #4]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	9200      	str	r2, [sp, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	460a      	mov	r2, r1
 8002dcc:	215a      	movs	r1, #90	@ 0x5a
 8002dce:	2005      	movs	r0, #5
 8002dd0:	f7ff fad6 	bl	8002380 <ST7735_WriteString>
}
 8002dd4:	bf00      	nop
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bdb0      	pop	{r4, r5, r7, pc}
 8002ddc:	48000400 	.word	0x48000400
 8002de0:	0800900c 	.word	0x0800900c
 8002de4:	20000004 	.word	0x20000004

08002de8 <led_toggle>:
void led_toggle(){
 8002de8:	b590      	push	{r4, r7, lr}
 8002dea:	b089      	sub	sp, #36	@ 0x24
 8002dec:	af04      	add	r7, sp, #16
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8002dee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002df2:	480f      	ldr	r0, [pc, #60]	@ (8002e30 <led_toggle+0x48>)
 8002df4:	f001 fc66 	bl	80046c4 <HAL_GPIO_TogglePin>
	char msg[] = "LED Toggled\r\n";
 8002df8:	4b0e      	ldr	r3, [pc, #56]	@ (8002e34 <led_toggle+0x4c>)
 8002dfa:	463c      	mov	r4, r7
 8002dfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dfe:	c407      	stmia	r4!, {r0, r1, r2}
 8002e00:	8023      	strh	r3, [r4, #0]

	fillScreen(BLACK);
 8002e02:	2000      	movs	r0, #0
 8002e04:	f7fe fb02 	bl	800140c <fillScreen>

	ST7735_WriteString(5, 90,msg, Font_11x18, GREEN, BLACK);
 8002e08:	4b0b      	ldr	r3, [pc, #44]	@ (8002e38 <led_toggle+0x50>)
 8002e0a:	4639      	mov	r1, r7
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	9202      	str	r2, [sp, #8]
 8002e10:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002e14:	9201      	str	r2, [sp, #4]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	9200      	str	r2, [sp, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	460a      	mov	r2, r1
 8002e1e:	215a      	movs	r1, #90	@ 0x5a
 8002e20:	2005      	movs	r0, #5
 8002e22:	f7ff faad 	bl	8002380 <ST7735_WriteString>
}
 8002e26:	bf00      	nop
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd90      	pop	{r4, r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	48000400 	.word	0x48000400
 8002e34:	08009020 	.word	0x08009020
 8002e38:	20000004 	.word	0x20000004

08002e3c <draw_menu>:




void draw_menu(int selected) {
 8002e3c:	b590      	push	{r4, r7, lr}
 8002e3e:	b089      	sub	sp, #36	@ 0x24
 8002e40:	af04      	add	r7, sp, #16
 8002e42:	6078      	str	r0, [r7, #4]
	fillScreen(BLACK);
 8002e44:	2000      	movs	r0, #0
 8002e46:	f7fe fae1 	bl	800140c <fillScreen>

    for (int i = 0; i < NUM_OPTIONS; i++) {
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	e036      	b.n	8002ebe <draw_menu+0x82>
        uint16_t y = 10 + i * 20;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	461a      	mov	r2, r3
 8002e56:	0092      	lsls	r2, r2, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	330a      	adds	r3, #10
 8002e60:	817b      	strh	r3, [r7, #10]
        if (i == selected) {
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d10d      	bne.n	8002e86 <draw_menu+0x4a>
        	 ST7735_WriteString(10, y, "->", Font_11x18, YELLOW, BLACK);
 8002e6a:	4b19      	ldr	r3, [pc, #100]	@ (8002ed0 <draw_menu+0x94>)
 8002e6c:	8979      	ldrh	r1, [r7, #10]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	9202      	str	r2, [sp, #8]
 8002e72:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002e76:	9201      	str	r2, [sp, #4]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	9200      	str	r2, [sp, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a15      	ldr	r2, [pc, #84]	@ (8002ed4 <draw_menu+0x98>)
 8002e80:	200a      	movs	r0, #10
 8002e82:	f7ff fa7d 	bl	8002380 <ST7735_WriteString>

        }
        ST7735_WriteString(30, y, menu[i].label, Font_11x18,//check if the string is selected, if selected make it yellow
 8002e86:	4a14      	ldr	r2, [pc, #80]	@ (8002ed8 <draw_menu+0x9c>)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d102      	bne.n	8002e9c <draw_menu+0x60>
 8002e96:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002e9a:	e001      	b.n	8002ea0 <draw_menu+0x64>
 8002e9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed0 <draw_menu+0x94>)
 8002ea2:	8979      	ldrh	r1, [r7, #10]
 8002ea4:	2400      	movs	r4, #0
 8002ea6:	9402      	str	r4, [sp, #8]
 8002ea8:	9201      	str	r2, [sp, #4]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	9200      	str	r2, [sp, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	201e      	movs	r0, #30
 8002eb4:	f7ff fa64 	bl	8002380 <ST7735_WriteString>
    for (int i = 0; i < NUM_OPTIONS; i++) {
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	2204      	movs	r2, #4
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	dbc4      	blt.n	8002e50 <draw_menu+0x14>
                i == selected ? YELLOW : WHITE, BLACK);
    }

}
 8002ec6:	bf00      	nop
 8002ec8:	bf00      	nop
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd90      	pop	{r4, r7, pc}
 8002ed0:	20000004 	.word	0x20000004
 8002ed4:	08009030 	.word	0x08009030
 8002ed8:	2000000c 	.word	0x2000000c

08002edc <set_backlight_brightness>:



void set_backlight_brightness(uint8_t percent) {
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	71fb      	strb	r3, [r7, #7]
    if (percent > 100) percent = 100;
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	2b64      	cmp	r3, #100	@ 0x64
 8002eea:	d901      	bls.n	8002ef0 <set_backlight_brightness+0x14>
 8002eec:	2364      	movs	r3, #100	@ 0x64
 8002eee:	71fb      	strb	r3, [r7, #7]
    uint32_t pulse = (htim1.Init.Period + 1) * percent / 100;
 8002ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8002f1c <set_backlight_brightness+0x40>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	79fa      	ldrb	r2, [r7, #7]
 8002ef8:	fb02 f303 	mul.w	r3, r2, r3
 8002efc:	4a08      	ldr	r2, [pc, #32]	@ (8002f20 <set_backlight_brightness+0x44>)
 8002efe:	fba2 2303 	umull	r2, r3, r2, r3
 8002f02:	095b      	lsrs	r3, r3, #5
 8002f04:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 8002f06:	4b05      	ldr	r3, [pc, #20]	@ (8002f1c <set_backlight_brightness+0x40>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	635a      	str	r2, [r3, #52]	@ 0x34


}
 8002f0e:	bf00      	nop
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	2000029c 	.word	0x2000029c
 8002f20:	51eb851f 	.word	0x51eb851f

08002f24 <backlight_display>:
void backlight_display(){
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af04      	add	r7, sp, #16
	  char b_str[8];  // Enough for "100%" + null terminator

	    // Easy conversion
	    b_str[0] = (brightness / 100) + '0';                 // Hundreds
 8002f2a:	4b29      	ldr	r3, [pc, #164]	@ (8002fd0 <backlight_display+0xac>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	4a29      	ldr	r2, [pc, #164]	@ (8002fd4 <backlight_display+0xb0>)
 8002f30:	fba2 2303 	umull	r2, r3, r2, r3
 8002f34:	095b      	lsrs	r3, r3, #5
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	3330      	adds	r3, #48	@ 0x30
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	703b      	strb	r3, [r7, #0]
	    b_str[1] = ((brightness / 10) % 10) + '0';           // Tens
 8002f3e:	4b24      	ldr	r3, [pc, #144]	@ (8002fd0 <backlight_display+0xac>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	4a25      	ldr	r2, [pc, #148]	@ (8002fd8 <backlight_display+0xb4>)
 8002f44:	fba2 2303 	umull	r2, r3, r2, r3
 8002f48:	08db      	lsrs	r3, r3, #3
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	4b22      	ldr	r3, [pc, #136]	@ (8002fd8 <backlight_display+0xb4>)
 8002f4e:	fba3 1302 	umull	r1, r3, r3, r2
 8002f52:	08d9      	lsrs	r1, r3, #3
 8002f54:	460b      	mov	r3, r1
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	3330      	adds	r3, #48	@ 0x30
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	707b      	strb	r3, [r7, #1]
	    b_str[2] = (brightness % 10) + '0';                  // Ones
 8002f66:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd0 <backlight_display+0xac>)
 8002f68:	781a      	ldrb	r2, [r3, #0]
 8002f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd8 <backlight_display+0xb4>)
 8002f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f70:	08d9      	lsrs	r1, r3, #3
 8002f72:	460b      	mov	r3, r1
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	3330      	adds	r3, #48	@ 0x30
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	70bb      	strb	r3, [r7, #2]
	    b_str[3] = '%';                                      // Percent symbol
 8002f84:	2325      	movs	r3, #37	@ 0x25
 8002f86:	70fb      	strb	r3, [r7, #3]
	    b_str[4] = '\0';                                     // Null-terminate
 8002f88:	2300      	movs	r3, #0
 8002f8a:	713b      	strb	r3, [r7, #4]
	    ST7735_WriteString(0, 100, "Bright: ", Font_11x18, WHITE, BLACK);
 8002f8c:	4b13      	ldr	r3, [pc, #76]	@ (8002fdc <backlight_display+0xb8>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	9202      	str	r2, [sp, #8]
 8002f92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f96:	9201      	str	r2, [sp, #4]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	9200      	str	r2, [sp, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a10      	ldr	r2, [pc, #64]	@ (8002fe0 <backlight_display+0xbc>)
 8002fa0:	2164      	movs	r1, #100	@ 0x64
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	f7ff f9ec 	bl	8002380 <ST7735_WriteString>
	    ST7735_WriteString(95, 100, b_str, Font_11x18, WHITE, BLACK);
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8002fdc <backlight_display+0xb8>)
 8002faa:	4639      	mov	r1, r7
 8002fac:	2200      	movs	r2, #0
 8002fae:	9202      	str	r2, [sp, #8]
 8002fb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fb4:	9201      	str	r2, [sp, #4]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	9200      	str	r2, [sp, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	460a      	mov	r2, r1
 8002fbe:	2164      	movs	r1, #100	@ 0x64
 8002fc0:	205f      	movs	r0, #95	@ 0x5f
 8002fc2:	f7ff f9dd 	bl	8002380 <ST7735_WriteString>
}
 8002fc6:	bf00      	nop
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	2000002c 	.word	0x2000002c
 8002fd4:	51eb851f 	.word	0x51eb851f
 8002fd8:	cccccccd 	.word	0xcccccccd
 8002fdc:	20000004 	.word	0x20000004
 8002fe0:	08009034 	.word	0x08009034

08002fe4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fea:	4b0f      	ldr	r3, [pc, #60]	@ (8003028 <HAL_MspInit+0x44>)
 8002fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fee:	4a0e      	ldr	r2, [pc, #56]	@ (8003028 <HAL_MspInit+0x44>)
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8003028 <HAL_MspInit+0x44>)
 8002ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	607b      	str	r3, [r7, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003002:	4b09      	ldr	r3, [pc, #36]	@ (8003028 <HAL_MspInit+0x44>)
 8003004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003006:	4a08      	ldr	r2, [pc, #32]	@ (8003028 <HAL_MspInit+0x44>)
 8003008:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800300c:	6593      	str	r3, [r2, #88]	@ 0x58
 800300e:	4b06      	ldr	r3, [pc, #24]	@ (8003028 <HAL_MspInit+0x44>)
 8003010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003016:	603b      	str	r3, [r7, #0]
 8003018:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40021000 	.word	0x40021000

0800302c <HAL_CRYP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcryp: CRYP handle pointer
  * @retval None
  */
void HAL_CRYP_MspInit(CRYP_HandleTypeDef* hcryp)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  if(hcryp->Instance==AES)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a0a      	ldr	r2, [pc, #40]	@ (8003064 <HAL_CRYP_MspInit+0x38>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d10b      	bne.n	8003056 <HAL_CRYP_MspInit+0x2a>
  {
    /* USER CODE BEGIN AES_MspInit 0 */

    /* USER CODE END AES_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 800303e:	4b0a      	ldr	r3, [pc, #40]	@ (8003068 <HAL_CRYP_MspInit+0x3c>)
 8003040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003042:	4a09      	ldr	r2, [pc, #36]	@ (8003068 <HAL_CRYP_MspInit+0x3c>)
 8003044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003048:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800304a:	4b07      	ldr	r3, [pc, #28]	@ (8003068 <HAL_CRYP_MspInit+0x3c>)
 800304c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800304e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END AES_MspInit 1 */

  }

}
 8003056:	bf00      	nop
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	50060000 	.word	0x50060000
 8003068:	40021000 	.word	0x40021000

0800306c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b0ac      	sub	sp, #176	@ 0xb0
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003074:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	60da      	str	r2, [r3, #12]
 8003082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003084:	f107 0310 	add.w	r3, r7, #16
 8003088:	228c      	movs	r2, #140	@ 0x8c
 800308a:	2100      	movs	r1, #0
 800308c:	4618      	mov	r0, r3
 800308e:	f005 ff07 	bl	8008ea0 <memset>
  if(huart->Instance==LPUART1)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a26      	ldr	r2, [pc, #152]	@ (8003130 <HAL_UART_MspInit+0xc4>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d145      	bne.n	8003128 <HAL_UART_MspInit+0xbc>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800309c:	2320      	movs	r3, #32
 800309e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80030a0:	2300      	movs	r3, #0
 80030a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030a4:	f107 0310 	add.w	r3, r7, #16
 80030a8:	4618      	mov	r0, r3
 80030aa:	f002 f9d7 	bl	800545c <HAL_RCCEx_PeriphCLKConfig>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80030b4:	f7ff fdee 	bl	8002c94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80030b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003134 <HAL_UART_MspInit+0xc8>)
 80030ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003134 <HAL_UART_MspInit+0xc8>)
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80030c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003134 <HAL_UART_MspInit+0xc8>)
 80030c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80030d0:	4b18      	ldr	r3, [pc, #96]	@ (8003134 <HAL_UART_MspInit+0xc8>)
 80030d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030d4:	4a17      	ldr	r2, [pc, #92]	@ (8003134 <HAL_UART_MspInit+0xc8>)
 80030d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030dc:	4b15      	ldr	r3, [pc, #84]	@ (8003134 <HAL_UART_MspInit+0xc8>)
 80030de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80030e8:	f001 fb6a 	bl	80047c0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80030ec:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80030f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f4:	2302      	movs	r3, #2
 80030f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003100:	2303      	movs	r3, #3
 8003102:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003106:	2308      	movs	r3, #8
 8003108:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800310c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003110:	4619      	mov	r1, r3
 8003112:	4809      	ldr	r0, [pc, #36]	@ (8003138 <HAL_UART_MspInit+0xcc>)
 8003114:	f001 f83a 	bl	800418c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003118:	2200      	movs	r2, #0
 800311a:	2100      	movs	r1, #0
 800311c:	2046      	movs	r0, #70	@ 0x46
 800311e:	f000 fb5a 	bl	80037d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003122:	2046      	movs	r0, #70	@ 0x46
 8003124:	f000 fb73 	bl	800380e <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8003128:	bf00      	nop
 800312a:	37b0      	adds	r7, #176	@ 0xb0
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40008000 	.word	0x40008000
 8003134:	40021000 	.word	0x40021000
 8003138:	48001800 	.word	0x48001800

0800313c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08a      	sub	sp, #40	@ 0x28
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003144:	f107 0314 	add.w	r3, r7, #20
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	609a      	str	r2, [r3, #8]
 8003150:	60da      	str	r2, [r3, #12]
 8003152:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a40      	ldr	r2, [pc, #256]	@ (800325c <HAL_SPI_MspInit+0x120>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d17a      	bne.n	8003254 <HAL_SPI_MspInit+0x118>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800315e:	4b40      	ldr	r3, [pc, #256]	@ (8003260 <HAL_SPI_MspInit+0x124>)
 8003160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003162:	4a3f      	ldr	r2, [pc, #252]	@ (8003260 <HAL_SPI_MspInit+0x124>)
 8003164:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003168:	6613      	str	r3, [r2, #96]	@ 0x60
 800316a:	4b3d      	ldr	r3, [pc, #244]	@ (8003260 <HAL_SPI_MspInit+0x124>)
 800316c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800316e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003176:	4b3a      	ldr	r3, [pc, #232]	@ (8003260 <HAL_SPI_MspInit+0x124>)
 8003178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800317a:	4a39      	ldr	r2, [pc, #228]	@ (8003260 <HAL_SPI_MspInit+0x124>)
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003182:	4b37      	ldr	r3, [pc, #220]	@ (8003260 <HAL_SPI_MspInit+0x124>)
 8003184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800318e:	23e0      	movs	r3, #224	@ 0xe0
 8003190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003192:	2302      	movs	r3, #2
 8003194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800319a:	2303      	movs	r3, #3
 800319c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800319e:	2305      	movs	r3, #5
 80031a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a2:	f107 0314 	add.w	r3, r7, #20
 80031a6:	4619      	mov	r1, r3
 80031a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031ac:	f000 ffee 	bl	800418c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80031b0:	4b2c      	ldr	r3, [pc, #176]	@ (8003264 <HAL_SPI_MspInit+0x128>)
 80031b2:	4a2d      	ldr	r2, [pc, #180]	@ (8003268 <HAL_SPI_MspInit+0x12c>)
 80031b4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 80031b6:	4b2b      	ldr	r3, [pc, #172]	@ (8003264 <HAL_SPI_MspInit+0x128>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031bc:	4b29      	ldr	r3, [pc, #164]	@ (8003264 <HAL_SPI_MspInit+0x128>)
 80031be:	2200      	movs	r2, #0
 80031c0:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031c2:	4b28      	ldr	r3, [pc, #160]	@ (8003264 <HAL_SPI_MspInit+0x128>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031c8:	4b26      	ldr	r3, [pc, #152]	@ (8003264 <HAL_SPI_MspInit+0x128>)
 80031ca:	2280      	movs	r2, #128	@ 0x80
 80031cc:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031ce:	4b25      	ldr	r3, [pc, #148]	@ (8003264 <HAL_SPI_MspInit+0x128>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031d4:	4b23      	ldr	r3, [pc, #140]	@ (8003264 <HAL_SPI_MspInit+0x128>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80031da:	4b22      	ldr	r3, [pc, #136]	@ (8003264 <HAL_SPI_MspInit+0x128>)
 80031dc:	2200      	movs	r2, #0
 80031de:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80031e0:	4b20      	ldr	r3, [pc, #128]	@ (8003264 <HAL_SPI_MspInit+0x128>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80031e6:	481f      	ldr	r0, [pc, #124]	@ (8003264 <HAL_SPI_MspInit+0x128>)
 80031e8:	f000 fcc8 	bl	8003b7c <HAL_DMA_Init>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80031f2:	f7ff fd4f 	bl	8002c94 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003264 <HAL_SPI_MspInit+0x128>)
 80031fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80031fc:	4a19      	ldr	r2, [pc, #100]	@ (8003264 <HAL_SPI_MspInit+0x128>)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8003202:	4b1a      	ldr	r3, [pc, #104]	@ (800326c <HAL_SPI_MspInit+0x130>)
 8003204:	4a1a      	ldr	r2, [pc, #104]	@ (8003270 <HAL_SPI_MspInit+0x134>)
 8003206:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8003208:	4b18      	ldr	r3, [pc, #96]	@ (800326c <HAL_SPI_MspInit+0x130>)
 800320a:	2201      	movs	r2, #1
 800320c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800320e:	4b17      	ldr	r3, [pc, #92]	@ (800326c <HAL_SPI_MspInit+0x130>)
 8003210:	2210      	movs	r2, #16
 8003212:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003214:	4b15      	ldr	r3, [pc, #84]	@ (800326c <HAL_SPI_MspInit+0x130>)
 8003216:	2200      	movs	r2, #0
 8003218:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800321a:	4b14      	ldr	r3, [pc, #80]	@ (800326c <HAL_SPI_MspInit+0x130>)
 800321c:	2280      	movs	r2, #128	@ 0x80
 800321e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003220:	4b12      	ldr	r3, [pc, #72]	@ (800326c <HAL_SPI_MspInit+0x130>)
 8003222:	2200      	movs	r2, #0
 8003224:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003226:	4b11      	ldr	r3, [pc, #68]	@ (800326c <HAL_SPI_MspInit+0x130>)
 8003228:	2200      	movs	r2, #0
 800322a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800322c:	4b0f      	ldr	r3, [pc, #60]	@ (800326c <HAL_SPI_MspInit+0x130>)
 800322e:	2200      	movs	r2, #0
 8003230:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003232:	4b0e      	ldr	r3, [pc, #56]	@ (800326c <HAL_SPI_MspInit+0x130>)
 8003234:	2200      	movs	r2, #0
 8003236:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003238:	480c      	ldr	r0, [pc, #48]	@ (800326c <HAL_SPI_MspInit+0x130>)
 800323a:	f000 fc9f 	bl	8003b7c <HAL_DMA_Init>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8003244:	f7ff fd26 	bl	8002c94 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a08      	ldr	r2, [pc, #32]	@ (800326c <HAL_SPI_MspInit+0x130>)
 800324c:	655a      	str	r2, [r3, #84]	@ 0x54
 800324e:	4a07      	ldr	r2, [pc, #28]	@ (800326c <HAL_SPI_MspInit+0x130>)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003254:	bf00      	nop
 8003256:	3728      	adds	r7, #40	@ 0x28
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40013000 	.word	0x40013000
 8003260:	40021000 	.word	0x40021000
 8003264:	2000020c 	.word	0x2000020c
 8003268:	4002001c 	.word	0x4002001c
 800326c:	20000254 	.word	0x20000254
 8003270:	40020030 	.word	0x40020030

08003274 <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a0d      	ldr	r2, [pc, #52]	@ (80032b8 <HAL_SPI_MspDeInit+0x44>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d114      	bne.n	80032b0 <HAL_SPI_MspDeInit+0x3c>
  {
    /* USER CODE BEGIN SPI1_MspDeInit 0 */

    /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8003286:	4b0d      	ldr	r3, [pc, #52]	@ (80032bc <HAL_SPI_MspDeInit+0x48>)
 8003288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800328a:	4a0c      	ldr	r2, [pc, #48]	@ (80032bc <HAL_SPI_MspDeInit+0x48>)
 800328c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003290:	6613      	str	r3, [r2, #96]	@ 0x60
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8003292:	21e0      	movs	r1, #224	@ 0xe0
 8003294:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003298:	f001 f90a 	bl	80044b0 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmarx);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 fd23 	bl	8003cec <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 fd1e 	bl	8003cec <HAL_DMA_DeInit>
    /* USER CODE BEGIN SPI1_MspDeInit 1 */

    /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 80032b0:	bf00      	nop
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40013000 	.word	0x40013000
 80032bc:	40021000 	.word	0x40021000

080032c0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a0a      	ldr	r2, [pc, #40]	@ (80032f8 <HAL_TIM_PWM_MspInit+0x38>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d10b      	bne.n	80032ea <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032d2:	4b0a      	ldr	r3, [pc, #40]	@ (80032fc <HAL_TIM_PWM_MspInit+0x3c>)
 80032d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032d6:	4a09      	ldr	r2, [pc, #36]	@ (80032fc <HAL_TIM_PWM_MspInit+0x3c>)
 80032d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80032dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80032de:	4b07      	ldr	r3, [pc, #28]	@ (80032fc <HAL_TIM_PWM_MspInit+0x3c>)
 80032e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80032ea:	bf00      	nop
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	40012c00 	.word	0x40012c00
 80032fc:	40021000 	.word	0x40021000

08003300 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003308:	f107 030c 	add.w	r3, r7, #12
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	605a      	str	r2, [r3, #4]
 8003312:	609a      	str	r2, [r3, #8]
 8003314:	60da      	str	r2, [r3, #12]
 8003316:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a11      	ldr	r2, [pc, #68]	@ (8003364 <HAL_TIM_MspPostInit+0x64>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d11c      	bne.n	800335c <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003322:	4b11      	ldr	r3, [pc, #68]	@ (8003368 <HAL_TIM_MspPostInit+0x68>)
 8003324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003326:	4a10      	ldr	r2, [pc, #64]	@ (8003368 <HAL_TIM_MspPostInit+0x68>)
 8003328:	f043 0310 	orr.w	r3, r3, #16
 800332c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800332e:	4b0e      	ldr	r3, [pc, #56]	@ (8003368 <HAL_TIM_MspPostInit+0x68>)
 8003330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003332:	f003 0310 	and.w	r3, r3, #16
 8003336:	60bb      	str	r3, [r7, #8]
 8003338:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800333a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800333e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003340:	2302      	movs	r3, #2
 8003342:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003348:	2300      	movs	r3, #0
 800334a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800334c:	2301      	movs	r3, #1
 800334e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003350:	f107 030c 	add.w	r3, r7, #12
 8003354:	4619      	mov	r1, r3
 8003356:	4805      	ldr	r0, [pc, #20]	@ (800336c <HAL_TIM_MspPostInit+0x6c>)
 8003358:	f000 ff18 	bl	800418c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800335c:	bf00      	nop
 800335e:	3720      	adds	r7, #32
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40012c00 	.word	0x40012c00
 8003368:	40021000 	.word	0x40021000
 800336c:	48001000 	.word	0x48001000

08003370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003374:	bf00      	nop
 8003376:	e7fd      	b.n	8003374 <NMI_Handler+0x4>

08003378 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800337c:	bf00      	nop
 800337e:	e7fd      	b.n	800337c <HardFault_Handler+0x4>

08003380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003384:	bf00      	nop
 8003386:	e7fd      	b.n	8003384 <MemManage_Handler+0x4>

08003388 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800338c:	bf00      	nop
 800338e:	e7fd      	b.n	800338c <BusFault_Handler+0x4>

08003390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003394:	bf00      	nop
 8003396:	e7fd      	b.n	8003394 <UsageFault_Handler+0x4>

08003398 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800339c:	bf00      	nop
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033a6:	b480      	push	{r7}
 80033a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033aa:	bf00      	nop
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033b8:	bf00      	nop
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033c6:	f000 f8e7 	bl	8003598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80033d4:	4802      	ldr	r0, [pc, #8]	@ (80033e0 <DMA1_Channel2_IRQHandler+0x10>)
 80033d6:	f000 fdfa 	bl	8003fce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	2000020c 	.word	0x2000020c

080033e4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80033e8:	4802      	ldr	r0, [pc, #8]	@ (80033f4 <DMA1_Channel3_IRQHandler+0x10>)
 80033ea:	f000 fdf0 	bl	8003fce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20000254 	.word	0x20000254

080033f8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80033fc:	4802      	ldr	r0, [pc, #8]	@ (8003408 <LPUART1_IRQHandler+0x10>)
 80033fe:	f004 f9cb 	bl	8007798 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	20000120 	.word	0x20000120

0800340c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003414:	4a14      	ldr	r2, [pc, #80]	@ (8003468 <_sbrk+0x5c>)
 8003416:	4b15      	ldr	r3, [pc, #84]	@ (800346c <_sbrk+0x60>)
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003420:	4b13      	ldr	r3, [pc, #76]	@ (8003470 <_sbrk+0x64>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d102      	bne.n	800342e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003428:	4b11      	ldr	r3, [pc, #68]	@ (8003470 <_sbrk+0x64>)
 800342a:	4a12      	ldr	r2, [pc, #72]	@ (8003474 <_sbrk+0x68>)
 800342c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800342e:	4b10      	ldr	r3, [pc, #64]	@ (8003470 <_sbrk+0x64>)
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4413      	add	r3, r2
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	429a      	cmp	r2, r3
 800343a:	d207      	bcs.n	800344c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800343c:	f005 fd48 	bl	8008ed0 <__errno>
 8003440:	4603      	mov	r3, r0
 8003442:	220c      	movs	r2, #12
 8003444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003446:	f04f 33ff 	mov.w	r3, #4294967295
 800344a:	e009      	b.n	8003460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800344c:	4b08      	ldr	r3, [pc, #32]	@ (8003470 <_sbrk+0x64>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003452:	4b07      	ldr	r3, [pc, #28]	@ (8003470 <_sbrk+0x64>)
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4413      	add	r3, r2
 800345a:	4a05      	ldr	r2, [pc, #20]	@ (8003470 <_sbrk+0x64>)
 800345c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800345e:	68fb      	ldr	r3, [r7, #12]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20050000 	.word	0x20050000
 800346c:	00000400 	.word	0x00000400
 8003470:	200002f0 	.word	0x200002f0
 8003474:	20000440 	.word	0x20000440

08003478 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800347c:	4b06      	ldr	r3, [pc, #24]	@ (8003498 <SystemInit+0x20>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003482:	4a05      	ldr	r2, [pc, #20]	@ (8003498 <SystemInit+0x20>)
 8003484:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003488:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800348c:	bf00      	nop
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	e000ed00 	.word	0xe000ed00

0800349c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800349c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80034d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80034a0:	f7ff ffea 	bl	8003478 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034a4:	480c      	ldr	r0, [pc, #48]	@ (80034d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80034a6:	490d      	ldr	r1, [pc, #52]	@ (80034dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80034a8:	4a0d      	ldr	r2, [pc, #52]	@ (80034e0 <LoopForever+0xe>)
  movs r3, #0
 80034aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034ac:	e002      	b.n	80034b4 <LoopCopyDataInit>

080034ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034b2:	3304      	adds	r3, #4

080034b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034b8:	d3f9      	bcc.n	80034ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034ba:	4a0a      	ldr	r2, [pc, #40]	@ (80034e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80034bc:	4c0a      	ldr	r4, [pc, #40]	@ (80034e8 <LoopForever+0x16>)
  movs r3, #0
 80034be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034c0:	e001      	b.n	80034c6 <LoopFillZerobss>

080034c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034c4:	3204      	adds	r2, #4

080034c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034c8:	d3fb      	bcc.n	80034c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034ca:	f005 fd07 	bl	8008edc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80034ce:	f7ff f8b3 	bl	8002638 <main>

080034d2 <LoopForever>:

LoopForever:
    b LoopForever
 80034d2:	e7fe      	b.n	80034d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80034d4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80034d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034dc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80034e0:	08009e8c 	.word	0x08009e8c
  ldr r2, =_sbss
 80034e4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80034e8:	20000440 	.word	0x20000440

080034ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80034ec:	e7fe      	b.n	80034ec <ADC1_2_IRQHandler>

080034ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034f8:	2003      	movs	r0, #3
 80034fa:	f000 f961 	bl	80037c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034fe:	200f      	movs	r0, #15
 8003500:	f000 f80e 	bl	8003520 <HAL_InitTick>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	71fb      	strb	r3, [r7, #7]
 800350e:	e001      	b.n	8003514 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003510:	f7ff fd68 	bl	8002fe4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003514:	79fb      	ldrb	r3, [r7, #7]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003528:	2300      	movs	r3, #0
 800352a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800352c:	4b17      	ldr	r3, [pc, #92]	@ (800358c <HAL_InitTick+0x6c>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d023      	beq.n	800357c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003534:	4b16      	ldr	r3, [pc, #88]	@ (8003590 <HAL_InitTick+0x70>)
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	4b14      	ldr	r3, [pc, #80]	@ (800358c <HAL_InitTick+0x6c>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	4619      	mov	r1, r3
 800353e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003542:	fbb3 f3f1 	udiv	r3, r3, r1
 8003546:	fbb2 f3f3 	udiv	r3, r2, r3
 800354a:	4618      	mov	r0, r3
 800354c:	f000 f96d 	bl	800382a <HAL_SYSTICK_Config>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10f      	bne.n	8003576 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b0f      	cmp	r3, #15
 800355a:	d809      	bhi.n	8003570 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800355c:	2200      	movs	r2, #0
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	f04f 30ff 	mov.w	r0, #4294967295
 8003564:	f000 f937 	bl	80037d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003568:	4a0a      	ldr	r2, [pc, #40]	@ (8003594 <HAL_InitTick+0x74>)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	e007      	b.n	8003580 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	73fb      	strb	r3, [r7, #15]
 8003574:	e004      	b.n	8003580 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	73fb      	strb	r3, [r7, #15]
 800357a:	e001      	b.n	8003580 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003580:	7bfb      	ldrb	r3, [r7, #15]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20000038 	.word	0x20000038
 8003590:	20000030 	.word	0x20000030
 8003594:	20000034 	.word	0x20000034

08003598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800359c:	4b06      	ldr	r3, [pc, #24]	@ (80035b8 <HAL_IncTick+0x20>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	461a      	mov	r2, r3
 80035a2:	4b06      	ldr	r3, [pc, #24]	@ (80035bc <HAL_IncTick+0x24>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4413      	add	r3, r2
 80035a8:	4a04      	ldr	r2, [pc, #16]	@ (80035bc <HAL_IncTick+0x24>)
 80035aa:	6013      	str	r3, [r2, #0]
}
 80035ac:	bf00      	nop
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	20000038 	.word	0x20000038
 80035bc:	200002f4 	.word	0x200002f4

080035c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  return uwTick;
 80035c4:	4b03      	ldr	r3, [pc, #12]	@ (80035d4 <HAL_GetTick+0x14>)
 80035c6:	681b      	ldr	r3, [r3, #0]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	200002f4 	.word	0x200002f4

080035d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035e0:	f7ff ffee 	bl	80035c0 <HAL_GetTick>
 80035e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f0:	d005      	beq.n	80035fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80035f2:	4b0a      	ldr	r3, [pc, #40]	@ (800361c <HAL_Delay+0x44>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	461a      	mov	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4413      	add	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035fe:	bf00      	nop
 8003600:	f7ff ffde 	bl	80035c0 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	429a      	cmp	r2, r3
 800360e:	d8f7      	bhi.n	8003600 <HAL_Delay+0x28>
  {
  }
}
 8003610:	bf00      	nop
 8003612:	bf00      	nop
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	20000038 	.word	0x20000038

08003620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003630:	4b0c      	ldr	r3, [pc, #48]	@ (8003664 <__NVIC_SetPriorityGrouping+0x44>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800363c:	4013      	ands	r3, r2
 800363e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003648:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800364c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003652:	4a04      	ldr	r2, [pc, #16]	@ (8003664 <__NVIC_SetPriorityGrouping+0x44>)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	60d3      	str	r3, [r2, #12]
}
 8003658:	bf00      	nop
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	e000ed00 	.word	0xe000ed00

08003668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800366c:	4b04      	ldr	r3, [pc, #16]	@ (8003680 <__NVIC_GetPriorityGrouping+0x18>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	0a1b      	lsrs	r3, r3, #8
 8003672:	f003 0307 	and.w	r3, r3, #7
}
 8003676:	4618      	mov	r0, r3
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	e000ed00 	.word	0xe000ed00

08003684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	4603      	mov	r3, r0
 800368c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800368e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003692:	2b00      	cmp	r3, #0
 8003694:	db0b      	blt.n	80036ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003696:	79fb      	ldrb	r3, [r7, #7]
 8003698:	f003 021f 	and.w	r2, r3, #31
 800369c:	4907      	ldr	r1, [pc, #28]	@ (80036bc <__NVIC_EnableIRQ+0x38>)
 800369e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	2001      	movs	r0, #1
 80036a6:	fa00 f202 	lsl.w	r2, r0, r2
 80036aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	e000e100 	.word	0xe000e100

080036c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	4603      	mov	r3, r0
 80036c8:	6039      	str	r1, [r7, #0]
 80036ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	db0a      	blt.n	80036ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	490c      	ldr	r1, [pc, #48]	@ (800370c <__NVIC_SetPriority+0x4c>)
 80036da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036de:	0112      	lsls	r2, r2, #4
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	440b      	add	r3, r1
 80036e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036e8:	e00a      	b.n	8003700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	4908      	ldr	r1, [pc, #32]	@ (8003710 <__NVIC_SetPriority+0x50>)
 80036f0:	79fb      	ldrb	r3, [r7, #7]
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	3b04      	subs	r3, #4
 80036f8:	0112      	lsls	r2, r2, #4
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	440b      	add	r3, r1
 80036fe:	761a      	strb	r2, [r3, #24]
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	e000e100 	.word	0xe000e100
 8003710:	e000ed00 	.word	0xe000ed00

08003714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003714:	b480      	push	{r7}
 8003716:	b089      	sub	sp, #36	@ 0x24
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f1c3 0307 	rsb	r3, r3, #7
 800372e:	2b04      	cmp	r3, #4
 8003730:	bf28      	it	cs
 8003732:	2304      	movcs	r3, #4
 8003734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	3304      	adds	r3, #4
 800373a:	2b06      	cmp	r3, #6
 800373c:	d902      	bls.n	8003744 <NVIC_EncodePriority+0x30>
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	3b03      	subs	r3, #3
 8003742:	e000      	b.n	8003746 <NVIC_EncodePriority+0x32>
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003748:	f04f 32ff 	mov.w	r2, #4294967295
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	43da      	mvns	r2, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	401a      	ands	r2, r3
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800375c:	f04f 31ff 	mov.w	r1, #4294967295
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	fa01 f303 	lsl.w	r3, r1, r3
 8003766:	43d9      	mvns	r1, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800376c:	4313      	orrs	r3, r2
         );
}
 800376e:	4618      	mov	r0, r3
 8003770:	3724      	adds	r7, #36	@ 0x24
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
	...

0800377c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3b01      	subs	r3, #1
 8003788:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800378c:	d301      	bcc.n	8003792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800378e:	2301      	movs	r3, #1
 8003790:	e00f      	b.n	80037b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003792:	4a0a      	ldr	r2, [pc, #40]	@ (80037bc <SysTick_Config+0x40>)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3b01      	subs	r3, #1
 8003798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800379a:	210f      	movs	r1, #15
 800379c:	f04f 30ff 	mov.w	r0, #4294967295
 80037a0:	f7ff ff8e 	bl	80036c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037a4:	4b05      	ldr	r3, [pc, #20]	@ (80037bc <SysTick_Config+0x40>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037aa:	4b04      	ldr	r3, [pc, #16]	@ (80037bc <SysTick_Config+0x40>)
 80037ac:	2207      	movs	r2, #7
 80037ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	e000e010 	.word	0xe000e010

080037c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7ff ff29 	bl	8003620 <__NVIC_SetPriorityGrouping>
}
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b086      	sub	sp, #24
 80037da:	af00      	add	r7, sp, #0
 80037dc:	4603      	mov	r3, r0
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	607a      	str	r2, [r7, #4]
 80037e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80037e4:	2300      	movs	r3, #0
 80037e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037e8:	f7ff ff3e 	bl	8003668 <__NVIC_GetPriorityGrouping>
 80037ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	68b9      	ldr	r1, [r7, #8]
 80037f2:	6978      	ldr	r0, [r7, #20]
 80037f4:	f7ff ff8e 	bl	8003714 <NVIC_EncodePriority>
 80037f8:	4602      	mov	r2, r0
 80037fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037fe:	4611      	mov	r1, r2
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff ff5d 	bl	80036c0 <__NVIC_SetPriority>
}
 8003806:	bf00      	nop
 8003808:	3718      	adds	r7, #24
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b082      	sub	sp, #8
 8003812:	af00      	add	r7, sp, #0
 8003814:	4603      	mov	r3, r0
 8003816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff ff31 	bl	8003684 <__NVIC_EnableIRQ>
}
 8003822:	bf00      	nop
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b082      	sub	sp, #8
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff ffa2 	bl	800377c <SysTick_Config>
 8003838:	4603      	mov	r3, r0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_CRYP_Init>:
  *       stored in the MCU memory before calling HAL_CRYP_Init(). Refer to explanations
  *       hereabove.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b082      	sub	sp, #8
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if(hcryp == NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e0cd      	b.n	80039f0 <HAL_CRYP_Init+0x1ae>
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
         ((hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CTR)           \
       || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_GCM_GMAC)      \
       || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CCM)))
#else
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	2b18      	cmp	r3, #24
 800385a:	d10e      	bne.n	800387a <HAL_CRYP_Init+0x38>
         ((hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CTR)           \
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	695b      	ldr	r3, [r3, #20]
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
 8003860:	2b40      	cmp	r3, #64	@ 0x40
 8003862:	d008      	beq.n	8003876 <HAL_CRYP_Init+0x34>
       || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_GCM_GMAC)      \
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	2b60      	cmp	r3, #96	@ 0x60
 800386a:	d004      	beq.n	8003876 <HAL_CRYP_Init+0x34>
       || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC)))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003874:	d101      	bne.n	800387a <HAL_CRYP_Init+0x38>
#endif
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e0ba      	b.n	80039f0 <HAL_CRYP_Init+0x1ae>
  /* Check that key derivation is not set in CMAC mode or CCM mode when applicable */
#if defined(AES_CR_NPBLB)
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
   && (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CCM))
#else
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	2b08      	cmp	r3, #8
 8003880:	d106      	bne.n	8003890 <HAL_CRYP_Init+0x4e>
   && (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800388a:	d101      	bne.n	8003890 <HAL_CRYP_Init+0x4e>
#endif
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0af      	b.n	80039f0 <HAL_CRYP_Init+0x1ae>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if(hcryp->State == HAL_CRYP_STATE_RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d106      	bne.n	80038aa <HAL_CRYP_Init+0x68>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff fbc1 	bl	800302c <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_BUSY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2202      	movs	r2, #2
 80038ae:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  /* Disable the Peripheral */
  __HAL_CRYP_DISABLE(hcryp);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0201 	bic.w	r2, r2, #1
 80038c0:	601a      	str	r2, [r3, #0]

  /*=============================================================*/
  /* AES initialization common to all operating modes            */
  /*=============================================================*/
  /* Set the Key size selection */
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	601a      	str	r2, [r3, #0]

  /* Set the default CRYP phase when this parameter is not used.
     Phase is updated below in case of GCM/GMAC(/CMAC)(/CCM) setting. */
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	220a      	movs	r2, #10
 80038dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /*=============================================================*/
  /* Carry on the initialization based on the AES operating mode */
  /*=============================================================*/
  /* Key derivation */
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d111      	bne.n	800390c <HAL_CRYP_Init+0xca>
  {
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_ALGOMODE_KEYDERIVATION);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f023 0218 	bic.w	r2, r3, #24
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0208 	orr.w	r2, r2, #8
 80038fa:	601a      	str	r2, [r3, #0]

    /* Configure the Key registers */
    if (CRYP_SetKey(hcryp) != HAL_OK)
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f87b 	bl	80039f8 <CRYP_SetKey>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d059      	beq.n	80039bc <HAL_CRYP_Init+0x17a>
    {
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e071      	b.n	80039f0 <HAL_CRYP_Init+0x1ae>
  /* Encryption / Decryption (with or without key derivation) / authentication */
  {
#if !defined(AES_CR_NPBLB)
    /* Set data type, operating and chaining modes.
       In case of GCM or GMAC, data type is forced to 0b00 */
    if (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_GCM_GMAC)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	2b60      	cmp	r3, #96	@ 0x60
 8003912:	d110      	bne.n	8003936 <HAL_CRYP_Init+0xf4>
    {
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800391e:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6911      	ldr	r1, [r2, #16]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6952      	ldr	r2, [r2, #20]
 800392a:	4311      	orrs	r1, r2
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6812      	ldr	r2, [r2, #0]
 8003930:	430b      	orrs	r3, r1
 8003932:	6013      	str	r3, [r2, #0]
 8003934:	e012      	b.n	800395c <HAL_CRYP_Init+0x11a>
    }
    else
#endif
    {
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003940:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6891      	ldr	r1, [r2, #8]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6912      	ldr	r2, [r2, #16]
 800394c:	4311      	orrs	r1, r2
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6952      	ldr	r2, [r2, #20]
 8003952:	4311      	orrs	r1, r2
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6812      	ldr	r2, [r2, #0]
 8003958:	430b      	orrs	r3, r1
 800395a:	6013      	str	r3, [r2, #0]
      or Counter with Cipher Mode (CCM) when applicable */
#if defined(AES_CR_NPBLB)
   if ((hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_GCM_GMAC)
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CCM))
#else
   if ((hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_GCM_GMAC)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	2b60      	cmp	r3, #96	@ 0x60
 8003962:	d004      	beq.n	800396e <HAL_CRYP_Init+0x12c>
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800396c:	d10e      	bne.n	800398c <HAL_CRYP_Init+0x14a>
#endif
    {
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f423 41c0 	bic.w	r1, r3, #24576	@ 0x6000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	69da      	ldr	r2, [r3, #28]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	601a      	str	r2, [r3, #0]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2203      	movs	r2, #3
 8003988:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    }


    /* Configure the Key registers if no need to bypass this step */
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d107      	bne.n	80039a4 <HAL_CRYP_Init+0x162>
    {
      if (CRYP_SetKey(hcryp) != HAL_OK)
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f82f 	bl	80039f8 <CRYP_SetKey>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <HAL_CRYP_Init+0x162>
      {
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e025      	b.n	80039f0 <HAL_CRYP_Init+0x1ae>
      }
    }

    /* If applicable, configure the Initialization Vector */
    if (hcryp->Init.ChainingMode != CRYP_CHAINMODE_AES_ECB)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d007      	beq.n	80039bc <HAL_CRYP_Init+0x17a>
    {
      if (CRYP_SetInitVector(hcryp) != HAL_OK)
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f891 	bl	8003ad4 <CRYP_SetInitVector>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <HAL_CRYP_Init+0x17a>
      {
        return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e019      	b.n	80039f0 <HAL_CRYP_Init+0x1ae>
  /* Clear NPBLB field */
  CLEAR_BIT(hcryp->Instance->CR, AES_CR_NPBLB);
#endif

  /* Reset CrypInCount and CrypOutCount */
  hcryp->CrypInCount = 0;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hcryp->CrypOutCount = 0;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset ErrorCode field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Reset Mode suspension request */
  hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  /* Enable the Peripheral */
  __HAL_CRYP_ENABLE(hcryp);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f042 0201 	orr.w	r2, r2, #1
 80039ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <CRYP_SetKey>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval None
  */
static HAL_StatusTypeDef  CRYP_SetKey(CRYP_HandleTypeDef *hcryp)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b08d      	sub	sp, #52	@ 0x34
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t keyaddr;

  if (hcryp->Init.pKey == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <CRYP_SetKey+0x14>
  {
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e05d      	b.n	8003ac8 <CRYP_SetKey+0xd0>
  }


  keyaddr = (uint32_t)(hcryp->Init.pKey);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a1a:	d12b      	bne.n	8003a74 <CRYP_SetKey+0x7c>
  {
    hcryp->Instance->KEYR7 = __REV(*(uint32_t*)(keyaddr));
 8003a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	61fa      	str	r2, [r7, #28]
  \return               Reversed value
 */
__STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 8003a26:	69fa      	ldr	r2, [r7, #28]
 8003a28:	ba12      	rev	r2, r2
 8003a2a:	63da      	str	r2, [r3, #60]	@ 0x3c
    keyaddr+=4U;
 8003a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a2e:	3304      	adds	r3, #4
 8003a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    hcryp->Instance->KEYR6 = __REV(*(uint32_t*)(keyaddr));
 8003a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	623a      	str	r2, [r7, #32]
 8003a3c:	6a3a      	ldr	r2, [r7, #32]
 8003a3e:	ba12      	rev	r2, r2
 8003a40:	639a      	str	r2, [r3, #56]	@ 0x38
    keyaddr+=4U;
 8003a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a44:	3304      	adds	r3, #4
 8003a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    hcryp->Instance->KEYR5 = __REV(*(uint32_t*)(keyaddr));
 8003a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a54:	ba12      	rev	r2, r2
 8003a56:	635a      	str	r2, [r3, #52]	@ 0x34
    keyaddr+=4U;
 8003a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    hcryp->Instance->KEYR4 = __REV(*(uint32_t*)(keyaddr));
 8003a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003a68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a6a:	ba12      	rev	r2, r2
 8003a6c:	631a      	str	r2, [r3, #48]	@ 0x30
    keyaddr+=4U;
 8003a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a70:	3304      	adds	r3, #4
 8003a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  hcryp->Instance->KEYR3 = __REV(*(uint32_t*)(keyaddr));
 8003a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	60fa      	str	r2, [r7, #12]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	ba12      	rev	r2, r2
 8003a82:	61da      	str	r2, [r3, #28]
  keyaddr+=4U;
 8003a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a86:	3304      	adds	r3, #4
 8003a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  hcryp->Instance->KEYR2 = __REV(*(uint32_t*)(keyaddr));
 8003a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	613a      	str	r2, [r7, #16]
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	ba12      	rev	r2, r2
 8003a98:	619a      	str	r2, [r3, #24]
  keyaddr+=4U;
 8003a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  hcryp->Instance->KEYR1 = __REV(*(uint32_t*)(keyaddr));
 8003aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	617a      	str	r2, [r7, #20]
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	ba12      	rev	r2, r2
 8003aae:	615a      	str	r2, [r3, #20]
  keyaddr+=4U;
 8003ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  hcryp->Instance->KEYR0 = __REV(*(uint32_t*)(keyaddr));
 8003ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	61ba      	str	r2, [r7, #24]
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	ba12      	rev	r2, r2
 8003ac4:	611a      	str	r2, [r3, #16]

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3734      	adds	r7, #52	@ 0x34
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <CRYP_SetInitVector>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval None
  */
static HAL_StatusTypeDef CRYP_SetInitVector(CRYP_HandleTypeDef *hcryp)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b089      	sub	sp, #36	@ 0x24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t ivaddr;

#if !defined(AES_CR_NPBLB)
  if (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ae4:	d110      	bne.n	8003b08 <CRYP_SetInitVector+0x34>
  {
    hcryp->Instance->IVR3 = 0;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2200      	movs	r2, #0
 8003aec:	62da      	str	r2, [r3, #44]	@ 0x2c
    hcryp->Instance->IVR2 = 0;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2200      	movs	r2, #0
 8003af4:	629a      	str	r2, [r3, #40]	@ 0x28
    hcryp->Instance->IVR1 = 0;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2200      	movs	r2, #0
 8003afc:	625a      	str	r2, [r3, #36]	@ 0x24
    hcryp->Instance->IVR0 = 0;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2200      	movs	r2, #0
 8003b04:	621a      	str	r2, [r3, #32]
 8003b06:	e031      	b.n	8003b6c <CRYP_SetInitVector+0x98>
  }
  else
#endif
  {
    if (hcryp->Init.pInitVect == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <CRYP_SetInitVector+0x40>
    {
      return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e02c      	b.n	8003b6e <CRYP_SetInitVector+0x9a>
    }

    ivaddr = (uint32_t)(hcryp->Init.pInitVect);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b18:	61fb      	str	r3, [r7, #28]

    hcryp->Instance->IVR3 = __REV(*(uint32_t*)(ivaddr));
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	60fa      	str	r2, [r7, #12]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	ba12      	rev	r2, r2
 8003b28:	62da      	str	r2, [r3, #44]	@ 0x2c
    ivaddr+=4U;
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	61fb      	str	r3, [r7, #28]
    hcryp->Instance->IVR2 = __REV(*(uint32_t*)(ivaddr));
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	613a      	str	r2, [r7, #16]
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	ba12      	rev	r2, r2
 8003b3e:	629a      	str	r2, [r3, #40]	@ 0x28
    ivaddr+=4U;
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	3304      	adds	r3, #4
 8003b44:	61fb      	str	r3, [r7, #28]
    hcryp->Instance->IVR1 = __REV(*(uint32_t*)(ivaddr));
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	617a      	str	r2, [r7, #20]
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	ba12      	rev	r2, r2
 8003b54:	625a      	str	r2, [r3, #36]	@ 0x24
    ivaddr+=4U;
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	3304      	adds	r3, #4
 8003b5a:	61fb      	str	r3, [r7, #28]
    hcryp->Instance->IVR0 = __REV(*(uint32_t*)(ivaddr));
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	61ba      	str	r2, [r7, #24]
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	ba12      	rev	r2, r2
 8003b6a:	621a      	str	r2, [r3, #32]
  }
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3724      	adds	r7, #36	@ 0x24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
	...

08003b7c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e098      	b.n	8003cc0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	461a      	mov	r2, r3
 8003b94:	4b4d      	ldr	r3, [pc, #308]	@ (8003ccc <HAL_DMA_Init+0x150>)
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d80f      	bhi.n	8003bba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	4b4b      	ldr	r3, [pc, #300]	@ (8003cd0 <HAL_DMA_Init+0x154>)
 8003ba2:	4413      	add	r3, r2
 8003ba4:	4a4b      	ldr	r2, [pc, #300]	@ (8003cd4 <HAL_DMA_Init+0x158>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	091b      	lsrs	r3, r3, #4
 8003bac:	009a      	lsls	r2, r3, #2
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a48      	ldr	r2, [pc, #288]	@ (8003cd8 <HAL_DMA_Init+0x15c>)
 8003bb6:	641a      	str	r2, [r3, #64]	@ 0x40
 8003bb8:	e00e      	b.n	8003bd8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	4b46      	ldr	r3, [pc, #280]	@ (8003cdc <HAL_DMA_Init+0x160>)
 8003bc2:	4413      	add	r3, r2
 8003bc4:	4a43      	ldr	r2, [pc, #268]	@ (8003cd4 <HAL_DMA_Init+0x158>)
 8003bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bca:	091b      	lsrs	r3, r3, #4
 8003bcc:	009a      	lsls	r2, r3, #2
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a42      	ldr	r2, [pc, #264]	@ (8003ce0 <HAL_DMA_Init+0x164>)
 8003bd6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bf2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003bfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c32:	d039      	beq.n	8003ca8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c38:	4a27      	ldr	r2, [pc, #156]	@ (8003cd8 <HAL_DMA_Init+0x15c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d11a      	bne.n	8003c74 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003c3e:	4b29      	ldr	r3, [pc, #164]	@ (8003ce4 <HAL_DMA_Init+0x168>)
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c46:	f003 031c 	and.w	r3, r3, #28
 8003c4a:	210f      	movs	r1, #15
 8003c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c50:	43db      	mvns	r3, r3
 8003c52:	4924      	ldr	r1, [pc, #144]	@ (8003ce4 <HAL_DMA_Init+0x168>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003c58:	4b22      	ldr	r3, [pc, #136]	@ (8003ce4 <HAL_DMA_Init+0x168>)
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6859      	ldr	r1, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c64:	f003 031c 	and.w	r3, r3, #28
 8003c68:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6c:	491d      	ldr	r1, [pc, #116]	@ (8003ce4 <HAL_DMA_Init+0x168>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	600b      	str	r3, [r1, #0]
 8003c72:	e019      	b.n	8003ca8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003c74:	4b1c      	ldr	r3, [pc, #112]	@ (8003ce8 <HAL_DMA_Init+0x16c>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7c:	f003 031c 	and.w	r3, r3, #28
 8003c80:	210f      	movs	r1, #15
 8003c82:	fa01 f303 	lsl.w	r3, r1, r3
 8003c86:	43db      	mvns	r3, r3
 8003c88:	4917      	ldr	r1, [pc, #92]	@ (8003ce8 <HAL_DMA_Init+0x16c>)
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003c8e:	4b16      	ldr	r3, [pc, #88]	@ (8003ce8 <HAL_DMA_Init+0x16c>)
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6859      	ldr	r1, [r3, #4]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9a:	f003 031c 	and.w	r3, r3, #28
 8003c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca2:	4911      	ldr	r1, [pc, #68]	@ (8003ce8 <HAL_DMA_Init+0x16c>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	40020407 	.word	0x40020407
 8003cd0:	bffdfff8 	.word	0xbffdfff8
 8003cd4:	cccccccd 	.word	0xcccccccd
 8003cd8:	40020000 	.word	0x40020000
 8003cdc:	bffdfbf8 	.word	0xbffdfbf8
 8003ce0:	40020400 	.word	0x40020400
 8003ce4:	400200a8 	.word	0x400200a8
 8003ce8:	400204a8 	.word	0x400204a8

08003cec <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e072      	b.n	8003de4 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0201 	bic.w	r2, r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	461a      	mov	r2, r3
 8003d14:	4b36      	ldr	r3, [pc, #216]	@ (8003df0 <HAL_DMA_DeInit+0x104>)
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d80f      	bhi.n	8003d3a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	4b34      	ldr	r3, [pc, #208]	@ (8003df4 <HAL_DMA_DeInit+0x108>)
 8003d22:	4413      	add	r3, r2
 8003d24:	4a34      	ldr	r2, [pc, #208]	@ (8003df8 <HAL_DMA_DeInit+0x10c>)
 8003d26:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2a:	091b      	lsrs	r3, r3, #4
 8003d2c:	009a      	lsls	r2, r3, #2
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a31      	ldr	r2, [pc, #196]	@ (8003dfc <HAL_DMA_DeInit+0x110>)
 8003d36:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d38:	e00e      	b.n	8003d58 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	4b2f      	ldr	r3, [pc, #188]	@ (8003e00 <HAL_DMA_DeInit+0x114>)
 8003d42:	4413      	add	r3, r2
 8003d44:	4a2c      	ldr	r2, [pc, #176]	@ (8003df8 <HAL_DMA_DeInit+0x10c>)
 8003d46:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	009a      	lsls	r2, r3, #2
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a2b      	ldr	r2, [pc, #172]	@ (8003e04 <HAL_DMA_DeInit+0x118>)
 8003d56:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d64:	f003 021c 	and.w	r2, r3, #28
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d72:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d78:	4a20      	ldr	r2, [pc, #128]	@ (8003dfc <HAL_DMA_DeInit+0x110>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d10d      	bne.n	8003d9a <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003d7e:	4b22      	ldr	r3, [pc, #136]	@ (8003e08 <HAL_DMA_DeInit+0x11c>)
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d86:	f003 031c 	and.w	r3, r3, #28
 8003d8a:	210f      	movs	r1, #15
 8003d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d90:	43db      	mvns	r3, r3
 8003d92:	491d      	ldr	r1, [pc, #116]	@ (8003e08 <HAL_DMA_DeInit+0x11c>)
 8003d94:	4013      	ands	r3, r2
 8003d96:	600b      	str	r3, [r1, #0]
 8003d98:	e00c      	b.n	8003db4 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8003e0c <HAL_DMA_DeInit+0x120>)
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da2:	f003 031c 	and.w	r3, r3, #28
 8003da6:	210f      	movs	r1, #15
 8003da8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dac:	43db      	mvns	r3, r3
 8003dae:	4917      	ldr	r1, [pc, #92]	@ (8003e0c <HAL_DMA_DeInit+0x120>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	40020407 	.word	0x40020407
 8003df4:	bffdfff8 	.word	0xbffdfff8
 8003df8:	cccccccd 	.word	0xcccccccd
 8003dfc:	40020000 	.word	0x40020000
 8003e00:	bffdfbf8 	.word	0xbffdfbf8
 8003e04:	40020400 	.word	0x40020400
 8003e08:	400200a8 	.word	0x400200a8
 8003e0c:	400204a8 	.word	0x400204a8

08003e10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_DMA_Start_IT+0x20>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e04b      	b.n	8003ec8 <HAL_DMA_Start_IT+0xb8>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d13a      	bne.n	8003eba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0201 	bic.w	r2, r2, #1
 8003e60:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	68b9      	ldr	r1, [r7, #8]
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 f95f 	bl	800412c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d008      	beq.n	8003e88 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f042 020e 	orr.w	r2, r2, #14
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	e00f      	b.n	8003ea8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0204 	bic.w	r2, r2, #4
 8003e96:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 020a 	orr.w	r2, r2, #10
 8003ea6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0201 	orr.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	e005      	b.n	8003ec6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d008      	beq.n	8003efa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2204      	movs	r2, #4
 8003eec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e022      	b.n	8003f40 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 020e 	bic.w	r2, r2, #14
 8003f08:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0201 	bic.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1e:	f003 021c 	and.w	r2, r3, #28
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	2101      	movs	r1, #1
 8003f28:	fa01 f202 	lsl.w	r2, r1, r2
 8003f2c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d005      	beq.n	8003f70 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2204      	movs	r2, #4
 8003f68:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	73fb      	strb	r3, [r7, #15]
 8003f6e:	e029      	b.n	8003fc4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 020e 	bic.w	r2, r2, #14
 8003f7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0201 	bic.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f94:	f003 021c 	and.w	r2, r3, #28
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003fa2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	4798      	blx	r3
    }
  }
  return status;
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b084      	sub	sp, #16
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fea:	f003 031c 	and.w	r3, r3, #28
 8003fee:	2204      	movs	r2, #4
 8003ff0:	409a      	lsls	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d026      	beq.n	8004048 <HAL_DMA_IRQHandler+0x7a>
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	d021      	beq.n	8004048 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0320 	and.w	r3, r3, #32
 800400e:	2b00      	cmp	r3, #0
 8004010:	d107      	bne.n	8004022 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0204 	bic.w	r2, r2, #4
 8004020:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004026:	f003 021c 	and.w	r2, r3, #28
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402e:	2104      	movs	r1, #4
 8004030:	fa01 f202 	lsl.w	r2, r1, r2
 8004034:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403a:	2b00      	cmp	r3, #0
 800403c:	d071      	beq.n	8004122 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004046:	e06c      	b.n	8004122 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404c:	f003 031c 	and.w	r3, r3, #28
 8004050:	2202      	movs	r2, #2
 8004052:	409a      	lsls	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4013      	ands	r3, r2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d02e      	beq.n	80040ba <HAL_DMA_IRQHandler+0xec>
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d029      	beq.n	80040ba <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0320 	and.w	r3, r3, #32
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10b      	bne.n	800408c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 020a 	bic.w	r2, r2, #10
 8004082:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004090:	f003 021c 	and.w	r2, r3, #28
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004098:	2102      	movs	r1, #2
 800409a:	fa01 f202 	lsl.w	r2, r1, r2
 800409e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d038      	beq.n	8004122 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80040b8:	e033      	b.n	8004122 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040be:	f003 031c 	and.w	r3, r3, #28
 80040c2:	2208      	movs	r2, #8
 80040c4:	409a      	lsls	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d02a      	beq.n	8004124 <HAL_DMA_IRQHandler+0x156>
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d025      	beq.n	8004124 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 020e 	bic.w	r2, r2, #14
 80040e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ec:	f003 021c 	and.w	r2, r3, #28
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f4:	2101      	movs	r1, #1
 80040f6:	fa01 f202 	lsl.w	r2, r1, r2
 80040fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004116:	2b00      	cmp	r3, #0
 8004118:	d004      	beq.n	8004124 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004122:	bf00      	nop
 8004124:	bf00      	nop
}
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
 8004138:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413e:	f003 021c 	and.w	r2, r3, #28
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004146:	2101      	movs	r1, #1
 8004148:	fa01 f202 	lsl.w	r2, r1, r2
 800414c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	2b10      	cmp	r3, #16
 800415c:	d108      	bne.n	8004170 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800416e:	e007      	b.n	8004180 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	60da      	str	r2, [r3, #12]
}
 8004180:	bf00      	nop
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004196:	2300      	movs	r3, #0
 8004198:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800419a:	e166      	b.n	800446a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	2101      	movs	r1, #1
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	fa01 f303 	lsl.w	r3, r1, r3
 80041a8:	4013      	ands	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 8158 	beq.w	8004464 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f003 0303 	and.w	r3, r3, #3
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d005      	beq.n	80041cc <HAL_GPIO_Init+0x40>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d130      	bne.n	800422e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	2203      	movs	r2, #3
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	43db      	mvns	r3, r3
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4013      	ands	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004202:	2201      	movs	r2, #1
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	fa02 f303 	lsl.w	r3, r2, r3
 800420a:	43db      	mvns	r3, r3
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	4013      	ands	r3, r2
 8004210:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	091b      	lsrs	r3, r3, #4
 8004218:	f003 0201 	and.w	r2, r3, #1
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	4313      	orrs	r3, r2
 8004226:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	2b03      	cmp	r3, #3
 8004238:	d017      	beq.n	800426a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	2203      	movs	r2, #3
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	43db      	mvns	r3, r3
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	4013      	ands	r3, r2
 8004250:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	fa02 f303 	lsl.w	r3, r2, r3
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d123      	bne.n	80042be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	08da      	lsrs	r2, r3, #3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3208      	adds	r2, #8
 800427e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004282:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	220f      	movs	r2, #15
 800428e:	fa02 f303 	lsl.w	r3, r2, r3
 8004292:	43db      	mvns	r3, r3
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	4013      	ands	r3, r2
 8004298:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	691a      	ldr	r2, [r3, #16]
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	fa02 f303 	lsl.w	r3, r2, r3
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	08da      	lsrs	r2, r3, #3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3208      	adds	r2, #8
 80042b8:	6939      	ldr	r1, [r7, #16]
 80042ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	2203      	movs	r2, #3
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	43db      	mvns	r3, r3
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	4013      	ands	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f003 0203 	and.w	r2, r3, #3
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	fa02 f303 	lsl.w	r3, r2, r3
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 80b2 	beq.w	8004464 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004300:	4b61      	ldr	r3, [pc, #388]	@ (8004488 <HAL_GPIO_Init+0x2fc>)
 8004302:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004304:	4a60      	ldr	r2, [pc, #384]	@ (8004488 <HAL_GPIO_Init+0x2fc>)
 8004306:	f043 0301 	orr.w	r3, r3, #1
 800430a:	6613      	str	r3, [r2, #96]	@ 0x60
 800430c:	4b5e      	ldr	r3, [pc, #376]	@ (8004488 <HAL_GPIO_Init+0x2fc>)
 800430e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	60bb      	str	r3, [r7, #8]
 8004316:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004318:	4a5c      	ldr	r2, [pc, #368]	@ (800448c <HAL_GPIO_Init+0x300>)
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	089b      	lsrs	r3, r3, #2
 800431e:	3302      	adds	r3, #2
 8004320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004324:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f003 0303 	and.w	r3, r3, #3
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	220f      	movs	r2, #15
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	43db      	mvns	r3, r3
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4013      	ands	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004342:	d02b      	beq.n	800439c <HAL_GPIO_Init+0x210>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a52      	ldr	r2, [pc, #328]	@ (8004490 <HAL_GPIO_Init+0x304>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d025      	beq.n	8004398 <HAL_GPIO_Init+0x20c>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a51      	ldr	r2, [pc, #324]	@ (8004494 <HAL_GPIO_Init+0x308>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d01f      	beq.n	8004394 <HAL_GPIO_Init+0x208>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a50      	ldr	r2, [pc, #320]	@ (8004498 <HAL_GPIO_Init+0x30c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d019      	beq.n	8004390 <HAL_GPIO_Init+0x204>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a4f      	ldr	r2, [pc, #316]	@ (800449c <HAL_GPIO_Init+0x310>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d013      	beq.n	800438c <HAL_GPIO_Init+0x200>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a4e      	ldr	r2, [pc, #312]	@ (80044a0 <HAL_GPIO_Init+0x314>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d00d      	beq.n	8004388 <HAL_GPIO_Init+0x1fc>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a4d      	ldr	r2, [pc, #308]	@ (80044a4 <HAL_GPIO_Init+0x318>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d007      	beq.n	8004384 <HAL_GPIO_Init+0x1f8>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a4c      	ldr	r2, [pc, #304]	@ (80044a8 <HAL_GPIO_Init+0x31c>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d101      	bne.n	8004380 <HAL_GPIO_Init+0x1f4>
 800437c:	2307      	movs	r3, #7
 800437e:	e00e      	b.n	800439e <HAL_GPIO_Init+0x212>
 8004380:	2308      	movs	r3, #8
 8004382:	e00c      	b.n	800439e <HAL_GPIO_Init+0x212>
 8004384:	2306      	movs	r3, #6
 8004386:	e00a      	b.n	800439e <HAL_GPIO_Init+0x212>
 8004388:	2305      	movs	r3, #5
 800438a:	e008      	b.n	800439e <HAL_GPIO_Init+0x212>
 800438c:	2304      	movs	r3, #4
 800438e:	e006      	b.n	800439e <HAL_GPIO_Init+0x212>
 8004390:	2303      	movs	r3, #3
 8004392:	e004      	b.n	800439e <HAL_GPIO_Init+0x212>
 8004394:	2302      	movs	r3, #2
 8004396:	e002      	b.n	800439e <HAL_GPIO_Init+0x212>
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <HAL_GPIO_Init+0x212>
 800439c:	2300      	movs	r3, #0
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	f002 0203 	and.w	r2, r2, #3
 80043a4:	0092      	lsls	r2, r2, #2
 80043a6:	4093      	lsls	r3, r2
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80043ae:	4937      	ldr	r1, [pc, #220]	@ (800448c <HAL_GPIO_Init+0x300>)
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	089b      	lsrs	r3, r3, #2
 80043b4:	3302      	adds	r3, #2
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043bc:	4b3b      	ldr	r3, [pc, #236]	@ (80044ac <HAL_GPIO_Init+0x320>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	43db      	mvns	r3, r3
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4013      	ands	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80043e0:	4a32      	ldr	r2, [pc, #200]	@ (80044ac <HAL_GPIO_Init+0x320>)
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80043e6:	4b31      	ldr	r3, [pc, #196]	@ (80044ac <HAL_GPIO_Init+0x320>)
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	43db      	mvns	r3, r3
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4013      	ands	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4313      	orrs	r3, r2
 8004408:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800440a:	4a28      	ldr	r2, [pc, #160]	@ (80044ac <HAL_GPIO_Init+0x320>)
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004410:	4b26      	ldr	r3, [pc, #152]	@ (80044ac <HAL_GPIO_Init+0x320>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	43db      	mvns	r3, r3
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	4013      	ands	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4313      	orrs	r3, r2
 8004432:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004434:	4a1d      	ldr	r2, [pc, #116]	@ (80044ac <HAL_GPIO_Init+0x320>)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800443a:	4b1c      	ldr	r3, [pc, #112]	@ (80044ac <HAL_GPIO_Init+0x320>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	43db      	mvns	r3, r3
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4013      	ands	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800445e:	4a13      	ldr	r2, [pc, #76]	@ (80044ac <HAL_GPIO_Init+0x320>)
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	3301      	adds	r3, #1
 8004468:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	fa22 f303 	lsr.w	r3, r2, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	f47f ae91 	bne.w	800419c <HAL_GPIO_Init+0x10>
  }
}
 800447a:	bf00      	nop
 800447c:	bf00      	nop
 800447e:	371c      	adds	r7, #28
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	40021000 	.word	0x40021000
 800448c:	40010000 	.word	0x40010000
 8004490:	48000400 	.word	0x48000400
 8004494:	48000800 	.word	0x48000800
 8004498:	48000c00 	.word	0x48000c00
 800449c:	48001000 	.word	0x48001000
 80044a0:	48001400 	.word	0x48001400
 80044a4:	48001800 	.word	0x48001800
 80044a8:	48001c00 	.word	0x48001c00
 80044ac:	40010400 	.word	0x40010400

080044b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044ba:	2300      	movs	r3, #0
 80044bc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80044be:	e0c9      	b.n	8004654 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80044c0:	2201      	movs	r2, #1
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	4013      	ands	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 80bc 	beq.w	800464e <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80044d6:	4a66      	ldr	r2, [pc, #408]	@ (8004670 <HAL_GPIO_DeInit+0x1c0>)
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	089b      	lsrs	r3, r3, #2
 80044dc:	3302      	adds	r3, #2
 80044de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044e2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	220f      	movs	r2, #15
 80044ee:	fa02 f303 	lsl.w	r3, r2, r3
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	4013      	ands	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80044fe:	d02b      	beq.n	8004558 <HAL_GPIO_DeInit+0xa8>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a5c      	ldr	r2, [pc, #368]	@ (8004674 <HAL_GPIO_DeInit+0x1c4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d025      	beq.n	8004554 <HAL_GPIO_DeInit+0xa4>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a5b      	ldr	r2, [pc, #364]	@ (8004678 <HAL_GPIO_DeInit+0x1c8>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d01f      	beq.n	8004550 <HAL_GPIO_DeInit+0xa0>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a5a      	ldr	r2, [pc, #360]	@ (800467c <HAL_GPIO_DeInit+0x1cc>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d019      	beq.n	800454c <HAL_GPIO_DeInit+0x9c>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a59      	ldr	r2, [pc, #356]	@ (8004680 <HAL_GPIO_DeInit+0x1d0>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d013      	beq.n	8004548 <HAL_GPIO_DeInit+0x98>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a58      	ldr	r2, [pc, #352]	@ (8004684 <HAL_GPIO_DeInit+0x1d4>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00d      	beq.n	8004544 <HAL_GPIO_DeInit+0x94>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a57      	ldr	r2, [pc, #348]	@ (8004688 <HAL_GPIO_DeInit+0x1d8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d007      	beq.n	8004540 <HAL_GPIO_DeInit+0x90>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a56      	ldr	r2, [pc, #344]	@ (800468c <HAL_GPIO_DeInit+0x1dc>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d101      	bne.n	800453c <HAL_GPIO_DeInit+0x8c>
 8004538:	2307      	movs	r3, #7
 800453a:	e00e      	b.n	800455a <HAL_GPIO_DeInit+0xaa>
 800453c:	2308      	movs	r3, #8
 800453e:	e00c      	b.n	800455a <HAL_GPIO_DeInit+0xaa>
 8004540:	2306      	movs	r3, #6
 8004542:	e00a      	b.n	800455a <HAL_GPIO_DeInit+0xaa>
 8004544:	2305      	movs	r3, #5
 8004546:	e008      	b.n	800455a <HAL_GPIO_DeInit+0xaa>
 8004548:	2304      	movs	r3, #4
 800454a:	e006      	b.n	800455a <HAL_GPIO_DeInit+0xaa>
 800454c:	2303      	movs	r3, #3
 800454e:	e004      	b.n	800455a <HAL_GPIO_DeInit+0xaa>
 8004550:	2302      	movs	r3, #2
 8004552:	e002      	b.n	800455a <HAL_GPIO_DeInit+0xaa>
 8004554:	2301      	movs	r3, #1
 8004556:	e000      	b.n	800455a <HAL_GPIO_DeInit+0xaa>
 8004558:	2300      	movs	r3, #0
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	f002 0203 	and.w	r2, r2, #3
 8004560:	0092      	lsls	r2, r2, #2
 8004562:	4093      	lsls	r3, r2
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	429a      	cmp	r2, r3
 8004568:	d132      	bne.n	80045d0 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800456a:	4b49      	ldr	r3, [pc, #292]	@ (8004690 <HAL_GPIO_DeInit+0x1e0>)
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	43db      	mvns	r3, r3
 8004572:	4947      	ldr	r1, [pc, #284]	@ (8004690 <HAL_GPIO_DeInit+0x1e0>)
 8004574:	4013      	ands	r3, r2
 8004576:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004578:	4b45      	ldr	r3, [pc, #276]	@ (8004690 <HAL_GPIO_DeInit+0x1e0>)
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	43db      	mvns	r3, r3
 8004580:	4943      	ldr	r1, [pc, #268]	@ (8004690 <HAL_GPIO_DeInit+0x1e0>)
 8004582:	4013      	ands	r3, r2
 8004584:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004586:	4b42      	ldr	r3, [pc, #264]	@ (8004690 <HAL_GPIO_DeInit+0x1e0>)
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	43db      	mvns	r3, r3
 800458e:	4940      	ldr	r1, [pc, #256]	@ (8004690 <HAL_GPIO_DeInit+0x1e0>)
 8004590:	4013      	ands	r3, r2
 8004592:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004594:	4b3e      	ldr	r3, [pc, #248]	@ (8004690 <HAL_GPIO_DeInit+0x1e0>)
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	43db      	mvns	r3, r3
 800459c:	493c      	ldr	r1, [pc, #240]	@ (8004690 <HAL_GPIO_DeInit+0x1e0>)
 800459e:	4013      	ands	r3, r2
 80045a0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f003 0303 	and.w	r3, r3, #3
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	220f      	movs	r2, #15
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80045b2:	4a2f      	ldr	r2, [pc, #188]	@ (8004670 <HAL_GPIO_DeInit+0x1c0>)
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	089b      	lsrs	r3, r3, #2
 80045b8:	3302      	adds	r3, #2
 80045ba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	43da      	mvns	r2, r3
 80045c2:	482b      	ldr	r0, [pc, #172]	@ (8004670 <HAL_GPIO_DeInit+0x1c0>)
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	089b      	lsrs	r3, r3, #2
 80045c8:	400a      	ands	r2, r1
 80045ca:	3302      	adds	r3, #2
 80045cc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	2103      	movs	r1, #3
 80045da:	fa01 f303 	lsl.w	r3, r1, r3
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	08da      	lsrs	r2, r3, #3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3208      	adds	r2, #8
 80045ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f003 0307 	and.w	r3, r3, #7
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	220f      	movs	r2, #15
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	43db      	mvns	r3, r3
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	08d2      	lsrs	r2, r2, #3
 8004604:	4019      	ands	r1, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3208      	adds	r2, #8
 800460a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	2103      	movs	r1, #3
 8004618:	fa01 f303 	lsl.w	r3, r1, r3
 800461c:	43db      	mvns	r3, r3
 800461e:	401a      	ands	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	2101      	movs	r1, #1
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	fa01 f303 	lsl.w	r3, r1, r3
 8004630:	43db      	mvns	r3, r3
 8004632:	401a      	ands	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	2103      	movs	r1, #3
 8004642:	fa01 f303 	lsl.w	r3, r1, r3
 8004646:	43db      	mvns	r3, r3
 8004648:	401a      	ands	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	3301      	adds	r3, #1
 8004652:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	fa22 f303 	lsr.w	r3, r2, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	f47f af2f 	bne.w	80044c0 <HAL_GPIO_DeInit+0x10>
  }
}
 8004662:	bf00      	nop
 8004664:	bf00      	nop
 8004666:	371c      	adds	r7, #28
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	40010000 	.word	0x40010000
 8004674:	48000400 	.word	0x48000400
 8004678:	48000800 	.word	0x48000800
 800467c:	48000c00 	.word	0x48000c00
 8004680:	48001000 	.word	0x48001000
 8004684:	48001400 	.word	0x48001400
 8004688:	48001800 	.word	0x48001800
 800468c:	48001c00 	.word	0x48001c00
 8004690:	40010400 	.word	0x40010400

08004694 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	460b      	mov	r3, r1
 800469e:	807b      	strh	r3, [r7, #2]
 80046a0:	4613      	mov	r3, r2
 80046a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046a4:	787b      	ldrb	r3, [r7, #1]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046aa:	887a      	ldrh	r2, [r7, #2]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046b0:	e002      	b.n	80046b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046b2:	887a      	ldrh	r2, [r7, #2]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	460b      	mov	r3, r1
 80046ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046d6:	887a      	ldrh	r2, [r7, #2]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4013      	ands	r3, r2
 80046dc:	041a      	lsls	r2, r3, #16
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	43d9      	mvns	r1, r3
 80046e2:	887b      	ldrh	r3, [r7, #2]
 80046e4:	400b      	ands	r3, r1
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	619a      	str	r2, [r3, #24]
}
 80046ec:	bf00      	nop
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80046fc:	4b04      	ldr	r3, [pc, #16]	@ (8004710 <HAL_PWREx_GetVoltageRange+0x18>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004704:	4618      	mov	r0, r3
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	40007000 	.word	0x40007000

08004714 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004722:	d130      	bne.n	8004786 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004724:	4b23      	ldr	r3, [pc, #140]	@ (80047b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800472c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004730:	d038      	beq.n	80047a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004732:	4b20      	ldr	r3, [pc, #128]	@ (80047b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800473a:	4a1e      	ldr	r2, [pc, #120]	@ (80047b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800473c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004740:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004742:	4b1d      	ldr	r3, [pc, #116]	@ (80047b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2232      	movs	r2, #50	@ 0x32
 8004748:	fb02 f303 	mul.w	r3, r2, r3
 800474c:	4a1b      	ldr	r2, [pc, #108]	@ (80047bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800474e:	fba2 2303 	umull	r2, r3, r2, r3
 8004752:	0c9b      	lsrs	r3, r3, #18
 8004754:	3301      	adds	r3, #1
 8004756:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004758:	e002      	b.n	8004760 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	3b01      	subs	r3, #1
 800475e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004760:	4b14      	ldr	r3, [pc, #80]	@ (80047b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004768:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800476c:	d102      	bne.n	8004774 <HAL_PWREx_ControlVoltageScaling+0x60>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1f2      	bne.n	800475a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004774:	4b0f      	ldr	r3, [pc, #60]	@ (80047b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800477c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004780:	d110      	bne.n	80047a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e00f      	b.n	80047a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004786:	4b0b      	ldr	r3, [pc, #44]	@ (80047b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800478e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004792:	d007      	beq.n	80047a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004794:	4b07      	ldr	r3, [pc, #28]	@ (80047b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800479c:	4a05      	ldr	r2, [pc, #20]	@ (80047b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800479e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80047a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	40007000 	.word	0x40007000
 80047b8:	20000030 	.word	0x20000030
 80047bc:	431bde83 	.word	0x431bde83

080047c0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80047c4:	4b05      	ldr	r3, [pc, #20]	@ (80047dc <HAL_PWREx_EnableVddIO2+0x1c>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	4a04      	ldr	r2, [pc, #16]	@ (80047dc <HAL_PWREx_EnableVddIO2+0x1c>)
 80047ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047ce:	6053      	str	r3, [r2, #4]
}
 80047d0:	bf00      	nop
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40007000 	.word	0x40007000

080047e0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b088      	sub	sp, #32
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d102      	bne.n	80047f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	f000 bc08 	b.w	8005004 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047f4:	4b96      	ldr	r3, [pc, #600]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 030c 	and.w	r3, r3, #12
 80047fc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047fe:	4b94      	ldr	r3, [pc, #592]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	f003 0303 	and.w	r3, r3, #3
 8004806:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0310 	and.w	r3, r3, #16
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 80e4 	beq.w	80049de <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d007      	beq.n	800482c <HAL_RCC_OscConfig+0x4c>
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	2b0c      	cmp	r3, #12
 8004820:	f040 808b 	bne.w	800493a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	2b01      	cmp	r3, #1
 8004828:	f040 8087 	bne.w	800493a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800482c:	4b88      	ldr	r3, [pc, #544]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d005      	beq.n	8004844 <HAL_RCC_OscConfig+0x64>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e3df      	b.n	8005004 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a1a      	ldr	r2, [r3, #32]
 8004848:	4b81      	ldr	r3, [pc, #516]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0308 	and.w	r3, r3, #8
 8004850:	2b00      	cmp	r3, #0
 8004852:	d004      	beq.n	800485e <HAL_RCC_OscConfig+0x7e>
 8004854:	4b7e      	ldr	r3, [pc, #504]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800485c:	e005      	b.n	800486a <HAL_RCC_OscConfig+0x8a>
 800485e:	4b7c      	ldr	r3, [pc, #496]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 8004860:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004864:	091b      	lsrs	r3, r3, #4
 8004866:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800486a:	4293      	cmp	r3, r2
 800486c:	d223      	bcs.n	80048b6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	4618      	mov	r0, r3
 8004874:	f000 fd92 	bl	800539c <RCC_SetFlashLatencyFromMSIRange>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e3c0      	b.n	8005004 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004882:	4b73      	ldr	r3, [pc, #460]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a72      	ldr	r2, [pc, #456]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 8004888:	f043 0308 	orr.w	r3, r3, #8
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	4b70      	ldr	r3, [pc, #448]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	496d      	ldr	r1, [pc, #436]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 800489c:	4313      	orrs	r3, r2
 800489e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048a0:	4b6b      	ldr	r3, [pc, #428]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	021b      	lsls	r3, r3, #8
 80048ae:	4968      	ldr	r1, [pc, #416]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	604b      	str	r3, [r1, #4]
 80048b4:	e025      	b.n	8004902 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048b6:	4b66      	ldr	r3, [pc, #408]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a65      	ldr	r2, [pc, #404]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 80048bc:	f043 0308 	orr.w	r3, r3, #8
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	4b63      	ldr	r3, [pc, #396]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	4960      	ldr	r1, [pc, #384]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048d4:	4b5e      	ldr	r3, [pc, #376]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	69db      	ldr	r3, [r3, #28]
 80048e0:	021b      	lsls	r3, r3, #8
 80048e2:	495b      	ldr	r1, [pc, #364]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d109      	bne.n	8004902 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fd52 	bl	800539c <RCC_SetFlashLatencyFromMSIRange>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e380      	b.n	8005004 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004902:	f000 fc87 	bl	8005214 <HAL_RCC_GetSysClockFreq>
 8004906:	4602      	mov	r2, r0
 8004908:	4b51      	ldr	r3, [pc, #324]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	091b      	lsrs	r3, r3, #4
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	4950      	ldr	r1, [pc, #320]	@ (8004a54 <HAL_RCC_OscConfig+0x274>)
 8004914:	5ccb      	ldrb	r3, [r1, r3]
 8004916:	f003 031f 	and.w	r3, r3, #31
 800491a:	fa22 f303 	lsr.w	r3, r2, r3
 800491e:	4a4e      	ldr	r2, [pc, #312]	@ (8004a58 <HAL_RCC_OscConfig+0x278>)
 8004920:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004922:	4b4e      	ldr	r3, [pc, #312]	@ (8004a5c <HAL_RCC_OscConfig+0x27c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4618      	mov	r0, r3
 8004928:	f7fe fdfa 	bl	8003520 <HAL_InitTick>
 800492c:	4603      	mov	r3, r0
 800492e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d052      	beq.n	80049dc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004936:	7bfb      	ldrb	r3, [r7, #15]
 8004938:	e364      	b.n	8005004 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d032      	beq.n	80049a8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004942:	4b43      	ldr	r3, [pc, #268]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a42      	ldr	r2, [pc, #264]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 8004948:	f043 0301 	orr.w	r3, r3, #1
 800494c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800494e:	f7fe fe37 	bl	80035c0 <HAL_GetTick>
 8004952:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004954:	e008      	b.n	8004968 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004956:	f7fe fe33 	bl	80035c0 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e34d      	b.n	8005004 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004968:	4b39      	ldr	r3, [pc, #228]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0f0      	beq.n	8004956 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004974:	4b36      	ldr	r3, [pc, #216]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a35      	ldr	r2, [pc, #212]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 800497a:	f043 0308 	orr.w	r3, r3, #8
 800497e:	6013      	str	r3, [r2, #0]
 8004980:	4b33      	ldr	r3, [pc, #204]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	4930      	ldr	r1, [pc, #192]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 800498e:	4313      	orrs	r3, r2
 8004990:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004992:	4b2f      	ldr	r3, [pc, #188]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	021b      	lsls	r3, r3, #8
 80049a0:	492b      	ldr	r1, [pc, #172]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	604b      	str	r3, [r1, #4]
 80049a6:	e01a      	b.n	80049de <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80049a8:	4b29      	ldr	r3, [pc, #164]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a28      	ldr	r2, [pc, #160]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 80049ae:	f023 0301 	bic.w	r3, r3, #1
 80049b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049b4:	f7fe fe04 	bl	80035c0 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049bc:	f7fe fe00 	bl	80035c0 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e31a      	b.n	8005004 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049ce:	4b20      	ldr	r3, [pc, #128]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f0      	bne.n	80049bc <HAL_RCC_OscConfig+0x1dc>
 80049da:	e000      	b.n	80049de <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d073      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d005      	beq.n	80049fc <HAL_RCC_OscConfig+0x21c>
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	2b0c      	cmp	r3, #12
 80049f4:	d10e      	bne.n	8004a14 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	2b03      	cmp	r3, #3
 80049fa:	d10b      	bne.n	8004a14 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049fc:	4b14      	ldr	r3, [pc, #80]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d063      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x2f0>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d15f      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e2f7      	b.n	8005004 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a1c:	d106      	bne.n	8004a2c <HAL_RCC_OscConfig+0x24c>
 8004a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a0b      	ldr	r2, [pc, #44]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 8004a24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a28:	6013      	str	r3, [r2, #0]
 8004a2a:	e025      	b.n	8004a78 <HAL_RCC_OscConfig+0x298>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a34:	d114      	bne.n	8004a60 <HAL_RCC_OscConfig+0x280>
 8004a36:	4b06      	ldr	r3, [pc, #24]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a05      	ldr	r2, [pc, #20]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 8004a3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	4b03      	ldr	r3, [pc, #12]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a02      	ldr	r2, [pc, #8]	@ (8004a50 <HAL_RCC_OscConfig+0x270>)
 8004a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	e013      	b.n	8004a78 <HAL_RCC_OscConfig+0x298>
 8004a50:	40021000 	.word	0x40021000
 8004a54:	08009e34 	.word	0x08009e34
 8004a58:	20000030 	.word	0x20000030
 8004a5c:	20000034 	.word	0x20000034
 8004a60:	4ba0      	ldr	r3, [pc, #640]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a9f      	ldr	r2, [pc, #636]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004a66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a6a:	6013      	str	r3, [r2, #0]
 8004a6c:	4b9d      	ldr	r3, [pc, #628]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a9c      	ldr	r2, [pc, #624]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004a72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d013      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a80:	f7fe fd9e 	bl	80035c0 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a88:	f7fe fd9a 	bl	80035c0 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b64      	cmp	r3, #100	@ 0x64
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e2b4      	b.n	8005004 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a9a:	4b92      	ldr	r3, [pc, #584]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0f0      	beq.n	8004a88 <HAL_RCC_OscConfig+0x2a8>
 8004aa6:	e014      	b.n	8004ad2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa8:	f7fe fd8a 	bl	80035c0 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ab0:	f7fe fd86 	bl	80035c0 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b64      	cmp	r3, #100	@ 0x64
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e2a0      	b.n	8005004 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ac2:	4b88      	ldr	r3, [pc, #544]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1f0      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x2d0>
 8004ace:	e000      	b.n	8004ad2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d060      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	2b04      	cmp	r3, #4
 8004ae2:	d005      	beq.n	8004af0 <HAL_RCC_OscConfig+0x310>
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	2b0c      	cmp	r3, #12
 8004ae8:	d119      	bne.n	8004b1e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d116      	bne.n	8004b1e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004af0:	4b7c      	ldr	r3, [pc, #496]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d005      	beq.n	8004b08 <HAL_RCC_OscConfig+0x328>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e27d      	b.n	8005004 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b08:	4b76      	ldr	r3, [pc, #472]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	061b      	lsls	r3, r3, #24
 8004b16:	4973      	ldr	r1, [pc, #460]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b1c:	e040      	b.n	8004ba0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d023      	beq.n	8004b6e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b26:	4b6f      	ldr	r3, [pc, #444]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a6e      	ldr	r2, [pc, #440]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004b2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b32:	f7fe fd45 	bl	80035c0 <HAL_GetTick>
 8004b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b38:	e008      	b.n	8004b4c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b3a:	f7fe fd41 	bl	80035c0 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e25b      	b.n	8005004 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b4c:	4b65      	ldr	r3, [pc, #404]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0f0      	beq.n	8004b3a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b58:	4b62      	ldr	r3, [pc, #392]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	061b      	lsls	r3, r3, #24
 8004b66:	495f      	ldr	r1, [pc, #380]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	604b      	str	r3, [r1, #4]
 8004b6c:	e018      	b.n	8004ba0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b6e:	4b5d      	ldr	r3, [pc, #372]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a5c      	ldr	r2, [pc, #368]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004b74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7a:	f7fe fd21 	bl	80035c0 <HAL_GetTick>
 8004b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b80:	e008      	b.n	8004b94 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b82:	f7fe fd1d 	bl	80035c0 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e237      	b.n	8005004 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b94:	4b53      	ldr	r3, [pc, #332]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1f0      	bne.n	8004b82 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0308 	and.w	r3, r3, #8
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d03c      	beq.n	8004c26 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d01c      	beq.n	8004bee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bb4:	4b4b      	ldr	r3, [pc, #300]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bba:	4a4a      	ldr	r2, [pc, #296]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004bbc:	f043 0301 	orr.w	r3, r3, #1
 8004bc0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc4:	f7fe fcfc 	bl	80035c0 <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bcc:	f7fe fcf8 	bl	80035c0 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e212      	b.n	8005004 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bde:	4b41      	ldr	r3, [pc, #260]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0ef      	beq.n	8004bcc <HAL_RCC_OscConfig+0x3ec>
 8004bec:	e01b      	b.n	8004c26 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bee:	4b3d      	ldr	r3, [pc, #244]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bf4:	4a3b      	ldr	r2, [pc, #236]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004bf6:	f023 0301 	bic.w	r3, r3, #1
 8004bfa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bfe:	f7fe fcdf 	bl	80035c0 <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c04:	e008      	b.n	8004c18 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c06:	f7fe fcdb 	bl	80035c0 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e1f5      	b.n	8005004 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c18:	4b32      	ldr	r3, [pc, #200]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1ef      	bne.n	8004c06 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0304 	and.w	r3, r3, #4
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 80a6 	beq.w	8004d80 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c34:	2300      	movs	r3, #0
 8004c36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c38:	4b2a      	ldr	r3, [pc, #168]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10d      	bne.n	8004c60 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c44:	4b27      	ldr	r3, [pc, #156]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c48:	4a26      	ldr	r2, [pc, #152]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004c4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c50:	4b24      	ldr	r3, [pc, #144]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c58:	60bb      	str	r3, [r7, #8]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c60:	4b21      	ldr	r3, [pc, #132]	@ (8004ce8 <HAL_RCC_OscConfig+0x508>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d118      	bne.n	8004c9e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ce8 <HAL_RCC_OscConfig+0x508>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a1d      	ldr	r2, [pc, #116]	@ (8004ce8 <HAL_RCC_OscConfig+0x508>)
 8004c72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c78:	f7fe fca2 	bl	80035c0 <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c80:	f7fe fc9e 	bl	80035c0 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e1b8      	b.n	8005004 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c92:	4b15      	ldr	r3, [pc, #84]	@ (8004ce8 <HAL_RCC_OscConfig+0x508>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0f0      	beq.n	8004c80 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d108      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x4d8>
 8004ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cac:	4a0d      	ldr	r2, [pc, #52]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004cae:	f043 0301 	orr.w	r3, r3, #1
 8004cb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cb6:	e029      	b.n	8004d0c <HAL_RCC_OscConfig+0x52c>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	2b05      	cmp	r3, #5
 8004cbe:	d115      	bne.n	8004cec <HAL_RCC_OscConfig+0x50c>
 8004cc0:	4b08      	ldr	r3, [pc, #32]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cc6:	4a07      	ldr	r2, [pc, #28]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004cc8:	f043 0304 	orr.w	r3, r3, #4
 8004ccc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cd0:	4b04      	ldr	r3, [pc, #16]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd6:	4a03      	ldr	r2, [pc, #12]	@ (8004ce4 <HAL_RCC_OscConfig+0x504>)
 8004cd8:	f043 0301 	orr.w	r3, r3, #1
 8004cdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ce0:	e014      	b.n	8004d0c <HAL_RCC_OscConfig+0x52c>
 8004ce2:	bf00      	nop
 8004ce4:	40021000 	.word	0x40021000
 8004ce8:	40007000 	.word	0x40007000
 8004cec:	4b9d      	ldr	r3, [pc, #628]	@ (8004f64 <HAL_RCC_OscConfig+0x784>)
 8004cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf2:	4a9c      	ldr	r2, [pc, #624]	@ (8004f64 <HAL_RCC_OscConfig+0x784>)
 8004cf4:	f023 0301 	bic.w	r3, r3, #1
 8004cf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cfc:	4b99      	ldr	r3, [pc, #612]	@ (8004f64 <HAL_RCC_OscConfig+0x784>)
 8004cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d02:	4a98      	ldr	r2, [pc, #608]	@ (8004f64 <HAL_RCC_OscConfig+0x784>)
 8004d04:	f023 0304 	bic.w	r3, r3, #4
 8004d08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d016      	beq.n	8004d42 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d14:	f7fe fc54 	bl	80035c0 <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d1a:	e00a      	b.n	8004d32 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d1c:	f7fe fc50 	bl	80035c0 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e168      	b.n	8005004 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d32:	4b8c      	ldr	r3, [pc, #560]	@ (8004f64 <HAL_RCC_OscConfig+0x784>)
 8004d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0ed      	beq.n	8004d1c <HAL_RCC_OscConfig+0x53c>
 8004d40:	e015      	b.n	8004d6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d42:	f7fe fc3d 	bl	80035c0 <HAL_GetTick>
 8004d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d48:	e00a      	b.n	8004d60 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d4a:	f7fe fc39 	bl	80035c0 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e151      	b.n	8005004 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d60:	4b80      	ldr	r3, [pc, #512]	@ (8004f64 <HAL_RCC_OscConfig+0x784>)
 8004d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1ed      	bne.n	8004d4a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d6e:	7ffb      	ldrb	r3, [r7, #31]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d105      	bne.n	8004d80 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d74:	4b7b      	ldr	r3, [pc, #492]	@ (8004f64 <HAL_RCC_OscConfig+0x784>)
 8004d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d78:	4a7a      	ldr	r2, [pc, #488]	@ (8004f64 <HAL_RCC_OscConfig+0x784>)
 8004d7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d7e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0320 	and.w	r3, r3, #32
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d03c      	beq.n	8004e06 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d01c      	beq.n	8004dce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d94:	4b73      	ldr	r3, [pc, #460]	@ (8004f64 <HAL_RCC_OscConfig+0x784>)
 8004d96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d9a:	4a72      	ldr	r2, [pc, #456]	@ (8004f64 <HAL_RCC_OscConfig+0x784>)
 8004d9c:	f043 0301 	orr.w	r3, r3, #1
 8004da0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da4:	f7fe fc0c 	bl	80035c0 <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004daa:	e008      	b.n	8004dbe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dac:	f7fe fc08 	bl	80035c0 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e122      	b.n	8005004 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dbe:	4b69      	ldr	r3, [pc, #420]	@ (8004f64 <HAL_RCC_OscConfig+0x784>)
 8004dc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d0ef      	beq.n	8004dac <HAL_RCC_OscConfig+0x5cc>
 8004dcc:	e01b      	b.n	8004e06 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004dce:	4b65      	ldr	r3, [pc, #404]	@ (8004f64 <HAL_RCC_OscConfig+0x784>)
 8004dd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dd4:	4a63      	ldr	r2, [pc, #396]	@ (8004f64 <HAL_RCC_OscConfig+0x784>)
 8004dd6:	f023 0301 	bic.w	r3, r3, #1
 8004dda:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dde:	f7fe fbef 	bl	80035c0 <HAL_GetTick>
 8004de2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004de4:	e008      	b.n	8004df8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004de6:	f7fe fbeb 	bl	80035c0 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e105      	b.n	8005004 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004df8:	4b5a      	ldr	r3, [pc, #360]	@ (8004f64 <HAL_RCC_OscConfig+0x784>)
 8004dfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1ef      	bne.n	8004de6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 80f9 	beq.w	8005002 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	f040 80cf 	bne.w	8004fb8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e1a:	4b52      	ldr	r3, [pc, #328]	@ (8004f64 <HAL_RCC_OscConfig+0x784>)
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f003 0203 	and.w	r2, r3, #3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d12c      	bne.n	8004e88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d123      	bne.n	8004e88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e4a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d11b      	bne.n	8004e88 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e5a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d113      	bne.n	8004e88 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e6a:	085b      	lsrs	r3, r3, #1
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d109      	bne.n	8004e88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7e:	085b      	lsrs	r3, r3, #1
 8004e80:	3b01      	subs	r3, #1
 8004e82:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d071      	beq.n	8004f6c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	2b0c      	cmp	r3, #12
 8004e8c:	d068      	beq.n	8004f60 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e8e:	4b35      	ldr	r3, [pc, #212]	@ (8004f64 <HAL_RCC_OscConfig+0x784>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d105      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004e9a:	4b32      	ldr	r3, [pc, #200]	@ (8004f64 <HAL_RCC_OscConfig+0x784>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e0ac      	b.n	8005004 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004eaa:	4b2e      	ldr	r3, [pc, #184]	@ (8004f64 <HAL_RCC_OscConfig+0x784>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a2d      	ldr	r2, [pc, #180]	@ (8004f64 <HAL_RCC_OscConfig+0x784>)
 8004eb0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004eb4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004eb6:	f7fe fb83 	bl	80035c0 <HAL_GetTick>
 8004eba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ebc:	e008      	b.n	8004ed0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ebe:	f7fe fb7f 	bl	80035c0 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e099      	b.n	8005004 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ed0:	4b24      	ldr	r3, [pc, #144]	@ (8004f64 <HAL_RCC_OscConfig+0x784>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1f0      	bne.n	8004ebe <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004edc:	4b21      	ldr	r3, [pc, #132]	@ (8004f64 <HAL_RCC_OscConfig+0x784>)
 8004ede:	68da      	ldr	r2, [r3, #12]
 8004ee0:	4b21      	ldr	r3, [pc, #132]	@ (8004f68 <HAL_RCC_OscConfig+0x788>)
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004eec:	3a01      	subs	r2, #1
 8004eee:	0112      	lsls	r2, r2, #4
 8004ef0:	4311      	orrs	r1, r2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ef6:	0212      	lsls	r2, r2, #8
 8004ef8:	4311      	orrs	r1, r2
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004efe:	0852      	lsrs	r2, r2, #1
 8004f00:	3a01      	subs	r2, #1
 8004f02:	0552      	lsls	r2, r2, #21
 8004f04:	4311      	orrs	r1, r2
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004f0a:	0852      	lsrs	r2, r2, #1
 8004f0c:	3a01      	subs	r2, #1
 8004f0e:	0652      	lsls	r2, r2, #25
 8004f10:	4311      	orrs	r1, r2
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f16:	06d2      	lsls	r2, r2, #27
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	4912      	ldr	r1, [pc, #72]	@ (8004f64 <HAL_RCC_OscConfig+0x784>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f20:	4b10      	ldr	r3, [pc, #64]	@ (8004f64 <HAL_RCC_OscConfig+0x784>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a0f      	ldr	r2, [pc, #60]	@ (8004f64 <HAL_RCC_OscConfig+0x784>)
 8004f26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8004f64 <HAL_RCC_OscConfig+0x784>)
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	4a0c      	ldr	r2, [pc, #48]	@ (8004f64 <HAL_RCC_OscConfig+0x784>)
 8004f32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f38:	f7fe fb42 	bl	80035c0 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f40:	f7fe fb3e 	bl	80035c0 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e058      	b.n	8005004 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f52:	4b04      	ldr	r3, [pc, #16]	@ (8004f64 <HAL_RCC_OscConfig+0x784>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0f0      	beq.n	8004f40 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f5e:	e050      	b.n	8005002 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e04f      	b.n	8005004 <HAL_RCC_OscConfig+0x824>
 8004f64:	40021000 	.word	0x40021000
 8004f68:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f6c:	4b27      	ldr	r3, [pc, #156]	@ (800500c <HAL_RCC_OscConfig+0x82c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d144      	bne.n	8005002 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f78:	4b24      	ldr	r3, [pc, #144]	@ (800500c <HAL_RCC_OscConfig+0x82c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a23      	ldr	r2, [pc, #140]	@ (800500c <HAL_RCC_OscConfig+0x82c>)
 8004f7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f84:	4b21      	ldr	r3, [pc, #132]	@ (800500c <HAL_RCC_OscConfig+0x82c>)
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	4a20      	ldr	r2, [pc, #128]	@ (800500c <HAL_RCC_OscConfig+0x82c>)
 8004f8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f90:	f7fe fb16 	bl	80035c0 <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f96:	e008      	b.n	8004faa <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f98:	f7fe fb12 	bl	80035c0 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e02c      	b.n	8005004 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004faa:	4b18      	ldr	r3, [pc, #96]	@ (800500c <HAL_RCC_OscConfig+0x82c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0f0      	beq.n	8004f98 <HAL_RCC_OscConfig+0x7b8>
 8004fb6:	e024      	b.n	8005002 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	2b0c      	cmp	r3, #12
 8004fbc:	d01f      	beq.n	8004ffe <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fbe:	4b13      	ldr	r3, [pc, #76]	@ (800500c <HAL_RCC_OscConfig+0x82c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a12      	ldr	r2, [pc, #72]	@ (800500c <HAL_RCC_OscConfig+0x82c>)
 8004fc4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fca:	f7fe faf9 	bl	80035c0 <HAL_GetTick>
 8004fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd2:	f7fe faf5 	bl	80035c0 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e00f      	b.n	8005004 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fe4:	4b09      	ldr	r3, [pc, #36]	@ (800500c <HAL_RCC_OscConfig+0x82c>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1f0      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004ff0:	4b06      	ldr	r3, [pc, #24]	@ (800500c <HAL_RCC_OscConfig+0x82c>)
 8004ff2:	68da      	ldr	r2, [r3, #12]
 8004ff4:	4905      	ldr	r1, [pc, #20]	@ (800500c <HAL_RCC_OscConfig+0x82c>)
 8004ff6:	4b06      	ldr	r3, [pc, #24]	@ (8005010 <HAL_RCC_OscConfig+0x830>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	60cb      	str	r3, [r1, #12]
 8004ffc:	e001      	b.n	8005002 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3720      	adds	r7, #32
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40021000 	.word	0x40021000
 8005010:	feeefffc 	.word	0xfeeefffc

08005014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e0e7      	b.n	80051f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005028:	4b75      	ldr	r3, [pc, #468]	@ (8005200 <HAL_RCC_ClockConfig+0x1ec>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0307 	and.w	r3, r3, #7
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	429a      	cmp	r2, r3
 8005034:	d910      	bls.n	8005058 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005036:	4b72      	ldr	r3, [pc, #456]	@ (8005200 <HAL_RCC_ClockConfig+0x1ec>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f023 0207 	bic.w	r2, r3, #7
 800503e:	4970      	ldr	r1, [pc, #448]	@ (8005200 <HAL_RCC_ClockConfig+0x1ec>)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	4313      	orrs	r3, r2
 8005044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005046:	4b6e      	ldr	r3, [pc, #440]	@ (8005200 <HAL_RCC_ClockConfig+0x1ec>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0307 	and.w	r3, r3, #7
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	429a      	cmp	r2, r3
 8005052:	d001      	beq.n	8005058 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e0cf      	b.n	80051f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d010      	beq.n	8005086 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	4b66      	ldr	r3, [pc, #408]	@ (8005204 <HAL_RCC_ClockConfig+0x1f0>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005070:	429a      	cmp	r2, r3
 8005072:	d908      	bls.n	8005086 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005074:	4b63      	ldr	r3, [pc, #396]	@ (8005204 <HAL_RCC_ClockConfig+0x1f0>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	4960      	ldr	r1, [pc, #384]	@ (8005204 <HAL_RCC_ClockConfig+0x1f0>)
 8005082:	4313      	orrs	r3, r2
 8005084:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d04c      	beq.n	800512c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	2b03      	cmp	r3, #3
 8005098:	d107      	bne.n	80050aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800509a:	4b5a      	ldr	r3, [pc, #360]	@ (8005204 <HAL_RCC_ClockConfig+0x1f0>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d121      	bne.n	80050ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e0a6      	b.n	80051f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d107      	bne.n	80050c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050b2:	4b54      	ldr	r3, [pc, #336]	@ (8005204 <HAL_RCC_ClockConfig+0x1f0>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d115      	bne.n	80050ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e09a      	b.n	80051f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d107      	bne.n	80050da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050ca:	4b4e      	ldr	r3, [pc, #312]	@ (8005204 <HAL_RCC_ClockConfig+0x1f0>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d109      	bne.n	80050ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e08e      	b.n	80051f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050da:	4b4a      	ldr	r3, [pc, #296]	@ (8005204 <HAL_RCC_ClockConfig+0x1f0>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e086      	b.n	80051f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050ea:	4b46      	ldr	r3, [pc, #280]	@ (8005204 <HAL_RCC_ClockConfig+0x1f0>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f023 0203 	bic.w	r2, r3, #3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	4943      	ldr	r1, [pc, #268]	@ (8005204 <HAL_RCC_ClockConfig+0x1f0>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050fc:	f7fe fa60 	bl	80035c0 <HAL_GetTick>
 8005100:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005102:	e00a      	b.n	800511a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005104:	f7fe fa5c 	bl	80035c0 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005112:	4293      	cmp	r3, r2
 8005114:	d901      	bls.n	800511a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e06e      	b.n	80051f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800511a:	4b3a      	ldr	r3, [pc, #232]	@ (8005204 <HAL_RCC_ClockConfig+0x1f0>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 020c 	and.w	r2, r3, #12
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	429a      	cmp	r2, r3
 800512a:	d1eb      	bne.n	8005104 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d010      	beq.n	800515a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	4b31      	ldr	r3, [pc, #196]	@ (8005204 <HAL_RCC_ClockConfig+0x1f0>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005144:	429a      	cmp	r2, r3
 8005146:	d208      	bcs.n	800515a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005148:	4b2e      	ldr	r3, [pc, #184]	@ (8005204 <HAL_RCC_ClockConfig+0x1f0>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	492b      	ldr	r1, [pc, #172]	@ (8005204 <HAL_RCC_ClockConfig+0x1f0>)
 8005156:	4313      	orrs	r3, r2
 8005158:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800515a:	4b29      	ldr	r3, [pc, #164]	@ (8005200 <HAL_RCC_ClockConfig+0x1ec>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0307 	and.w	r3, r3, #7
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	429a      	cmp	r2, r3
 8005166:	d210      	bcs.n	800518a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005168:	4b25      	ldr	r3, [pc, #148]	@ (8005200 <HAL_RCC_ClockConfig+0x1ec>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f023 0207 	bic.w	r2, r3, #7
 8005170:	4923      	ldr	r1, [pc, #140]	@ (8005200 <HAL_RCC_ClockConfig+0x1ec>)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	4313      	orrs	r3, r2
 8005176:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005178:	4b21      	ldr	r3, [pc, #132]	@ (8005200 <HAL_RCC_ClockConfig+0x1ec>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	429a      	cmp	r2, r3
 8005184:	d001      	beq.n	800518a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e036      	b.n	80051f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0304 	and.w	r3, r3, #4
 8005192:	2b00      	cmp	r3, #0
 8005194:	d008      	beq.n	80051a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005196:	4b1b      	ldr	r3, [pc, #108]	@ (8005204 <HAL_RCC_ClockConfig+0x1f0>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	4918      	ldr	r1, [pc, #96]	@ (8005204 <HAL_RCC_ClockConfig+0x1f0>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0308 	and.w	r3, r3, #8
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d009      	beq.n	80051c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051b4:	4b13      	ldr	r3, [pc, #76]	@ (8005204 <HAL_RCC_ClockConfig+0x1f0>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	4910      	ldr	r1, [pc, #64]	@ (8005204 <HAL_RCC_ClockConfig+0x1f0>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051c8:	f000 f824 	bl	8005214 <HAL_RCC_GetSysClockFreq>
 80051cc:	4602      	mov	r2, r0
 80051ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005204 <HAL_RCC_ClockConfig+0x1f0>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	091b      	lsrs	r3, r3, #4
 80051d4:	f003 030f 	and.w	r3, r3, #15
 80051d8:	490b      	ldr	r1, [pc, #44]	@ (8005208 <HAL_RCC_ClockConfig+0x1f4>)
 80051da:	5ccb      	ldrb	r3, [r1, r3]
 80051dc:	f003 031f 	and.w	r3, r3, #31
 80051e0:	fa22 f303 	lsr.w	r3, r2, r3
 80051e4:	4a09      	ldr	r2, [pc, #36]	@ (800520c <HAL_RCC_ClockConfig+0x1f8>)
 80051e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80051e8:	4b09      	ldr	r3, [pc, #36]	@ (8005210 <HAL_RCC_ClockConfig+0x1fc>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7fe f997 	bl	8003520 <HAL_InitTick>
 80051f2:	4603      	mov	r3, r0
 80051f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80051f6:	7afb      	ldrb	r3, [r7, #11]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	40022000 	.word	0x40022000
 8005204:	40021000 	.word	0x40021000
 8005208:	08009e34 	.word	0x08009e34
 800520c:	20000030 	.word	0x20000030
 8005210:	20000034 	.word	0x20000034

08005214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005214:	b480      	push	{r7}
 8005216:	b089      	sub	sp, #36	@ 0x24
 8005218:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800521a:	2300      	movs	r3, #0
 800521c:	61fb      	str	r3, [r7, #28]
 800521e:	2300      	movs	r3, #0
 8005220:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005222:	4b3e      	ldr	r3, [pc, #248]	@ (800531c <HAL_RCC_GetSysClockFreq+0x108>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f003 030c 	and.w	r3, r3, #12
 800522a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800522c:	4b3b      	ldr	r3, [pc, #236]	@ (800531c <HAL_RCC_GetSysClockFreq+0x108>)
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f003 0303 	and.w	r3, r3, #3
 8005234:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d005      	beq.n	8005248 <HAL_RCC_GetSysClockFreq+0x34>
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	2b0c      	cmp	r3, #12
 8005240:	d121      	bne.n	8005286 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d11e      	bne.n	8005286 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005248:	4b34      	ldr	r3, [pc, #208]	@ (800531c <HAL_RCC_GetSysClockFreq+0x108>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0308 	and.w	r3, r3, #8
 8005250:	2b00      	cmp	r3, #0
 8005252:	d107      	bne.n	8005264 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005254:	4b31      	ldr	r3, [pc, #196]	@ (800531c <HAL_RCC_GetSysClockFreq+0x108>)
 8005256:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800525a:	0a1b      	lsrs	r3, r3, #8
 800525c:	f003 030f 	and.w	r3, r3, #15
 8005260:	61fb      	str	r3, [r7, #28]
 8005262:	e005      	b.n	8005270 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005264:	4b2d      	ldr	r3, [pc, #180]	@ (800531c <HAL_RCC_GetSysClockFreq+0x108>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	091b      	lsrs	r3, r3, #4
 800526a:	f003 030f 	and.w	r3, r3, #15
 800526e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005270:	4a2b      	ldr	r2, [pc, #172]	@ (8005320 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005278:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10d      	bne.n	800529c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005284:	e00a      	b.n	800529c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	2b04      	cmp	r3, #4
 800528a:	d102      	bne.n	8005292 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800528c:	4b25      	ldr	r3, [pc, #148]	@ (8005324 <HAL_RCC_GetSysClockFreq+0x110>)
 800528e:	61bb      	str	r3, [r7, #24]
 8005290:	e004      	b.n	800529c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	2b08      	cmp	r3, #8
 8005296:	d101      	bne.n	800529c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005298:	4b23      	ldr	r3, [pc, #140]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x114>)
 800529a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	2b0c      	cmp	r3, #12
 80052a0:	d134      	bne.n	800530c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052a2:	4b1e      	ldr	r3, [pc, #120]	@ (800531c <HAL_RCC_GetSysClockFreq+0x108>)
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d003      	beq.n	80052ba <HAL_RCC_GetSysClockFreq+0xa6>
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2b03      	cmp	r3, #3
 80052b6:	d003      	beq.n	80052c0 <HAL_RCC_GetSysClockFreq+0xac>
 80052b8:	e005      	b.n	80052c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80052ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005324 <HAL_RCC_GetSysClockFreq+0x110>)
 80052bc:	617b      	str	r3, [r7, #20]
      break;
 80052be:	e005      	b.n	80052cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80052c0:	4b19      	ldr	r3, [pc, #100]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x114>)
 80052c2:	617b      	str	r3, [r7, #20]
      break;
 80052c4:	e002      	b.n	80052cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	617b      	str	r3, [r7, #20]
      break;
 80052ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052cc:	4b13      	ldr	r3, [pc, #76]	@ (800531c <HAL_RCC_GetSysClockFreq+0x108>)
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	091b      	lsrs	r3, r3, #4
 80052d2:	f003 0307 	and.w	r3, r3, #7
 80052d6:	3301      	adds	r3, #1
 80052d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80052da:	4b10      	ldr	r3, [pc, #64]	@ (800531c <HAL_RCC_GetSysClockFreq+0x108>)
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	0a1b      	lsrs	r3, r3, #8
 80052e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	fb03 f202 	mul.w	r2, r3, r2
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052f2:	4b0a      	ldr	r3, [pc, #40]	@ (800531c <HAL_RCC_GetSysClockFreq+0x108>)
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	0e5b      	lsrs	r3, r3, #25
 80052f8:	f003 0303 	and.w	r3, r3, #3
 80052fc:	3301      	adds	r3, #1
 80052fe:	005b      	lsls	r3, r3, #1
 8005300:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	fbb2 f3f3 	udiv	r3, r2, r3
 800530a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800530c:	69bb      	ldr	r3, [r7, #24]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3724      	adds	r7, #36	@ 0x24
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	40021000 	.word	0x40021000
 8005320:	08009e4c 	.word	0x08009e4c
 8005324:	00f42400 	.word	0x00f42400
 8005328:	007a1200 	.word	0x007a1200

0800532c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005330:	4b03      	ldr	r3, [pc, #12]	@ (8005340 <HAL_RCC_GetHCLKFreq+0x14>)
 8005332:	681b      	ldr	r3, [r3, #0]
}
 8005334:	4618      	mov	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	20000030 	.word	0x20000030

08005344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005348:	f7ff fff0 	bl	800532c <HAL_RCC_GetHCLKFreq>
 800534c:	4602      	mov	r2, r0
 800534e:	4b06      	ldr	r3, [pc, #24]	@ (8005368 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	0a1b      	lsrs	r3, r3, #8
 8005354:	f003 0307 	and.w	r3, r3, #7
 8005358:	4904      	ldr	r1, [pc, #16]	@ (800536c <HAL_RCC_GetPCLK1Freq+0x28>)
 800535a:	5ccb      	ldrb	r3, [r1, r3]
 800535c:	f003 031f 	and.w	r3, r3, #31
 8005360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005364:	4618      	mov	r0, r3
 8005366:	bd80      	pop	{r7, pc}
 8005368:	40021000 	.word	0x40021000
 800536c:	08009e44 	.word	0x08009e44

08005370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005374:	f7ff ffda 	bl	800532c <HAL_RCC_GetHCLKFreq>
 8005378:	4602      	mov	r2, r0
 800537a:	4b06      	ldr	r3, [pc, #24]	@ (8005394 <HAL_RCC_GetPCLK2Freq+0x24>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	0adb      	lsrs	r3, r3, #11
 8005380:	f003 0307 	and.w	r3, r3, #7
 8005384:	4904      	ldr	r1, [pc, #16]	@ (8005398 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005386:	5ccb      	ldrb	r3, [r1, r3]
 8005388:	f003 031f 	and.w	r3, r3, #31
 800538c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005390:	4618      	mov	r0, r3
 8005392:	bd80      	pop	{r7, pc}
 8005394:	40021000 	.word	0x40021000
 8005398:	08009e44 	.word	0x08009e44

0800539c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053a4:	2300      	movs	r3, #0
 80053a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053a8:	4b2a      	ldr	r3, [pc, #168]	@ (8005454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053b4:	f7ff f9a0 	bl	80046f8 <HAL_PWREx_GetVoltageRange>
 80053b8:	6178      	str	r0, [r7, #20]
 80053ba:	e014      	b.n	80053e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80053bc:	4b25      	ldr	r3, [pc, #148]	@ (8005454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053c0:	4a24      	ldr	r2, [pc, #144]	@ (8005454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80053c8:	4b22      	ldr	r3, [pc, #136]	@ (8005454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80053d4:	f7ff f990 	bl	80046f8 <HAL_PWREx_GetVoltageRange>
 80053d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80053da:	4b1e      	ldr	r3, [pc, #120]	@ (8005454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053de:	4a1d      	ldr	r2, [pc, #116]	@ (8005454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053ec:	d10b      	bne.n	8005406 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b80      	cmp	r3, #128	@ 0x80
 80053f2:	d919      	bls.n	8005428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2ba0      	cmp	r3, #160	@ 0xa0
 80053f8:	d902      	bls.n	8005400 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053fa:	2302      	movs	r3, #2
 80053fc:	613b      	str	r3, [r7, #16]
 80053fe:	e013      	b.n	8005428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005400:	2301      	movs	r3, #1
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	e010      	b.n	8005428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b80      	cmp	r3, #128	@ 0x80
 800540a:	d902      	bls.n	8005412 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800540c:	2303      	movs	r3, #3
 800540e:	613b      	str	r3, [r7, #16]
 8005410:	e00a      	b.n	8005428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b80      	cmp	r3, #128	@ 0x80
 8005416:	d102      	bne.n	800541e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005418:	2302      	movs	r3, #2
 800541a:	613b      	str	r3, [r7, #16]
 800541c:	e004      	b.n	8005428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b70      	cmp	r3, #112	@ 0x70
 8005422:	d101      	bne.n	8005428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005424:	2301      	movs	r3, #1
 8005426:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005428:	4b0b      	ldr	r3, [pc, #44]	@ (8005458 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f023 0207 	bic.w	r2, r3, #7
 8005430:	4909      	ldr	r1, [pc, #36]	@ (8005458 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	4313      	orrs	r3, r2
 8005436:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005438:	4b07      	ldr	r3, [pc, #28]	@ (8005458 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0307 	and.w	r3, r3, #7
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	429a      	cmp	r2, r3
 8005444:	d001      	beq.n	800544a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e000      	b.n	800544c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	40021000 	.word	0x40021000
 8005458:	40022000 	.word	0x40022000

0800545c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005464:	2300      	movs	r3, #0
 8005466:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005468:	2300      	movs	r3, #0
 800546a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005474:	2b00      	cmp	r3, #0
 8005476:	d041      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800547c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005480:	d02a      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005482:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005486:	d824      	bhi.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005488:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800548c:	d008      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800548e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005492:	d81e      	bhi.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00a      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005498:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800549c:	d010      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800549e:	e018      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054a0:	4b86      	ldr	r3, [pc, #536]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	4a85      	ldr	r2, [pc, #532]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054ac:	e015      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	3304      	adds	r3, #4
 80054b2:	2100      	movs	r1, #0
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 facd 	bl	8005a54 <RCCEx_PLLSAI1_Config>
 80054ba:	4603      	mov	r3, r0
 80054bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054be:	e00c      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	3320      	adds	r3, #32
 80054c4:	2100      	movs	r1, #0
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 fbb6 	bl	8005c38 <RCCEx_PLLSAI2_Config>
 80054cc:	4603      	mov	r3, r0
 80054ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054d0:	e003      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	74fb      	strb	r3, [r7, #19]
      break;
 80054d6:	e000      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80054d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054da:	7cfb      	ldrb	r3, [r7, #19]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10b      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054e0:	4b76      	ldr	r3, [pc, #472]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054ee:	4973      	ldr	r1, [pc, #460]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80054f6:	e001      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f8:	7cfb      	ldrb	r3, [r7, #19]
 80054fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d041      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800550c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005510:	d02a      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005512:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005516:	d824      	bhi.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005518:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800551c:	d008      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800551e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005522:	d81e      	bhi.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005528:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800552c:	d010      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800552e:	e018      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005530:	4b62      	ldr	r3, [pc, #392]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	4a61      	ldr	r2, [pc, #388]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005536:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800553a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800553c:	e015      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	3304      	adds	r3, #4
 8005542:	2100      	movs	r1, #0
 8005544:	4618      	mov	r0, r3
 8005546:	f000 fa85 	bl	8005a54 <RCCEx_PLLSAI1_Config>
 800554a:	4603      	mov	r3, r0
 800554c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800554e:	e00c      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3320      	adds	r3, #32
 8005554:	2100      	movs	r1, #0
 8005556:	4618      	mov	r0, r3
 8005558:	f000 fb6e 	bl	8005c38 <RCCEx_PLLSAI2_Config>
 800555c:	4603      	mov	r3, r0
 800555e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005560:	e003      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	74fb      	strb	r3, [r7, #19]
      break;
 8005566:	e000      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005568:	bf00      	nop
    }

    if(ret == HAL_OK)
 800556a:	7cfb      	ldrb	r3, [r7, #19]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10b      	bne.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005570:	4b52      	ldr	r3, [pc, #328]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005576:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800557e:	494f      	ldr	r1, [pc, #316]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005580:	4313      	orrs	r3, r2
 8005582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005586:	e001      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005588:	7cfb      	ldrb	r3, [r7, #19]
 800558a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 80a0 	beq.w	80056da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800559a:	2300      	movs	r3, #0
 800559c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800559e:	4b47      	ldr	r3, [pc, #284]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x152>
 80055aa:	2301      	movs	r3, #1
 80055ac:	e000      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80055ae:	2300      	movs	r3, #0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00d      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055b4:	4b41      	ldr	r3, [pc, #260]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055b8:	4a40      	ldr	r2, [pc, #256]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055be:	6593      	str	r3, [r2, #88]	@ 0x58
 80055c0:	4b3e      	ldr	r3, [pc, #248]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055c8:	60bb      	str	r3, [r7, #8]
 80055ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055cc:	2301      	movs	r3, #1
 80055ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055d0:	4b3b      	ldr	r3, [pc, #236]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a3a      	ldr	r2, [pc, #232]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80055d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055dc:	f7fd fff0 	bl	80035c0 <HAL_GetTick>
 80055e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055e2:	e009      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055e4:	f7fd ffec 	bl	80035c0 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d902      	bls.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	74fb      	strb	r3, [r7, #19]
        break;
 80055f6:	e005      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055f8:	4b31      	ldr	r3, [pc, #196]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005600:	2b00      	cmp	r3, #0
 8005602:	d0ef      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005604:	7cfb      	ldrb	r3, [r7, #19]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d15c      	bne.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800560a:	4b2c      	ldr	r3, [pc, #176]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800560c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005610:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005614:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d01f      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	429a      	cmp	r2, r3
 8005626:	d019      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005628:	4b24      	ldr	r3, [pc, #144]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800562a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800562e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005632:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005634:	4b21      	ldr	r3, [pc, #132]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800563a:	4a20      	ldr	r2, [pc, #128]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800563c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005640:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005644:	4b1d      	ldr	r3, [pc, #116]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800564a:	4a1c      	ldr	r2, [pc, #112]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800564c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005650:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005654:	4a19      	ldr	r2, [pc, #100]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b00      	cmp	r3, #0
 8005664:	d016      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005666:	f7fd ffab 	bl	80035c0 <HAL_GetTick>
 800566a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800566c:	e00b      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800566e:	f7fd ffa7 	bl	80035c0 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	f241 3288 	movw	r2, #5000	@ 0x1388
 800567c:	4293      	cmp	r3, r2
 800567e:	d902      	bls.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	74fb      	strb	r3, [r7, #19]
            break;
 8005684:	e006      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005686:	4b0d      	ldr	r3, [pc, #52]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d0ec      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005694:	7cfb      	ldrb	r3, [r7, #19]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10c      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800569a:	4b08      	ldr	r3, [pc, #32]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800569c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056aa:	4904      	ldr	r1, [pc, #16]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80056b2:	e009      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056b4:	7cfb      	ldrb	r3, [r7, #19]
 80056b6:	74bb      	strb	r3, [r7, #18]
 80056b8:	e006      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80056ba:	bf00      	nop
 80056bc:	40021000 	.word	0x40021000
 80056c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c4:	7cfb      	ldrb	r3, [r7, #19]
 80056c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056c8:	7c7b      	ldrb	r3, [r7, #17]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d105      	bne.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056ce:	4ba6      	ldr	r3, [pc, #664]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056d2:	4aa5      	ldr	r2, [pc, #660]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056e6:	4ba0      	ldr	r3, [pc, #640]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ec:	f023 0203 	bic.w	r2, r3, #3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f4:	499c      	ldr	r1, [pc, #624]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00a      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005708:	4b97      	ldr	r3, [pc, #604]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800570a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800570e:	f023 020c 	bic.w	r2, r3, #12
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005716:	4994      	ldr	r1, [pc, #592]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005718:	4313      	orrs	r3, r2
 800571a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0304 	and.w	r3, r3, #4
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800572a:	4b8f      	ldr	r3, [pc, #572]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800572c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005730:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005738:	498b      	ldr	r1, [pc, #556]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800573a:	4313      	orrs	r3, r2
 800573c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0308 	and.w	r3, r3, #8
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00a      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800574c:	4b86      	ldr	r3, [pc, #536]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800574e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005752:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800575a:	4983      	ldr	r1, [pc, #524]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800575c:	4313      	orrs	r3, r2
 800575e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0310 	and.w	r3, r3, #16
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800576e:	4b7e      	ldr	r3, [pc, #504]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005774:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800577c:	497a      	ldr	r1, [pc, #488]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800577e:	4313      	orrs	r3, r2
 8005780:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0320 	and.w	r3, r3, #32
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00a      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005790:	4b75      	ldr	r3, [pc, #468]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005796:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800579e:	4972      	ldr	r1, [pc, #456]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057b2:	4b6d      	ldr	r3, [pc, #436]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057c0:	4969      	ldr	r1, [pc, #420]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00a      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057d4:	4b64      	ldr	r3, [pc, #400]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057e2:	4961      	ldr	r1, [pc, #388]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00a      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057f6:	4b5c      	ldr	r3, [pc, #368]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057fc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005804:	4958      	ldr	r1, [pc, #352]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005806:	4313      	orrs	r3, r2
 8005808:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00a      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005818:	4b53      	ldr	r3, [pc, #332]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800581a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800581e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005826:	4950      	ldr	r1, [pc, #320]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005828:	4313      	orrs	r3, r2
 800582a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00a      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800583a:	4b4b      	ldr	r3, [pc, #300]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800583c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005840:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005848:	4947      	ldr	r1, [pc, #284]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800584a:	4313      	orrs	r3, r2
 800584c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00a      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800585c:	4b42      	ldr	r3, [pc, #264]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800585e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005862:	f023 0203 	bic.w	r2, r3, #3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800586a:	493f      	ldr	r1, [pc, #252]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800586c:	4313      	orrs	r3, r2
 800586e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d028      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800587e:	4b3a      	ldr	r3, [pc, #232]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005884:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800588c:	4936      	ldr	r1, [pc, #216]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800588e:	4313      	orrs	r3, r2
 8005890:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005898:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800589c:	d106      	bne.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800589e:	4b32      	ldr	r3, [pc, #200]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	4a31      	ldr	r2, [pc, #196]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058a8:	60d3      	str	r3, [r2, #12]
 80058aa:	e011      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058b4:	d10c      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	3304      	adds	r3, #4
 80058ba:	2101      	movs	r1, #1
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 f8c9 	bl	8005a54 <RCCEx_PLLSAI1_Config>
 80058c2:	4603      	mov	r3, r0
 80058c4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80058c6:	7cfb      	ldrb	r3, [r7, #19]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80058cc:	7cfb      	ldrb	r3, [r7, #19]
 80058ce:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d028      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80058dc:	4b22      	ldr	r3, [pc, #136]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ea:	491f      	ldr	r1, [pc, #124]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058fa:	d106      	bne.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	4a19      	ldr	r2, [pc, #100]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005902:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005906:	60d3      	str	r3, [r2, #12]
 8005908:	e011      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800590e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005912:	d10c      	bne.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	3304      	adds	r3, #4
 8005918:	2101      	movs	r1, #1
 800591a:	4618      	mov	r0, r3
 800591c:	f000 f89a 	bl	8005a54 <RCCEx_PLLSAI1_Config>
 8005920:	4603      	mov	r3, r0
 8005922:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005924:	7cfb      	ldrb	r3, [r7, #19]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800592a:	7cfb      	ldrb	r3, [r7, #19]
 800592c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d02a      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800593a:	4b0b      	ldr	r3, [pc, #44]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800593c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005940:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005948:	4907      	ldr	r1, [pc, #28]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800594a:	4313      	orrs	r3, r2
 800594c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005954:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005958:	d108      	bne.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800595a:	4b03      	ldr	r3, [pc, #12]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	4a02      	ldr	r2, [pc, #8]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005960:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005964:	60d3      	str	r3, [r2, #12]
 8005966:	e013      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8005968:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005970:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005974:	d10c      	bne.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	3304      	adds	r3, #4
 800597a:	2101      	movs	r1, #1
 800597c:	4618      	mov	r0, r3
 800597e:	f000 f869 	bl	8005a54 <RCCEx_PLLSAI1_Config>
 8005982:	4603      	mov	r3, r0
 8005984:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005986:	7cfb      	ldrb	r3, [r7, #19]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800598c:	7cfb      	ldrb	r3, [r7, #19]
 800598e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d02f      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800599c:	4b2c      	ldr	r3, [pc, #176]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800599e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059aa:	4929      	ldr	r1, [pc, #164]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059ba:	d10d      	bne.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3304      	adds	r3, #4
 80059c0:	2102      	movs	r1, #2
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 f846 	bl	8005a54 <RCCEx_PLLSAI1_Config>
 80059c8:	4603      	mov	r3, r0
 80059ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059cc:	7cfb      	ldrb	r3, [r7, #19]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d014      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80059d2:	7cfb      	ldrb	r3, [r7, #19]
 80059d4:	74bb      	strb	r3, [r7, #18]
 80059d6:	e011      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059e0:	d10c      	bne.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	3320      	adds	r3, #32
 80059e6:	2102      	movs	r1, #2
 80059e8:	4618      	mov	r0, r3
 80059ea:	f000 f925 	bl	8005c38 <RCCEx_PLLSAI2_Config>
 80059ee:	4603      	mov	r3, r0
 80059f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059f2:	7cfb      	ldrb	r3, [r7, #19]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80059f8:	7cfb      	ldrb	r3, [r7, #19]
 80059fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00b      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a08:	4b11      	ldr	r3, [pc, #68]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a0e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a18:	490d      	ldr	r1, [pc, #52]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00b      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a2c:	4b08      	ldr	r3, [pc, #32]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a32:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a3c:	4904      	ldr	r1, [pc, #16]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005a44:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	40021000 	.word	0x40021000

08005a54 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a62:	4b74      	ldr	r3, [pc, #464]	@ (8005c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d018      	beq.n	8005aa0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005a6e:	4b71      	ldr	r3, [pc, #452]	@ (8005c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	f003 0203 	and.w	r2, r3, #3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d10d      	bne.n	8005a9a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
       ||
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d009      	beq.n	8005a9a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005a86:	4b6b      	ldr	r3, [pc, #428]	@ (8005c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	091b      	lsrs	r3, r3, #4
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	1c5a      	adds	r2, r3, #1
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
       ||
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d047      	beq.n	8005b2a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	73fb      	strb	r3, [r7, #15]
 8005a9e:	e044      	b.n	8005b2a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b03      	cmp	r3, #3
 8005aa6:	d018      	beq.n	8005ada <RCCEx_PLLSAI1_Config+0x86>
 8005aa8:	2b03      	cmp	r3, #3
 8005aaa:	d825      	bhi.n	8005af8 <RCCEx_PLLSAI1_Config+0xa4>
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d002      	beq.n	8005ab6 <RCCEx_PLLSAI1_Config+0x62>
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d009      	beq.n	8005ac8 <RCCEx_PLLSAI1_Config+0x74>
 8005ab4:	e020      	b.n	8005af8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ab6:	4b5f      	ldr	r3, [pc, #380]	@ (8005c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d11d      	bne.n	8005afe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ac6:	e01a      	b.n	8005afe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ac8:	4b5a      	ldr	r3, [pc, #360]	@ (8005c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d116      	bne.n	8005b02 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ad8:	e013      	b.n	8005b02 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ada:	4b56      	ldr	r3, [pc, #344]	@ (8005c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10f      	bne.n	8005b06 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ae6:	4b53      	ldr	r3, [pc, #332]	@ (8005c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d109      	bne.n	8005b06 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005af6:	e006      	b.n	8005b06 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	73fb      	strb	r3, [r7, #15]
      break;
 8005afc:	e004      	b.n	8005b08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005afe:	bf00      	nop
 8005b00:	e002      	b.n	8005b08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b02:	bf00      	nop
 8005b04:	e000      	b.n	8005b08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b06:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10d      	bne.n	8005b2a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b0e:	4b49      	ldr	r3, [pc, #292]	@ (8005c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6819      	ldr	r1, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	011b      	lsls	r3, r3, #4
 8005b22:	430b      	orrs	r3, r1
 8005b24:	4943      	ldr	r1, [pc, #268]	@ (8005c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b2a:	7bfb      	ldrb	r3, [r7, #15]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d17c      	bne.n	8005c2a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005b30:	4b40      	ldr	r3, [pc, #256]	@ (8005c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a3f      	ldr	r2, [pc, #252]	@ (8005c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005b3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b3c:	f7fd fd40 	bl	80035c0 <HAL_GetTick>
 8005b40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b42:	e009      	b.n	8005b58 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b44:	f7fd fd3c 	bl	80035c0 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d902      	bls.n	8005b58 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	73fb      	strb	r3, [r7, #15]
        break;
 8005b56:	e005      	b.n	8005b64 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b58:	4b36      	ldr	r3, [pc, #216]	@ (8005c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1ef      	bne.n	8005b44 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005b64:	7bfb      	ldrb	r3, [r7, #15]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d15f      	bne.n	8005c2a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d110      	bne.n	8005b92 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b70:	4b30      	ldr	r3, [pc, #192]	@ (8005c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005b78:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	6892      	ldr	r2, [r2, #8]
 8005b80:	0211      	lsls	r1, r2, #8
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	68d2      	ldr	r2, [r2, #12]
 8005b86:	06d2      	lsls	r2, r2, #27
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	492a      	ldr	r1, [pc, #168]	@ (8005c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	610b      	str	r3, [r1, #16]
 8005b90:	e027      	b.n	8005be2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d112      	bne.n	8005bbe <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b98:	4b26      	ldr	r3, [pc, #152]	@ (8005c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005ba0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	6892      	ldr	r2, [r2, #8]
 8005ba8:	0211      	lsls	r1, r2, #8
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	6912      	ldr	r2, [r2, #16]
 8005bae:	0852      	lsrs	r2, r2, #1
 8005bb0:	3a01      	subs	r2, #1
 8005bb2:	0552      	lsls	r2, r2, #21
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	491f      	ldr	r1, [pc, #124]	@ (8005c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	610b      	str	r3, [r1, #16]
 8005bbc:	e011      	b.n	8005be2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8005c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005bc6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	6892      	ldr	r2, [r2, #8]
 8005bce:	0211      	lsls	r1, r2, #8
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	6952      	ldr	r2, [r2, #20]
 8005bd4:	0852      	lsrs	r2, r2, #1
 8005bd6:	3a01      	subs	r2, #1
 8005bd8:	0652      	lsls	r2, r2, #25
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	4915      	ldr	r1, [pc, #84]	@ (8005c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005be2:	4b14      	ldr	r3, [pc, #80]	@ (8005c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a13      	ldr	r2, [pc, #76]	@ (8005c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005be8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005bec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bee:	f7fd fce7 	bl	80035c0 <HAL_GetTick>
 8005bf2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005bf4:	e009      	b.n	8005c0a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bf6:	f7fd fce3 	bl	80035c0 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d902      	bls.n	8005c0a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	73fb      	strb	r3, [r7, #15]
          break;
 8005c08:	e005      	b.n	8005c16 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8005c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d0ef      	beq.n	8005bf6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005c16:	7bfb      	ldrb	r3, [r7, #15]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d106      	bne.n	8005c2a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005c1c:	4b05      	ldr	r3, [pc, #20]	@ (8005c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c1e:	691a      	ldr	r2, [r3, #16]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	4903      	ldr	r1, [pc, #12]	@ (8005c34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3710      	adds	r7, #16
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	40021000 	.word	0x40021000

08005c38 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c46:	4b69      	ldr	r3, [pc, #420]	@ (8005dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	f003 0303 	and.w	r3, r3, #3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d018      	beq.n	8005c84 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005c52:	4b66      	ldr	r3, [pc, #408]	@ (8005dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f003 0203 	and.w	r2, r3, #3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d10d      	bne.n	8005c7e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
       ||
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d009      	beq.n	8005c7e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005c6a:	4b60      	ldr	r3, [pc, #384]	@ (8005dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	091b      	lsrs	r3, r3, #4
 8005c70:	f003 0307 	and.w	r3, r3, #7
 8005c74:	1c5a      	adds	r2, r3, #1
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
       ||
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d047      	beq.n	8005d0e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	73fb      	strb	r3, [r7, #15]
 8005c82:	e044      	b.n	8005d0e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b03      	cmp	r3, #3
 8005c8a:	d018      	beq.n	8005cbe <RCCEx_PLLSAI2_Config+0x86>
 8005c8c:	2b03      	cmp	r3, #3
 8005c8e:	d825      	bhi.n	8005cdc <RCCEx_PLLSAI2_Config+0xa4>
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d002      	beq.n	8005c9a <RCCEx_PLLSAI2_Config+0x62>
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d009      	beq.n	8005cac <RCCEx_PLLSAI2_Config+0x74>
 8005c98:	e020      	b.n	8005cdc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c9a:	4b54      	ldr	r3, [pc, #336]	@ (8005dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0302 	and.w	r3, r3, #2
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d11d      	bne.n	8005ce2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005caa:	e01a      	b.n	8005ce2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005cac:	4b4f      	ldr	r3, [pc, #316]	@ (8005dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d116      	bne.n	8005ce6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cbc:	e013      	b.n	8005ce6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005cbe:	4b4b      	ldr	r3, [pc, #300]	@ (8005dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10f      	bne.n	8005cea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005cca:	4b48      	ldr	r3, [pc, #288]	@ (8005dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d109      	bne.n	8005cea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005cda:	e006      	b.n	8005cea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	73fb      	strb	r3, [r7, #15]
      break;
 8005ce0:	e004      	b.n	8005cec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ce2:	bf00      	nop
 8005ce4:	e002      	b.n	8005cec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ce6:	bf00      	nop
 8005ce8:	e000      	b.n	8005cec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005cea:	bf00      	nop
    }

    if(status == HAL_OK)
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10d      	bne.n	8005d0e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005cf2:	4b3e      	ldr	r3, [pc, #248]	@ (8005dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6819      	ldr	r1, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	3b01      	subs	r3, #1
 8005d04:	011b      	lsls	r3, r3, #4
 8005d06:	430b      	orrs	r3, r1
 8005d08:	4938      	ldr	r1, [pc, #224]	@ (8005dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d0e:	7bfb      	ldrb	r3, [r7, #15]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d166      	bne.n	8005de2 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005d14:	4b35      	ldr	r3, [pc, #212]	@ (8005dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a34      	ldr	r2, [pc, #208]	@ (8005dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d20:	f7fd fc4e 	bl	80035c0 <HAL_GetTick>
 8005d24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d26:	e009      	b.n	8005d3c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d28:	f7fd fc4a 	bl	80035c0 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d902      	bls.n	8005d3c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	73fb      	strb	r3, [r7, #15]
        break;
 8005d3a:	e005      	b.n	8005d48 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d3c:	4b2b      	ldr	r3, [pc, #172]	@ (8005dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1ef      	bne.n	8005d28 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005d48:	7bfb      	ldrb	r3, [r7, #15]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d149      	bne.n	8005de2 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d110      	bne.n	8005d76 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d54:	4b25      	ldr	r3, [pc, #148]	@ (8005dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005d5c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	6892      	ldr	r2, [r2, #8]
 8005d64:	0211      	lsls	r1, r2, #8
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	68d2      	ldr	r2, [r2, #12]
 8005d6a:	06d2      	lsls	r2, r2, #27
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	491f      	ldr	r1, [pc, #124]	@ (8005dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	614b      	str	r3, [r1, #20]
 8005d74:	e011      	b.n	8005d9a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d76:	4b1d      	ldr	r3, [pc, #116]	@ (8005dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005d7e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	6892      	ldr	r2, [r2, #8]
 8005d86:	0211      	lsls	r1, r2, #8
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6912      	ldr	r2, [r2, #16]
 8005d8c:	0852      	lsrs	r2, r2, #1
 8005d8e:	3a01      	subs	r2, #1
 8005d90:	0652      	lsls	r2, r2, #25
 8005d92:	430a      	orrs	r2, r1
 8005d94:	4915      	ldr	r1, [pc, #84]	@ (8005dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005d9a:	4b14      	ldr	r3, [pc, #80]	@ (8005dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a13      	ldr	r2, [pc, #76]	@ (8005dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8005da0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005da4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005da6:	f7fd fc0b 	bl	80035c0 <HAL_GetTick>
 8005daa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005dac:	e009      	b.n	8005dc2 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005dae:	f7fd fc07 	bl	80035c0 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d902      	bls.n	8005dc2 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	73fb      	strb	r3, [r7, #15]
          break;
 8005dc0:	e005      	b.n	8005dce <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8005dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d0ef      	beq.n	8005dae <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8005dce:	7bfb      	ldrb	r3, [r7, #15]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d106      	bne.n	8005de2 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005dd4:	4b05      	ldr	r3, [pc, #20]	@ (8005dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8005dd6:	695a      	ldr	r2, [r3, #20]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	4903      	ldr	r1, [pc, #12]	@ (8005dec <RCCEx_PLLSAI2_Config+0x1b4>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	40021000 	.word	0x40021000

08005df0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e095      	b.n	8005f2e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d108      	bne.n	8005e1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e12:	d009      	beq.n	8005e28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	61da      	str	r2, [r3, #28]
 8005e1a:	e005      	b.n	8005e28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d106      	bne.n	8005e48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7fd f97a 	bl	800313c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e68:	d902      	bls.n	8005e70 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60fb      	str	r3, [r7, #12]
 8005e6e:	e002      	b.n	8005e76 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005e74:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005e7e:	d007      	beq.n	8005e90 <HAL_SPI_Init+0xa0>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e88:	d002      	beq.n	8005e90 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	431a      	orrs	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	69db      	ldr	r3, [r3, #28]
 8005ec4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ed2:	ea42 0103 	orr.w	r1, r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eda:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	0c1b      	lsrs	r3, r3, #16
 8005eec:	f003 0204 	and.w	r2, r3, #4
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef4:	f003 0310 	and.w	r3, r3, #16
 8005ef8:	431a      	orrs	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005efe:	f003 0308 	and.w	r3, r3, #8
 8005f02:	431a      	orrs	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005f0c:	ea42 0103 	orr.w	r1, r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b082      	sub	sp, #8
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e01a      	b.n	8005f7e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f5e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f7fd f987 	bl	8003274 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b088      	sub	sp, #32
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	60f8      	str	r0, [r7, #12]
 8005f8e:	60b9      	str	r1, [r7, #8]
 8005f90:	603b      	str	r3, [r7, #0]
 8005f92:	4613      	mov	r3, r2
 8005f94:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f96:	f7fd fb13 	bl	80035c0 <HAL_GetTick>
 8005f9a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005f9c:	88fb      	ldrh	r3, [r7, #6]
 8005f9e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d001      	beq.n	8005fb0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005fac:	2302      	movs	r3, #2
 8005fae:	e15c      	b.n	800626a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d002      	beq.n	8005fbc <HAL_SPI_Transmit+0x36>
 8005fb6:	88fb      	ldrh	r3, [r7, #6]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e154      	b.n	800626a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d101      	bne.n	8005fce <HAL_SPI_Transmit+0x48>
 8005fca:	2302      	movs	r3, #2
 8005fcc:	e14d      	b.n	800626a <HAL_SPI_Transmit+0x2e4>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2203      	movs	r2, #3
 8005fda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	88fa      	ldrh	r2, [r7, #6]
 8005fee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	88fa      	ldrh	r2, [r7, #6]
 8005ff4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006020:	d10f      	bne.n	8006042 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006030:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006040:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800604c:	2b40      	cmp	r3, #64	@ 0x40
 800604e:	d007      	beq.n	8006060 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800605e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006068:	d952      	bls.n	8006110 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d002      	beq.n	8006078 <HAL_SPI_Transmit+0xf2>
 8006072:	8b7b      	ldrh	r3, [r7, #26]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d145      	bne.n	8006104 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800607c:	881a      	ldrh	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006088:	1c9a      	adds	r2, r3, #2
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006092:	b29b      	uxth	r3, r3
 8006094:	3b01      	subs	r3, #1
 8006096:	b29a      	uxth	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800609c:	e032      	b.n	8006104 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d112      	bne.n	80060d2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b0:	881a      	ldrh	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060bc:	1c9a      	adds	r2, r3, #2
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80060d0:	e018      	b.n	8006104 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060d2:	f7fd fa75 	bl	80035c0 <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d803      	bhi.n	80060ea <HAL_SPI_Transmit+0x164>
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e8:	d102      	bne.n	80060f0 <HAL_SPI_Transmit+0x16a>
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d109      	bne.n	8006104 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e0b2      	b.n	800626a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006108:	b29b      	uxth	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1c7      	bne.n	800609e <HAL_SPI_Transmit+0x118>
 800610e:	e083      	b.n	8006218 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <HAL_SPI_Transmit+0x198>
 8006118:	8b7b      	ldrh	r3, [r7, #26]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d177      	bne.n	800620e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006122:	b29b      	uxth	r3, r3
 8006124:	2b01      	cmp	r3, #1
 8006126:	d912      	bls.n	800614e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800612c:	881a      	ldrh	r2, [r3, #0]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006138:	1c9a      	adds	r2, r3, #2
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006142:	b29b      	uxth	r3, r3
 8006144:	3b02      	subs	r3, #2
 8006146:	b29a      	uxth	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800614c:	e05f      	b.n	800620e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	330c      	adds	r3, #12
 8006158:	7812      	ldrb	r2, [r2, #0]
 800615a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006160:	1c5a      	adds	r2, r3, #1
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800616a:	b29b      	uxth	r3, r3
 800616c:	3b01      	subs	r3, #1
 800616e:	b29a      	uxth	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006174:	e04b      	b.n	800620e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b02      	cmp	r3, #2
 8006182:	d12b      	bne.n	80061dc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006188:	b29b      	uxth	r3, r3
 800618a:	2b01      	cmp	r3, #1
 800618c:	d912      	bls.n	80061b4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006192:	881a      	ldrh	r2, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800619e:	1c9a      	adds	r2, r3, #2
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	3b02      	subs	r3, #2
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80061b2:	e02c      	b.n	800620e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	330c      	adds	r3, #12
 80061be:	7812      	ldrb	r2, [r2, #0]
 80061c0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c6:	1c5a      	adds	r2, r3, #1
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	3b01      	subs	r3, #1
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80061da:	e018      	b.n	800620e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061dc:	f7fd f9f0 	bl	80035c0 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d803      	bhi.n	80061f4 <HAL_SPI_Transmit+0x26e>
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f2:	d102      	bne.n	80061fa <HAL_SPI_Transmit+0x274>
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d109      	bne.n	800620e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e02d      	b.n	800626a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006212:	b29b      	uxth	r3, r3
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1ae      	bne.n	8006176 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006218:	69fa      	ldr	r2, [r7, #28]
 800621a:	6839      	ldr	r1, [r7, #0]
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 fac1 	bl	80067a4 <SPI_EndRxTxTransaction>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d002      	beq.n	800622e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2220      	movs	r2, #32
 800622c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10a      	bne.n	800624c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006236:	2300      	movs	r3, #0
 8006238:	617b      	str	r3, [r7, #20]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	617b      	str	r3, [r7, #20]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	617b      	str	r3, [r7, #20]
 800624a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006260:	2b00      	cmp	r3, #0
 8006262:	d001      	beq.n	8006268 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e000      	b.n	800626a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006268:	2300      	movs	r3, #0
  }
}
 800626a:	4618      	mov	r0, r3
 800626c:	3720      	adds	r7, #32
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
	...

08006274 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	4613      	mov	r3, r2
 8006280:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b01      	cmp	r3, #1
 800628c:	d001      	beq.n	8006292 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800628e:	2302      	movs	r3, #2
 8006290:	e0d4      	b.n	800643c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d002      	beq.n	800629e <HAL_SPI_Transmit_DMA+0x2a>
 8006298:	88fb      	ldrh	r3, [r7, #6]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e0cc      	b.n	800643c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d101      	bne.n	80062b0 <HAL_SPI_Transmit_DMA+0x3c>
 80062ac:	2302      	movs	r3, #2
 80062ae:	e0c5      	b.n	800643c <HAL_SPI_Transmit_DMA+0x1c8>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2203      	movs	r2, #3
 80062bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	88fa      	ldrh	r2, [r7, #6]
 80062d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	88fa      	ldrh	r2, [r7, #6]
 80062d6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006302:	d10f      	bne.n	8006324 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006312:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006322:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006328:	4a46      	ldr	r2, [pc, #280]	@ (8006444 <HAL_SPI_Transmit_DMA+0x1d0>)
 800632a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006330:	4a45      	ldr	r2, [pc, #276]	@ (8006448 <HAL_SPI_Transmit_DMA+0x1d4>)
 8006332:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006338:	4a44      	ldr	r2, [pc, #272]	@ (800644c <HAL_SPI_Transmit_DMA+0x1d8>)
 800633a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006340:	2200      	movs	r2, #0
 8006342:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006352:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800635c:	d82d      	bhi.n	80063ba <HAL_SPI_Transmit_DMA+0x146>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006368:	d127      	bne.n	80063ba <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800636e:	b29b      	uxth	r3, r3
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10f      	bne.n	8006398 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006386:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800638c:	b29b      	uxth	r3, r3
 800638e:	085b      	lsrs	r3, r3, #1
 8006390:	b29a      	uxth	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006396:	e010      	b.n	80063ba <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063a6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	085b      	lsrs	r3, r3, #1
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	3301      	adds	r3, #1
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c2:	4619      	mov	r1, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	330c      	adds	r3, #12
 80063ca:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063d0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80063d2:	f7fd fd1d 	bl	8003e10 <HAL_DMA_Start_IT>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00b      	beq.n	80063f4 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063e0:	f043 0210 	orr.w	r2, r3, #16
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e023      	b.n	800643c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063fe:	2b40      	cmp	r3, #64	@ 0x40
 8006400:	d007      	beq.n	8006412 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006410:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f042 0220 	orr.w	r2, r2, #32
 8006428:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f042 0202 	orr.w	r2, r2, #2
 8006438:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	0800650b 	.word	0x0800650b
 8006448:	08006465 	.word	0x08006465
 800644c:	08006527 	.word	0x08006527

08006450 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006470:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006472:	f7fd f8a5 	bl	80035c0 <HAL_GetTick>
 8006476:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0320 	and.w	r3, r3, #32
 8006482:	2b20      	cmp	r3, #32
 8006484:	d03b      	beq.n	80064fe <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f022 0220 	bic.w	r2, r2, #32
 8006494:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 0202 	bic.w	r2, r2, #2
 80064a4:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	2164      	movs	r1, #100	@ 0x64
 80064aa:	6978      	ldr	r0, [r7, #20]
 80064ac:	f000 f97a 	bl	80067a4 <SPI_EndRxTxTransaction>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d005      	beq.n	80064c2 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064ba:	f043 0220 	orr.w	r2, r3, #32
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10a      	bne.n	80064e0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064ca:	2300      	movs	r3, #0
 80064cc:	60fb      	str	r3, [r7, #12]
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	60fb      	str	r3, [r7, #12]
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	60fb      	str	r3, [r7, #12]
 80064de:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	2200      	movs	r2, #0
 80064e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d003      	beq.n	80064fe <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80064f6:	6978      	ldr	r0, [r7, #20]
 80064f8:	f7fb fc5a 	bl	8001db0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80064fc:	e002      	b.n	8006504 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80064fe:	6978      	ldr	r0, [r7, #20]
 8006500:	f7fb fc8c 	bl	8001e1c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006504:	3718      	adds	r7, #24
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b084      	sub	sp, #16
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006516:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f7ff ff99 	bl	8006450 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800651e:	bf00      	nop
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b084      	sub	sp, #16
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006532:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f022 0203 	bic.w	r2, r2, #3
 8006542:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006548:	f043 0210 	orr.w	r2, r3, #16
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f7fb fc29 	bl	8001db0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800655e:	bf00      	nop
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
	...

08006568 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b088      	sub	sp, #32
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	603b      	str	r3, [r7, #0]
 8006574:	4613      	mov	r3, r2
 8006576:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006578:	f7fd f822 	bl	80035c0 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006580:	1a9b      	subs	r3, r3, r2
 8006582:	683a      	ldr	r2, [r7, #0]
 8006584:	4413      	add	r3, r2
 8006586:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006588:	f7fd f81a 	bl	80035c0 <HAL_GetTick>
 800658c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800658e:	4b39      	ldr	r3, [pc, #228]	@ (8006674 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	015b      	lsls	r3, r3, #5
 8006594:	0d1b      	lsrs	r3, r3, #20
 8006596:	69fa      	ldr	r2, [r7, #28]
 8006598:	fb02 f303 	mul.w	r3, r2, r3
 800659c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800659e:	e054      	b.n	800664a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a6:	d050      	beq.n	800664a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065a8:	f7fd f80a 	bl	80035c0 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	69fa      	ldr	r2, [r7, #28]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d902      	bls.n	80065be <SPI_WaitFlagStateUntilTimeout+0x56>
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d13d      	bne.n	800663a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80065cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065d6:	d111      	bne.n	80065fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065e0:	d004      	beq.n	80065ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065ea:	d107      	bne.n	80065fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006600:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006604:	d10f      	bne.n	8006626 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006614:	601a      	str	r2, [r3, #0]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006624:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e017      	b.n	800666a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d101      	bne.n	8006644 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	3b01      	subs	r3, #1
 8006648:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689a      	ldr	r2, [r3, #8]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	4013      	ands	r3, r2
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	429a      	cmp	r2, r3
 8006658:	bf0c      	ite	eq
 800665a:	2301      	moveq	r3, #1
 800665c:	2300      	movne	r3, #0
 800665e:	b2db      	uxtb	r3, r3
 8006660:	461a      	mov	r2, r3
 8006662:	79fb      	ldrb	r3, [r7, #7]
 8006664:	429a      	cmp	r2, r3
 8006666:	d19b      	bne.n	80065a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3720      	adds	r7, #32
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	20000030 	.word	0x20000030

08006678 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b08a      	sub	sp, #40	@ 0x28
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
 8006684:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006686:	2300      	movs	r3, #0
 8006688:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800668a:	f7fc ff99 	bl	80035c0 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006692:	1a9b      	subs	r3, r3, r2
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	4413      	add	r3, r2
 8006698:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800669a:	f7fc ff91 	bl	80035c0 <HAL_GetTick>
 800669e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	330c      	adds	r3, #12
 80066a6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80066a8:	4b3d      	ldr	r3, [pc, #244]	@ (80067a0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	4613      	mov	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	00da      	lsls	r2, r3, #3
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	0d1b      	lsrs	r3, r3, #20
 80066b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066ba:	fb02 f303 	mul.w	r3, r2, r3
 80066be:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80066c0:	e060      	b.n	8006784 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80066c8:	d107      	bne.n	80066da <SPI_WaitFifoStateUntilTimeout+0x62>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d104      	bne.n	80066da <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80066d8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e0:	d050      	beq.n	8006784 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066e2:	f7fc ff6d 	bl	80035c0 <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	6a3b      	ldr	r3, [r7, #32]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d902      	bls.n	80066f8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80066f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d13d      	bne.n	8006774 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006706:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006710:	d111      	bne.n	8006736 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800671a:	d004      	beq.n	8006726 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006724:	d107      	bne.n	8006736 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006734:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800673a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800673e:	d10f      	bne.n	8006760 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800674e:	601a      	str	r2, [r3, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800675e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e010      	b.n	8006796 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d101      	bne.n	800677e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800677a:	2300      	movs	r3, #0
 800677c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	3b01      	subs	r3, #1
 8006782:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	689a      	ldr	r2, [r3, #8]
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	4013      	ands	r3, r2
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	429a      	cmp	r2, r3
 8006792:	d196      	bne.n	80066c2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3728      	adds	r7, #40	@ 0x28
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	20000030 	.word	0x20000030

080067a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b086      	sub	sp, #24
 80067a8:	af02      	add	r7, sp, #8
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f7ff ff5b 	bl	8006678 <SPI_WaitFifoStateUntilTimeout>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d007      	beq.n	80067d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067cc:	f043 0220 	orr.w	r2, r3, #32
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e027      	b.n	8006828 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	9300      	str	r3, [sp, #0]
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2200      	movs	r2, #0
 80067e0:	2180      	movs	r1, #128	@ 0x80
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f7ff fec0 	bl	8006568 <SPI_WaitFlagStateUntilTimeout>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d007      	beq.n	80067fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067f2:	f043 0220 	orr.w	r2, r3, #32
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e014      	b.n	8006828 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	2200      	movs	r2, #0
 8006806:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f7ff ff34 	bl	8006678 <SPI_WaitFifoStateUntilTimeout>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d007      	beq.n	8006826 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800681a:	f043 0220 	orr.w	r2, r3, #32
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e000      	b.n	8006828 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e049      	b.n	80068d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d106      	bne.n	800685c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7fc fd32 	bl	80032c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2202      	movs	r2, #2
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	3304      	adds	r3, #4
 800686c:	4619      	mov	r1, r3
 800686e:	4610      	mov	r0, r2
 8006870:	f000 fa50 	bl	8006d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3708      	adds	r7, #8
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
	...

080068e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d109      	bne.n	8006904 <HAL_TIM_PWM_Start+0x24>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	bf14      	ite	ne
 80068fc:	2301      	movne	r3, #1
 80068fe:	2300      	moveq	r3, #0
 8006900:	b2db      	uxtb	r3, r3
 8006902:	e03c      	b.n	800697e <HAL_TIM_PWM_Start+0x9e>
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	2b04      	cmp	r3, #4
 8006908:	d109      	bne.n	800691e <HAL_TIM_PWM_Start+0x3e>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b01      	cmp	r3, #1
 8006914:	bf14      	ite	ne
 8006916:	2301      	movne	r3, #1
 8006918:	2300      	moveq	r3, #0
 800691a:	b2db      	uxtb	r3, r3
 800691c:	e02f      	b.n	800697e <HAL_TIM_PWM_Start+0x9e>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	2b08      	cmp	r3, #8
 8006922:	d109      	bne.n	8006938 <HAL_TIM_PWM_Start+0x58>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b01      	cmp	r3, #1
 800692e:	bf14      	ite	ne
 8006930:	2301      	movne	r3, #1
 8006932:	2300      	moveq	r3, #0
 8006934:	b2db      	uxtb	r3, r3
 8006936:	e022      	b.n	800697e <HAL_TIM_PWM_Start+0x9e>
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	2b0c      	cmp	r3, #12
 800693c:	d109      	bne.n	8006952 <HAL_TIM_PWM_Start+0x72>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b01      	cmp	r3, #1
 8006948:	bf14      	ite	ne
 800694a:	2301      	movne	r3, #1
 800694c:	2300      	moveq	r3, #0
 800694e:	b2db      	uxtb	r3, r3
 8006950:	e015      	b.n	800697e <HAL_TIM_PWM_Start+0x9e>
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	2b10      	cmp	r3, #16
 8006956:	d109      	bne.n	800696c <HAL_TIM_PWM_Start+0x8c>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b01      	cmp	r3, #1
 8006962:	bf14      	ite	ne
 8006964:	2301      	movne	r3, #1
 8006966:	2300      	moveq	r3, #0
 8006968:	b2db      	uxtb	r3, r3
 800696a:	e008      	b.n	800697e <HAL_TIM_PWM_Start+0x9e>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006972:	b2db      	uxtb	r3, r3
 8006974:	2b01      	cmp	r3, #1
 8006976:	bf14      	ite	ne
 8006978:	2301      	movne	r3, #1
 800697a:	2300      	moveq	r3, #0
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e09c      	b.n	8006ac0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d104      	bne.n	8006996 <HAL_TIM_PWM_Start+0xb6>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2202      	movs	r2, #2
 8006990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006994:	e023      	b.n	80069de <HAL_TIM_PWM_Start+0xfe>
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2b04      	cmp	r3, #4
 800699a:	d104      	bne.n	80069a6 <HAL_TIM_PWM_Start+0xc6>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2202      	movs	r2, #2
 80069a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069a4:	e01b      	b.n	80069de <HAL_TIM_PWM_Start+0xfe>
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2b08      	cmp	r3, #8
 80069aa:	d104      	bne.n	80069b6 <HAL_TIM_PWM_Start+0xd6>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2202      	movs	r2, #2
 80069b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069b4:	e013      	b.n	80069de <HAL_TIM_PWM_Start+0xfe>
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b0c      	cmp	r3, #12
 80069ba:	d104      	bne.n	80069c6 <HAL_TIM_PWM_Start+0xe6>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80069c4:	e00b      	b.n	80069de <HAL_TIM_PWM_Start+0xfe>
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2b10      	cmp	r3, #16
 80069ca:	d104      	bne.n	80069d6 <HAL_TIM_PWM_Start+0xf6>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2202      	movs	r2, #2
 80069d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069d4:	e003      	b.n	80069de <HAL_TIM_PWM_Start+0xfe>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2202      	movs	r2, #2
 80069da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2201      	movs	r2, #1
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 fd10 	bl	800740c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a35      	ldr	r2, [pc, #212]	@ (8006ac8 <HAL_TIM_PWM_Start+0x1e8>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d013      	beq.n	8006a1e <HAL_TIM_PWM_Start+0x13e>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a34      	ldr	r2, [pc, #208]	@ (8006acc <HAL_TIM_PWM_Start+0x1ec>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d00e      	beq.n	8006a1e <HAL_TIM_PWM_Start+0x13e>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a32      	ldr	r2, [pc, #200]	@ (8006ad0 <HAL_TIM_PWM_Start+0x1f0>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d009      	beq.n	8006a1e <HAL_TIM_PWM_Start+0x13e>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a31      	ldr	r2, [pc, #196]	@ (8006ad4 <HAL_TIM_PWM_Start+0x1f4>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d004      	beq.n	8006a1e <HAL_TIM_PWM_Start+0x13e>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a2f      	ldr	r2, [pc, #188]	@ (8006ad8 <HAL_TIM_PWM_Start+0x1f8>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d101      	bne.n	8006a22 <HAL_TIM_PWM_Start+0x142>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e000      	b.n	8006a24 <HAL_TIM_PWM_Start+0x144>
 8006a22:	2300      	movs	r3, #0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d007      	beq.n	8006a38 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a36:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a22      	ldr	r2, [pc, #136]	@ (8006ac8 <HAL_TIM_PWM_Start+0x1e8>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d01d      	beq.n	8006a7e <HAL_TIM_PWM_Start+0x19e>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a4a:	d018      	beq.n	8006a7e <HAL_TIM_PWM_Start+0x19e>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a22      	ldr	r2, [pc, #136]	@ (8006adc <HAL_TIM_PWM_Start+0x1fc>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d013      	beq.n	8006a7e <HAL_TIM_PWM_Start+0x19e>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a21      	ldr	r2, [pc, #132]	@ (8006ae0 <HAL_TIM_PWM_Start+0x200>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d00e      	beq.n	8006a7e <HAL_TIM_PWM_Start+0x19e>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a1f      	ldr	r2, [pc, #124]	@ (8006ae4 <HAL_TIM_PWM_Start+0x204>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d009      	beq.n	8006a7e <HAL_TIM_PWM_Start+0x19e>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a17      	ldr	r2, [pc, #92]	@ (8006acc <HAL_TIM_PWM_Start+0x1ec>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d004      	beq.n	8006a7e <HAL_TIM_PWM_Start+0x19e>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a15      	ldr	r2, [pc, #84]	@ (8006ad0 <HAL_TIM_PWM_Start+0x1f0>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d115      	bne.n	8006aaa <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	4b18      	ldr	r3, [pc, #96]	@ (8006ae8 <HAL_TIM_PWM_Start+0x208>)
 8006a86:	4013      	ands	r3, r2
 8006a88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2b06      	cmp	r3, #6
 8006a8e:	d015      	beq.n	8006abc <HAL_TIM_PWM_Start+0x1dc>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a96:	d011      	beq.n	8006abc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f042 0201 	orr.w	r2, r2, #1
 8006aa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aa8:	e008      	b.n	8006abc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f042 0201 	orr.w	r2, r2, #1
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	e000      	b.n	8006abe <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006abc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	40012c00 	.word	0x40012c00
 8006acc:	40013400 	.word	0x40013400
 8006ad0:	40014000 	.word	0x40014000
 8006ad4:	40014400 	.word	0x40014400
 8006ad8:	40014800 	.word	0x40014800
 8006adc:	40000400 	.word	0x40000400
 8006ae0:	40000800 	.word	0x40000800
 8006ae4:	40000c00 	.word	0x40000c00
 8006ae8:	00010007 	.word	0x00010007

08006aec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006af8:	2300      	movs	r3, #0
 8006afa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d101      	bne.n	8006b0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b06:	2302      	movs	r3, #2
 8006b08:	e0ff      	b.n	8006d0a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b14      	cmp	r3, #20
 8006b16:	f200 80f0 	bhi.w	8006cfa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b20:	08006b75 	.word	0x08006b75
 8006b24:	08006cfb 	.word	0x08006cfb
 8006b28:	08006cfb 	.word	0x08006cfb
 8006b2c:	08006cfb 	.word	0x08006cfb
 8006b30:	08006bb5 	.word	0x08006bb5
 8006b34:	08006cfb 	.word	0x08006cfb
 8006b38:	08006cfb 	.word	0x08006cfb
 8006b3c:	08006cfb 	.word	0x08006cfb
 8006b40:	08006bf7 	.word	0x08006bf7
 8006b44:	08006cfb 	.word	0x08006cfb
 8006b48:	08006cfb 	.word	0x08006cfb
 8006b4c:	08006cfb 	.word	0x08006cfb
 8006b50:	08006c37 	.word	0x08006c37
 8006b54:	08006cfb 	.word	0x08006cfb
 8006b58:	08006cfb 	.word	0x08006cfb
 8006b5c:	08006cfb 	.word	0x08006cfb
 8006b60:	08006c79 	.word	0x08006c79
 8006b64:	08006cfb 	.word	0x08006cfb
 8006b68:	08006cfb 	.word	0x08006cfb
 8006b6c:	08006cfb 	.word	0x08006cfb
 8006b70:	08006cb9 	.word	0x08006cb9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68b9      	ldr	r1, [r7, #8]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 f970 	bl	8006e60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	699a      	ldr	r2, [r3, #24]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f042 0208 	orr.w	r2, r2, #8
 8006b8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	699a      	ldr	r2, [r3, #24]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f022 0204 	bic.w	r2, r2, #4
 8006b9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6999      	ldr	r1, [r3, #24]
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	691a      	ldr	r2, [r3, #16]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	619a      	str	r2, [r3, #24]
      break;
 8006bb2:	e0a5      	b.n	8006d00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68b9      	ldr	r1, [r7, #8]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 f9e0 	bl	8006f80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	699a      	ldr	r2, [r3, #24]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	699a      	ldr	r2, [r3, #24]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6999      	ldr	r1, [r3, #24]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	021a      	lsls	r2, r3, #8
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	619a      	str	r2, [r3, #24]
      break;
 8006bf4:	e084      	b.n	8006d00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68b9      	ldr	r1, [r7, #8]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f000 fa49 	bl	8007094 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	69da      	ldr	r2, [r3, #28]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f042 0208 	orr.w	r2, r2, #8
 8006c10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	69da      	ldr	r2, [r3, #28]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f022 0204 	bic.w	r2, r2, #4
 8006c20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	69d9      	ldr	r1, [r3, #28]
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	691a      	ldr	r2, [r3, #16]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	61da      	str	r2, [r3, #28]
      break;
 8006c34:	e064      	b.n	8006d00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68b9      	ldr	r1, [r7, #8]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 fab1 	bl	80071a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69da      	ldr	r2, [r3, #28]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	69da      	ldr	r2, [r3, #28]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	69d9      	ldr	r1, [r3, #28]
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	021a      	lsls	r2, r3, #8
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	61da      	str	r2, [r3, #28]
      break;
 8006c76:	e043      	b.n	8006d00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68b9      	ldr	r1, [r7, #8]
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 fafa 	bl	8007278 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f042 0208 	orr.w	r2, r2, #8
 8006c92:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f022 0204 	bic.w	r2, r2, #4
 8006ca2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	691a      	ldr	r2, [r3, #16]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006cb6:	e023      	b.n	8006d00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68b9      	ldr	r1, [r7, #8]
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 fb3e 	bl	8007340 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cd2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ce2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	021a      	lsls	r2, r3, #8
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006cf8:	e002      	b.n	8006d00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	75fb      	strb	r3, [r7, #23]
      break;
 8006cfe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3718      	adds	r7, #24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop

08006d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a46      	ldr	r2, [pc, #280]	@ (8006e40 <TIM_Base_SetConfig+0x12c>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d013      	beq.n	8006d54 <TIM_Base_SetConfig+0x40>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d32:	d00f      	beq.n	8006d54 <TIM_Base_SetConfig+0x40>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a43      	ldr	r2, [pc, #268]	@ (8006e44 <TIM_Base_SetConfig+0x130>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d00b      	beq.n	8006d54 <TIM_Base_SetConfig+0x40>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a42      	ldr	r2, [pc, #264]	@ (8006e48 <TIM_Base_SetConfig+0x134>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d007      	beq.n	8006d54 <TIM_Base_SetConfig+0x40>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a41      	ldr	r2, [pc, #260]	@ (8006e4c <TIM_Base_SetConfig+0x138>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d003      	beq.n	8006d54 <TIM_Base_SetConfig+0x40>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a40      	ldr	r2, [pc, #256]	@ (8006e50 <TIM_Base_SetConfig+0x13c>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d108      	bne.n	8006d66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a35      	ldr	r2, [pc, #212]	@ (8006e40 <TIM_Base_SetConfig+0x12c>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d01f      	beq.n	8006dae <TIM_Base_SetConfig+0x9a>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d74:	d01b      	beq.n	8006dae <TIM_Base_SetConfig+0x9a>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a32      	ldr	r2, [pc, #200]	@ (8006e44 <TIM_Base_SetConfig+0x130>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d017      	beq.n	8006dae <TIM_Base_SetConfig+0x9a>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a31      	ldr	r2, [pc, #196]	@ (8006e48 <TIM_Base_SetConfig+0x134>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d013      	beq.n	8006dae <TIM_Base_SetConfig+0x9a>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a30      	ldr	r2, [pc, #192]	@ (8006e4c <TIM_Base_SetConfig+0x138>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d00f      	beq.n	8006dae <TIM_Base_SetConfig+0x9a>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a2f      	ldr	r2, [pc, #188]	@ (8006e50 <TIM_Base_SetConfig+0x13c>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d00b      	beq.n	8006dae <TIM_Base_SetConfig+0x9a>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a2e      	ldr	r2, [pc, #184]	@ (8006e54 <TIM_Base_SetConfig+0x140>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d007      	beq.n	8006dae <TIM_Base_SetConfig+0x9a>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a2d      	ldr	r2, [pc, #180]	@ (8006e58 <TIM_Base_SetConfig+0x144>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d003      	beq.n	8006dae <TIM_Base_SetConfig+0x9a>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a2c      	ldr	r2, [pc, #176]	@ (8006e5c <TIM_Base_SetConfig+0x148>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d108      	bne.n	8006dc0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	689a      	ldr	r2, [r3, #8]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a16      	ldr	r2, [pc, #88]	@ (8006e40 <TIM_Base_SetConfig+0x12c>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d00f      	beq.n	8006e0c <TIM_Base_SetConfig+0xf8>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a18      	ldr	r2, [pc, #96]	@ (8006e50 <TIM_Base_SetConfig+0x13c>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d00b      	beq.n	8006e0c <TIM_Base_SetConfig+0xf8>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a17      	ldr	r2, [pc, #92]	@ (8006e54 <TIM_Base_SetConfig+0x140>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d007      	beq.n	8006e0c <TIM_Base_SetConfig+0xf8>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a16      	ldr	r2, [pc, #88]	@ (8006e58 <TIM_Base_SetConfig+0x144>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d003      	beq.n	8006e0c <TIM_Base_SetConfig+0xf8>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a15      	ldr	r2, [pc, #84]	@ (8006e5c <TIM_Base_SetConfig+0x148>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d103      	bne.n	8006e14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	691a      	ldr	r2, [r3, #16]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d105      	bne.n	8006e32 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	f023 0201 	bic.w	r2, r3, #1
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	611a      	str	r2, [r3, #16]
  }
}
 8006e32:	bf00      	nop
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	40012c00 	.word	0x40012c00
 8006e44:	40000400 	.word	0x40000400
 8006e48:	40000800 	.word	0x40000800
 8006e4c:	40000c00 	.word	0x40000c00
 8006e50:	40013400 	.word	0x40013400
 8006e54:	40014000 	.word	0x40014000
 8006e58:	40014400 	.word	0x40014400
 8006e5c:	40014800 	.word	0x40014800

08006e60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a1b      	ldr	r3, [r3, #32]
 8006e74:	f023 0201 	bic.w	r2, r3, #1
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f023 0303 	bic.w	r3, r3, #3
 8006e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f023 0302 	bic.w	r3, r3, #2
 8006eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a2c      	ldr	r2, [pc, #176]	@ (8006f6c <TIM_OC1_SetConfig+0x10c>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d00f      	beq.n	8006ee0 <TIM_OC1_SetConfig+0x80>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a2b      	ldr	r2, [pc, #172]	@ (8006f70 <TIM_OC1_SetConfig+0x110>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d00b      	beq.n	8006ee0 <TIM_OC1_SetConfig+0x80>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a2a      	ldr	r2, [pc, #168]	@ (8006f74 <TIM_OC1_SetConfig+0x114>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d007      	beq.n	8006ee0 <TIM_OC1_SetConfig+0x80>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a29      	ldr	r2, [pc, #164]	@ (8006f78 <TIM_OC1_SetConfig+0x118>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d003      	beq.n	8006ee0 <TIM_OC1_SetConfig+0x80>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a28      	ldr	r2, [pc, #160]	@ (8006f7c <TIM_OC1_SetConfig+0x11c>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d10c      	bne.n	8006efa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	f023 0308 	bic.w	r3, r3, #8
 8006ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f023 0304 	bic.w	r3, r3, #4
 8006ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a1b      	ldr	r2, [pc, #108]	@ (8006f6c <TIM_OC1_SetConfig+0x10c>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d00f      	beq.n	8006f22 <TIM_OC1_SetConfig+0xc2>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a1a      	ldr	r2, [pc, #104]	@ (8006f70 <TIM_OC1_SetConfig+0x110>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d00b      	beq.n	8006f22 <TIM_OC1_SetConfig+0xc2>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a19      	ldr	r2, [pc, #100]	@ (8006f74 <TIM_OC1_SetConfig+0x114>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d007      	beq.n	8006f22 <TIM_OC1_SetConfig+0xc2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a18      	ldr	r2, [pc, #96]	@ (8006f78 <TIM_OC1_SetConfig+0x118>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d003      	beq.n	8006f22 <TIM_OC1_SetConfig+0xc2>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a17      	ldr	r2, [pc, #92]	@ (8006f7c <TIM_OC1_SetConfig+0x11c>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d111      	bne.n	8006f46 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	621a      	str	r2, [r3, #32]
}
 8006f60:	bf00      	nop
 8006f62:	371c      	adds	r7, #28
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	40012c00 	.word	0x40012c00
 8006f70:	40013400 	.word	0x40013400
 8006f74:	40014000 	.word	0x40014000
 8006f78:	40014400 	.word	0x40014400
 8006f7c:	40014800 	.word	0x40014800

08006f80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b087      	sub	sp, #28
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a1b      	ldr	r3, [r3, #32]
 8006f94:	f023 0210 	bic.w	r2, r3, #16
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006fae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	021b      	lsls	r3, r3, #8
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	f023 0320 	bic.w	r3, r3, #32
 8006fce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	011b      	lsls	r3, r3, #4
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a28      	ldr	r2, [pc, #160]	@ (8007080 <TIM_OC2_SetConfig+0x100>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d003      	beq.n	8006fec <TIM_OC2_SetConfig+0x6c>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a27      	ldr	r2, [pc, #156]	@ (8007084 <TIM_OC2_SetConfig+0x104>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d10d      	bne.n	8007008 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	011b      	lsls	r3, r3, #4
 8006ffa:	697a      	ldr	r2, [r7, #20]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007006:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a1d      	ldr	r2, [pc, #116]	@ (8007080 <TIM_OC2_SetConfig+0x100>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d00f      	beq.n	8007030 <TIM_OC2_SetConfig+0xb0>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a1c      	ldr	r2, [pc, #112]	@ (8007084 <TIM_OC2_SetConfig+0x104>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d00b      	beq.n	8007030 <TIM_OC2_SetConfig+0xb0>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a1b      	ldr	r2, [pc, #108]	@ (8007088 <TIM_OC2_SetConfig+0x108>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d007      	beq.n	8007030 <TIM_OC2_SetConfig+0xb0>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a1a      	ldr	r2, [pc, #104]	@ (800708c <TIM_OC2_SetConfig+0x10c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d003      	beq.n	8007030 <TIM_OC2_SetConfig+0xb0>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a19      	ldr	r2, [pc, #100]	@ (8007090 <TIM_OC2_SetConfig+0x110>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d113      	bne.n	8007058 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007036:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800703e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	4313      	orrs	r3, r2
 800704a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	4313      	orrs	r3, r2
 8007056:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	621a      	str	r2, [r3, #32]
}
 8007072:	bf00      	nop
 8007074:	371c      	adds	r7, #28
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	40012c00 	.word	0x40012c00
 8007084:	40013400 	.word	0x40013400
 8007088:	40014000 	.word	0x40014000
 800708c:	40014400 	.word	0x40014400
 8007090:	40014800 	.word	0x40014800

08007094 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007094:	b480      	push	{r7}
 8007096:	b087      	sub	sp, #28
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a1b      	ldr	r3, [r3, #32]
 80070a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	69db      	ldr	r3, [r3, #28]
 80070ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 0303 	bic.w	r3, r3, #3
 80070ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80070e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	021b      	lsls	r3, r3, #8
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a27      	ldr	r2, [pc, #156]	@ (8007190 <TIM_OC3_SetConfig+0xfc>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d003      	beq.n	80070fe <TIM_OC3_SetConfig+0x6a>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a26      	ldr	r2, [pc, #152]	@ (8007194 <TIM_OC3_SetConfig+0x100>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d10d      	bne.n	800711a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007104:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	021b      	lsls	r3, r3, #8
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	4313      	orrs	r3, r2
 8007110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a1c      	ldr	r2, [pc, #112]	@ (8007190 <TIM_OC3_SetConfig+0xfc>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d00f      	beq.n	8007142 <TIM_OC3_SetConfig+0xae>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a1b      	ldr	r2, [pc, #108]	@ (8007194 <TIM_OC3_SetConfig+0x100>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d00b      	beq.n	8007142 <TIM_OC3_SetConfig+0xae>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a1a      	ldr	r2, [pc, #104]	@ (8007198 <TIM_OC3_SetConfig+0x104>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d007      	beq.n	8007142 <TIM_OC3_SetConfig+0xae>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a19      	ldr	r2, [pc, #100]	@ (800719c <TIM_OC3_SetConfig+0x108>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d003      	beq.n	8007142 <TIM_OC3_SetConfig+0xae>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a18      	ldr	r2, [pc, #96]	@ (80071a0 <TIM_OC3_SetConfig+0x10c>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d113      	bne.n	800716a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	011b      	lsls	r3, r3, #4
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	4313      	orrs	r3, r2
 800715c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	011b      	lsls	r3, r3, #4
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	4313      	orrs	r3, r2
 8007168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	697a      	ldr	r2, [r7, #20]
 8007182:	621a      	str	r2, [r3, #32]
}
 8007184:	bf00      	nop
 8007186:	371c      	adds	r7, #28
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr
 8007190:	40012c00 	.word	0x40012c00
 8007194:	40013400 	.word	0x40013400
 8007198:	40014000 	.word	0x40014000
 800719c:	40014400 	.word	0x40014400
 80071a0:	40014800 	.word	0x40014800

080071a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b087      	sub	sp, #28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a1b      	ldr	r3, [r3, #32]
 80071b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	69db      	ldr	r3, [r3, #28]
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80071d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	021b      	lsls	r3, r3, #8
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80071f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	031b      	lsls	r3, r3, #12
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a18      	ldr	r2, [pc, #96]	@ (8007264 <TIM_OC4_SetConfig+0xc0>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d00f      	beq.n	8007228 <TIM_OC4_SetConfig+0x84>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a17      	ldr	r2, [pc, #92]	@ (8007268 <TIM_OC4_SetConfig+0xc4>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d00b      	beq.n	8007228 <TIM_OC4_SetConfig+0x84>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a16      	ldr	r2, [pc, #88]	@ (800726c <TIM_OC4_SetConfig+0xc8>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d007      	beq.n	8007228 <TIM_OC4_SetConfig+0x84>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a15      	ldr	r2, [pc, #84]	@ (8007270 <TIM_OC4_SetConfig+0xcc>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d003      	beq.n	8007228 <TIM_OC4_SetConfig+0x84>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a14      	ldr	r2, [pc, #80]	@ (8007274 <TIM_OC4_SetConfig+0xd0>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d109      	bne.n	800723c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800722e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	019b      	lsls	r3, r3, #6
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	4313      	orrs	r3, r2
 800723a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	685a      	ldr	r2, [r3, #4]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	621a      	str	r2, [r3, #32]
}
 8007256:	bf00      	nop
 8007258:	371c      	adds	r7, #28
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	40012c00 	.word	0x40012c00
 8007268:	40013400 	.word	0x40013400
 800726c:	40014000 	.word	0x40014000
 8007270:	40014400 	.word	0x40014400
 8007274:	40014800 	.word	0x40014800

08007278 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007278:	b480      	push	{r7}
 800727a:	b087      	sub	sp, #28
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a1b      	ldr	r3, [r3, #32]
 800728c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800729e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80072bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	041b      	lsls	r3, r3, #16
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a17      	ldr	r2, [pc, #92]	@ (800732c <TIM_OC5_SetConfig+0xb4>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d00f      	beq.n	80072f2 <TIM_OC5_SetConfig+0x7a>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a16      	ldr	r2, [pc, #88]	@ (8007330 <TIM_OC5_SetConfig+0xb8>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d00b      	beq.n	80072f2 <TIM_OC5_SetConfig+0x7a>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a15      	ldr	r2, [pc, #84]	@ (8007334 <TIM_OC5_SetConfig+0xbc>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d007      	beq.n	80072f2 <TIM_OC5_SetConfig+0x7a>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a14      	ldr	r2, [pc, #80]	@ (8007338 <TIM_OC5_SetConfig+0xc0>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d003      	beq.n	80072f2 <TIM_OC5_SetConfig+0x7a>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a13      	ldr	r2, [pc, #76]	@ (800733c <TIM_OC5_SetConfig+0xc4>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d109      	bne.n	8007306 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	021b      	lsls	r3, r3, #8
 8007300:	697a      	ldr	r2, [r7, #20]
 8007302:	4313      	orrs	r3, r2
 8007304:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	685a      	ldr	r2, [r3, #4]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	693a      	ldr	r2, [r7, #16]
 800731e:	621a      	str	r2, [r3, #32]
}
 8007320:	bf00      	nop
 8007322:	371c      	adds	r7, #28
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	40012c00 	.word	0x40012c00
 8007330:	40013400 	.word	0x40013400
 8007334:	40014000 	.word	0x40014000
 8007338:	40014400 	.word	0x40014400
 800733c:	40014800 	.word	0x40014800

08007340 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007340:	b480      	push	{r7}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a1b      	ldr	r3, [r3, #32]
 8007354:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800736e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	021b      	lsls	r3, r3, #8
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	4313      	orrs	r3, r2
 800737e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007386:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	051b      	lsls	r3, r3, #20
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	4313      	orrs	r3, r2
 8007392:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a18      	ldr	r2, [pc, #96]	@ (80073f8 <TIM_OC6_SetConfig+0xb8>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d00f      	beq.n	80073bc <TIM_OC6_SetConfig+0x7c>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a17      	ldr	r2, [pc, #92]	@ (80073fc <TIM_OC6_SetConfig+0xbc>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d00b      	beq.n	80073bc <TIM_OC6_SetConfig+0x7c>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a16      	ldr	r2, [pc, #88]	@ (8007400 <TIM_OC6_SetConfig+0xc0>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d007      	beq.n	80073bc <TIM_OC6_SetConfig+0x7c>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a15      	ldr	r2, [pc, #84]	@ (8007404 <TIM_OC6_SetConfig+0xc4>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d003      	beq.n	80073bc <TIM_OC6_SetConfig+0x7c>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a14      	ldr	r2, [pc, #80]	@ (8007408 <TIM_OC6_SetConfig+0xc8>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d109      	bne.n	80073d0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80073c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	029b      	lsls	r3, r3, #10
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	685a      	ldr	r2, [r3, #4]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	693a      	ldr	r2, [r7, #16]
 80073e8:	621a      	str	r2, [r3, #32]
}
 80073ea:	bf00      	nop
 80073ec:	371c      	adds	r7, #28
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	40012c00 	.word	0x40012c00
 80073fc:	40013400 	.word	0x40013400
 8007400:	40014000 	.word	0x40014000
 8007404:	40014400 	.word	0x40014400
 8007408:	40014800 	.word	0x40014800

0800740c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800740c:	b480      	push	{r7}
 800740e:	b087      	sub	sp, #28
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f003 031f 	and.w	r3, r3, #31
 800741e:	2201      	movs	r2, #1
 8007420:	fa02 f303 	lsl.w	r3, r2, r3
 8007424:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6a1a      	ldr	r2, [r3, #32]
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	43db      	mvns	r3, r3
 800742e:	401a      	ands	r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6a1a      	ldr	r2, [r3, #32]
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	f003 031f 	and.w	r3, r3, #31
 800743e:	6879      	ldr	r1, [r7, #4]
 8007440:	fa01 f303 	lsl.w	r3, r1, r3
 8007444:	431a      	orrs	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	621a      	str	r2, [r3, #32]
}
 800744a:	bf00      	nop
 800744c:	371c      	adds	r7, #28
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
	...

08007458 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007468:	2b01      	cmp	r3, #1
 800746a:	d101      	bne.n	8007470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800746c:	2302      	movs	r3, #2
 800746e:	e068      	b.n	8007542 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2202      	movs	r2, #2
 800747c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a2e      	ldr	r2, [pc, #184]	@ (8007550 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d004      	beq.n	80074a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a2d      	ldr	r2, [pc, #180]	@ (8007554 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d108      	bne.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80074aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a1e      	ldr	r2, [pc, #120]	@ (8007550 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d01d      	beq.n	8007516 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074e2:	d018      	beq.n	8007516 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a1b      	ldr	r2, [pc, #108]	@ (8007558 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d013      	beq.n	8007516 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a1a      	ldr	r2, [pc, #104]	@ (800755c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d00e      	beq.n	8007516 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a18      	ldr	r2, [pc, #96]	@ (8007560 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d009      	beq.n	8007516 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a13      	ldr	r2, [pc, #76]	@ (8007554 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d004      	beq.n	8007516 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a14      	ldr	r2, [pc, #80]	@ (8007564 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d10c      	bne.n	8007530 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800751c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	4313      	orrs	r3, r2
 8007526:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3714      	adds	r7, #20
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	40012c00 	.word	0x40012c00
 8007554:	40013400 	.word	0x40013400
 8007558:	40000400 	.word	0x40000400
 800755c:	40000800 	.word	0x40000800
 8007560:	40000c00 	.word	0x40000c00
 8007564:	40014000 	.word	0x40014000

08007568 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007572:	2300      	movs	r3, #0
 8007574:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800757c:	2b01      	cmp	r3, #1
 800757e:	d101      	bne.n	8007584 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007580:	2302      	movs	r3, #2
 8007582:	e065      	b.n	8007650 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	4313      	orrs	r3, r2
 8007598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	4313      	orrs	r3, r2
 80075de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ea:	4313      	orrs	r3, r2
 80075ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	041b      	lsls	r3, r3, #16
 80075fa:	4313      	orrs	r3, r2
 80075fc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a16      	ldr	r2, [pc, #88]	@ (800765c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d004      	beq.n	8007612 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a14      	ldr	r2, [pc, #80]	@ (8007660 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d115      	bne.n	800763e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800761c:	051b      	lsls	r3, r3, #20
 800761e:	4313      	orrs	r3, r2
 8007620:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	69db      	ldr	r3, [r3, #28]
 800762c:	4313      	orrs	r3, r2
 800762e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	4313      	orrs	r3, r2
 800763c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3714      	adds	r7, #20
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr
 800765c:	40012c00 	.word	0x40012c00
 8007660:	40013400 	.word	0x40013400

08007664 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e040      	b.n	80076f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800767a:	2b00      	cmp	r3, #0
 800767c:	d106      	bne.n	800768c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7fb fcf0 	bl	800306c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2224      	movs	r2, #36	@ 0x24
 8007690:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f022 0201 	bic.w	r2, r2, #1
 80076a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d002      	beq.n	80076b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fe52 	bl	8008354 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 fb97 	bl	8007de4 <UART_SetConfig>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d101      	bne.n	80076c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e01b      	b.n	80076f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	685a      	ldr	r2, [r3, #4]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80076ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	689a      	ldr	r2, [r3, #8]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80076de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f042 0201 	orr.w	r2, r2, #1
 80076ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fed1 	bl	8008498 <UART_CheckIdleState>
 80076f6:	4603      	mov	r3, r0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b08a      	sub	sp, #40	@ 0x28
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	4613      	mov	r3, r2
 800770c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007714:	2b20      	cmp	r3, #32
 8007716:	d137      	bne.n	8007788 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d002      	beq.n	8007724 <HAL_UART_Receive_IT+0x24>
 800771e:	88fb      	ldrh	r3, [r7, #6]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d101      	bne.n	8007728 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	e030      	b.n	800778a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2200      	movs	r2, #0
 800772c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a18      	ldr	r2, [pc, #96]	@ (8007794 <HAL_UART_Receive_IT+0x94>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d01f      	beq.n	8007778 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d018      	beq.n	8007778 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	e853 3f00 	ldrex	r3, [r3]
 8007752:	613b      	str	r3, [r7, #16]
   return(result);
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800775a:	627b      	str	r3, [r7, #36]	@ 0x24
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	461a      	mov	r2, r3
 8007762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007764:	623b      	str	r3, [r7, #32]
 8007766:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007768:	69f9      	ldr	r1, [r7, #28]
 800776a:	6a3a      	ldr	r2, [r7, #32]
 800776c:	e841 2300 	strex	r3, r2, [r1]
 8007770:	61bb      	str	r3, [r7, #24]
   return(result);
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1e6      	bne.n	8007746 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007778:	88fb      	ldrh	r3, [r7, #6]
 800777a:	461a      	mov	r2, r3
 800777c:	68b9      	ldr	r1, [r7, #8]
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f000 ffa0 	bl	80086c4 <UART_Start_Receive_IT>
 8007784:	4603      	mov	r3, r0
 8007786:	e000      	b.n	800778a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007788:	2302      	movs	r3, #2
  }
}
 800778a:	4618      	mov	r0, r3
 800778c:	3728      	adds	r7, #40	@ 0x28
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	40008000 	.word	0x40008000

08007798 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b0ba      	sub	sp, #232	@ 0xe8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	69db      	ldr	r3, [r3, #28]
 80077a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80077be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80077c2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80077c6:	4013      	ands	r3, r2
 80077c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80077cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d115      	bne.n	8007800 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80077d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077d8:	f003 0320 	and.w	r3, r3, #32
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00f      	beq.n	8007800 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80077e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077e4:	f003 0320 	and.w	r3, r3, #32
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d009      	beq.n	8007800 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 82ca 	beq.w	8007d8a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	4798      	blx	r3
      }
      return;
 80077fe:	e2c4      	b.n	8007d8a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007800:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007804:	2b00      	cmp	r3, #0
 8007806:	f000 8117 	beq.w	8007a38 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800780a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800780e:	f003 0301 	and.w	r3, r3, #1
 8007812:	2b00      	cmp	r3, #0
 8007814:	d106      	bne.n	8007824 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007816:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800781a:	4b85      	ldr	r3, [pc, #532]	@ (8007a30 <HAL_UART_IRQHandler+0x298>)
 800781c:	4013      	ands	r3, r2
 800781e:	2b00      	cmp	r3, #0
 8007820:	f000 810a 	beq.w	8007a38 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007828:	f003 0301 	and.w	r3, r3, #1
 800782c:	2b00      	cmp	r3, #0
 800782e:	d011      	beq.n	8007854 <HAL_UART_IRQHandler+0xbc>
 8007830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00b      	beq.n	8007854 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2201      	movs	r2, #1
 8007842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800784a:	f043 0201 	orr.w	r2, r3, #1
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007858:	f003 0302 	and.w	r3, r3, #2
 800785c:	2b00      	cmp	r3, #0
 800785e:	d011      	beq.n	8007884 <HAL_UART_IRQHandler+0xec>
 8007860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007864:	f003 0301 	and.w	r3, r3, #1
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00b      	beq.n	8007884 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2202      	movs	r2, #2
 8007872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800787a:	f043 0204 	orr.w	r2, r3, #4
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007888:	f003 0304 	and.w	r3, r3, #4
 800788c:	2b00      	cmp	r3, #0
 800788e:	d011      	beq.n	80078b4 <HAL_UART_IRQHandler+0x11c>
 8007890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007894:	f003 0301 	and.w	r3, r3, #1
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00b      	beq.n	80078b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2204      	movs	r2, #4
 80078a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078aa:	f043 0202 	orr.w	r2, r3, #2
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80078b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078b8:	f003 0308 	and.w	r3, r3, #8
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d017      	beq.n	80078f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80078c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078c4:	f003 0320 	and.w	r3, r3, #32
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d105      	bne.n	80078d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80078cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00b      	beq.n	80078f0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2208      	movs	r2, #8
 80078de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078e6:	f043 0208 	orr.w	r2, r3, #8
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80078f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d012      	beq.n	8007922 <HAL_UART_IRQHandler+0x18a>
 80078fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007900:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00c      	beq.n	8007922 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007910:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007918:	f043 0220 	orr.w	r2, r3, #32
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007928:	2b00      	cmp	r3, #0
 800792a:	f000 8230 	beq.w	8007d8e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800792e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007932:	f003 0320 	and.w	r3, r3, #32
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00d      	beq.n	8007956 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800793a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800793e:	f003 0320 	and.w	r3, r3, #32
 8007942:	2b00      	cmp	r3, #0
 8007944:	d007      	beq.n	8007956 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800794a:	2b00      	cmp	r3, #0
 800794c:	d003      	beq.n	8007956 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800795c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800796a:	2b40      	cmp	r3, #64	@ 0x40
 800796c:	d005      	beq.n	800797a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800796e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007972:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007976:	2b00      	cmp	r3, #0
 8007978:	d04f      	beq.n	8007a1a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 ff68 	bl	8008850 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800798a:	2b40      	cmp	r3, #64	@ 0x40
 800798c:	d141      	bne.n	8007a12 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	3308      	adds	r3, #8
 8007994:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007998:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800799c:	e853 3f00 	ldrex	r3, [r3]
 80079a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80079a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	3308      	adds	r3, #8
 80079b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80079ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80079be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80079c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80079ca:	e841 2300 	strex	r3, r2, [r1]
 80079ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80079d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1d9      	bne.n	800798e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d013      	beq.n	8007a0a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079e6:	4a13      	ldr	r2, [pc, #76]	@ (8007a34 <HAL_UART_IRQHandler+0x29c>)
 80079e8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7fc faac 	bl	8003f4c <HAL_DMA_Abort_IT>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d017      	beq.n	8007a2a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007a04:	4610      	mov	r0, r2
 8007a06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a08:	e00f      	b.n	8007a2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f9d4 	bl	8007db8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a10:	e00b      	b.n	8007a2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f9d0 	bl	8007db8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a18:	e007      	b.n	8007a2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f9cc 	bl	8007db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007a28:	e1b1      	b.n	8007d8e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a2a:	bf00      	nop
    return;
 8007a2c:	e1af      	b.n	8007d8e <HAL_UART_IRQHandler+0x5f6>
 8007a2e:	bf00      	nop
 8007a30:	04000120 	.word	0x04000120
 8007a34:	08008919 	.word	0x08008919

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	f040 816a 	bne.w	8007d16 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a46:	f003 0310 	and.w	r3, r3, #16
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f000 8163 	beq.w	8007d16 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a54:	f003 0310 	and.w	r3, r3, #16
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f000 815c 	beq.w	8007d16 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2210      	movs	r2, #16
 8007a64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a70:	2b40      	cmp	r3, #64	@ 0x40
 8007a72:	f040 80d4 	bne.w	8007c1e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a82:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f000 80ad 	beq.w	8007be6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007a92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a96:	429a      	cmp	r2, r3
 8007a98:	f080 80a5 	bcs.w	8007be6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007aa2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 0320 	and.w	r3, r3, #32
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f040 8086 	bne.w	8007bc4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ac4:	e853 3f00 	ldrex	r3, [r3]
 8007ac8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007acc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ad4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	461a      	mov	r2, r3
 8007ade:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007ae2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007ae6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007aee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007af2:	e841 2300 	strex	r3, r2, [r1]
 8007af6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1da      	bne.n	8007ab8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3308      	adds	r3, #8
 8007b08:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b0c:	e853 3f00 	ldrex	r3, [r3]
 8007b10:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007b12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b14:	f023 0301 	bic.w	r3, r3, #1
 8007b18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	3308      	adds	r3, #8
 8007b22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007b26:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007b2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007b2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007b32:	e841 2300 	strex	r3, r2, [r1]
 8007b36:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007b38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1e1      	bne.n	8007b02 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	3308      	adds	r3, #8
 8007b44:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b48:	e853 3f00 	ldrex	r3, [r3]
 8007b4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007b4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	3308      	adds	r3, #8
 8007b5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007b62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007b64:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b66:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007b68:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007b6a:	e841 2300 	strex	r3, r2, [r1]
 8007b6e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007b70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1e3      	bne.n	8007b3e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2220      	movs	r2, #32
 8007b7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b8c:	e853 3f00 	ldrex	r3, [r3]
 8007b90:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b94:	f023 0310 	bic.w	r3, r3, #16
 8007b98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ba6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ba8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007baa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007bac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007bae:	e841 2300 	strex	r3, r2, [r1]
 8007bb2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007bb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1e4      	bne.n	8007b84 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fc f986 	bl	8003ed0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	4619      	mov	r1, r3
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f8f4 	bl	8007dcc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007be4:	e0d5      	b.n	8007d92 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007bec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	f040 80ce 	bne.w	8007d92 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 0320 	and.w	r3, r3, #32
 8007c02:	2b20      	cmp	r3, #32
 8007c04:	f040 80c5 	bne.w	8007d92 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007c14:	4619      	mov	r1, r3
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f8d8 	bl	8007dcc <HAL_UARTEx_RxEventCallback>
      return;
 8007c1c:	e0b9      	b.n	8007d92 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	f000 80ab 	beq.w	8007d96 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8007c40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 80a6 	beq.w	8007d96 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c52:	e853 3f00 	ldrex	r3, [r3]
 8007c56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	461a      	mov	r2, r3
 8007c68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c6e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c74:	e841 2300 	strex	r3, r2, [r1]
 8007c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1e4      	bne.n	8007c4a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	3308      	adds	r3, #8
 8007c86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c8a:	e853 3f00 	ldrex	r3, [r3]
 8007c8e:	623b      	str	r3, [r7, #32]
   return(result);
 8007c90:	6a3b      	ldr	r3, [r7, #32]
 8007c92:	f023 0301 	bic.w	r3, r3, #1
 8007c96:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	3308      	adds	r3, #8
 8007ca0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007ca4:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007caa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cac:	e841 2300 	strex	r3, r2, [r1]
 8007cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1e3      	bne.n	8007c80 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2220      	movs	r2, #32
 8007cbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	e853 3f00 	ldrex	r3, [r3]
 8007cd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f023 0310 	bic.w	r3, r3, #16
 8007ce0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	461a      	mov	r2, r3
 8007cea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007cee:	61fb      	str	r3, [r7, #28]
 8007cf0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf2:	69b9      	ldr	r1, [r7, #24]
 8007cf4:	69fa      	ldr	r2, [r7, #28]
 8007cf6:	e841 2300 	strex	r3, r2, [r1]
 8007cfa:	617b      	str	r3, [r7, #20]
   return(result);
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1e4      	bne.n	8007ccc <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2202      	movs	r2, #2
 8007d06:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 f85c 	bl	8007dcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d14:	e03f      	b.n	8007d96 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00e      	beq.n	8007d40 <HAL_UART_IRQHandler+0x5a8>
 8007d22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d008      	beq.n	8007d40 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007d36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 ffe9 	bl	8008d10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d3e:	e02d      	b.n	8007d9c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00e      	beq.n	8007d6a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d008      	beq.n	8007d6a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d01c      	beq.n	8007d9a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	4798      	blx	r3
    }
    return;
 8007d68:	e017      	b.n	8007d9a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d012      	beq.n	8007d9c <HAL_UART_IRQHandler+0x604>
 8007d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00c      	beq.n	8007d9c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fdde 	bl	8008944 <UART_EndTransmit_IT>
    return;
 8007d88:	e008      	b.n	8007d9c <HAL_UART_IRQHandler+0x604>
      return;
 8007d8a:	bf00      	nop
 8007d8c:	e006      	b.n	8007d9c <HAL_UART_IRQHandler+0x604>
    return;
 8007d8e:	bf00      	nop
 8007d90:	e004      	b.n	8007d9c <HAL_UART_IRQHandler+0x604>
      return;
 8007d92:	bf00      	nop
 8007d94:	e002      	b.n	8007d9c <HAL_UART_IRQHandler+0x604>
      return;
 8007d96:	bf00      	nop
 8007d98:	e000      	b.n	8007d9c <HAL_UART_IRQHandler+0x604>
    return;
 8007d9a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007d9c:	37e8      	adds	r7, #232	@ 0xe8
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop

08007da4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007de8:	b08a      	sub	sp, #40	@ 0x28
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007dee:	2300      	movs	r3, #0
 8007df0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	689a      	ldr	r2, [r3, #8]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	431a      	orrs	r2, r3
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	695b      	ldr	r3, [r3, #20]
 8007e02:	431a      	orrs	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	69db      	ldr	r3, [r3, #28]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	4ba4      	ldr	r3, [pc, #656]	@ (80080a4 <UART_SetConfig+0x2c0>)
 8007e14:	4013      	ands	r3, r2
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	6812      	ldr	r2, [r2, #0]
 8007e1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007e1c:	430b      	orrs	r3, r1
 8007e1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	68da      	ldr	r2, [r3, #12]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	430a      	orrs	r2, r1
 8007e34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a99      	ldr	r2, [pc, #612]	@ (80080a8 <UART_SetConfig+0x2c4>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d004      	beq.n	8007e50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6a1b      	ldr	r3, [r3, #32]
 8007e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e60:	430a      	orrs	r2, r1
 8007e62:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a90      	ldr	r2, [pc, #576]	@ (80080ac <UART_SetConfig+0x2c8>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d126      	bne.n	8007ebc <UART_SetConfig+0xd8>
 8007e6e:	4b90      	ldr	r3, [pc, #576]	@ (80080b0 <UART_SetConfig+0x2cc>)
 8007e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e74:	f003 0303 	and.w	r3, r3, #3
 8007e78:	2b03      	cmp	r3, #3
 8007e7a:	d81b      	bhi.n	8007eb4 <UART_SetConfig+0xd0>
 8007e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8007e84 <UART_SetConfig+0xa0>)
 8007e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e82:	bf00      	nop
 8007e84:	08007e95 	.word	0x08007e95
 8007e88:	08007ea5 	.word	0x08007ea5
 8007e8c:	08007e9d 	.word	0x08007e9d
 8007e90:	08007ead 	.word	0x08007ead
 8007e94:	2301      	movs	r3, #1
 8007e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e9a:	e116      	b.n	80080ca <UART_SetConfig+0x2e6>
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ea2:	e112      	b.n	80080ca <UART_SetConfig+0x2e6>
 8007ea4:	2304      	movs	r3, #4
 8007ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007eaa:	e10e      	b.n	80080ca <UART_SetConfig+0x2e6>
 8007eac:	2308      	movs	r3, #8
 8007eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007eb2:	e10a      	b.n	80080ca <UART_SetConfig+0x2e6>
 8007eb4:	2310      	movs	r3, #16
 8007eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007eba:	e106      	b.n	80080ca <UART_SetConfig+0x2e6>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a7c      	ldr	r2, [pc, #496]	@ (80080b4 <UART_SetConfig+0x2d0>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d138      	bne.n	8007f38 <UART_SetConfig+0x154>
 8007ec6:	4b7a      	ldr	r3, [pc, #488]	@ (80080b0 <UART_SetConfig+0x2cc>)
 8007ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ecc:	f003 030c 	and.w	r3, r3, #12
 8007ed0:	2b0c      	cmp	r3, #12
 8007ed2:	d82d      	bhi.n	8007f30 <UART_SetConfig+0x14c>
 8007ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8007edc <UART_SetConfig+0xf8>)
 8007ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eda:	bf00      	nop
 8007edc:	08007f11 	.word	0x08007f11
 8007ee0:	08007f31 	.word	0x08007f31
 8007ee4:	08007f31 	.word	0x08007f31
 8007ee8:	08007f31 	.word	0x08007f31
 8007eec:	08007f21 	.word	0x08007f21
 8007ef0:	08007f31 	.word	0x08007f31
 8007ef4:	08007f31 	.word	0x08007f31
 8007ef8:	08007f31 	.word	0x08007f31
 8007efc:	08007f19 	.word	0x08007f19
 8007f00:	08007f31 	.word	0x08007f31
 8007f04:	08007f31 	.word	0x08007f31
 8007f08:	08007f31 	.word	0x08007f31
 8007f0c:	08007f29 	.word	0x08007f29
 8007f10:	2300      	movs	r3, #0
 8007f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f16:	e0d8      	b.n	80080ca <UART_SetConfig+0x2e6>
 8007f18:	2302      	movs	r3, #2
 8007f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f1e:	e0d4      	b.n	80080ca <UART_SetConfig+0x2e6>
 8007f20:	2304      	movs	r3, #4
 8007f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f26:	e0d0      	b.n	80080ca <UART_SetConfig+0x2e6>
 8007f28:	2308      	movs	r3, #8
 8007f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f2e:	e0cc      	b.n	80080ca <UART_SetConfig+0x2e6>
 8007f30:	2310      	movs	r3, #16
 8007f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f36:	e0c8      	b.n	80080ca <UART_SetConfig+0x2e6>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a5e      	ldr	r2, [pc, #376]	@ (80080b8 <UART_SetConfig+0x2d4>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d125      	bne.n	8007f8e <UART_SetConfig+0x1aa>
 8007f42:	4b5b      	ldr	r3, [pc, #364]	@ (80080b0 <UART_SetConfig+0x2cc>)
 8007f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f48:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007f4c:	2b30      	cmp	r3, #48	@ 0x30
 8007f4e:	d016      	beq.n	8007f7e <UART_SetConfig+0x19a>
 8007f50:	2b30      	cmp	r3, #48	@ 0x30
 8007f52:	d818      	bhi.n	8007f86 <UART_SetConfig+0x1a2>
 8007f54:	2b20      	cmp	r3, #32
 8007f56:	d00a      	beq.n	8007f6e <UART_SetConfig+0x18a>
 8007f58:	2b20      	cmp	r3, #32
 8007f5a:	d814      	bhi.n	8007f86 <UART_SetConfig+0x1a2>
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d002      	beq.n	8007f66 <UART_SetConfig+0x182>
 8007f60:	2b10      	cmp	r3, #16
 8007f62:	d008      	beq.n	8007f76 <UART_SetConfig+0x192>
 8007f64:	e00f      	b.n	8007f86 <UART_SetConfig+0x1a2>
 8007f66:	2300      	movs	r3, #0
 8007f68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f6c:	e0ad      	b.n	80080ca <UART_SetConfig+0x2e6>
 8007f6e:	2302      	movs	r3, #2
 8007f70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f74:	e0a9      	b.n	80080ca <UART_SetConfig+0x2e6>
 8007f76:	2304      	movs	r3, #4
 8007f78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f7c:	e0a5      	b.n	80080ca <UART_SetConfig+0x2e6>
 8007f7e:	2308      	movs	r3, #8
 8007f80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f84:	e0a1      	b.n	80080ca <UART_SetConfig+0x2e6>
 8007f86:	2310      	movs	r3, #16
 8007f88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f8c:	e09d      	b.n	80080ca <UART_SetConfig+0x2e6>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a4a      	ldr	r2, [pc, #296]	@ (80080bc <UART_SetConfig+0x2d8>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d125      	bne.n	8007fe4 <UART_SetConfig+0x200>
 8007f98:	4b45      	ldr	r3, [pc, #276]	@ (80080b0 <UART_SetConfig+0x2cc>)
 8007f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f9e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007fa2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007fa4:	d016      	beq.n	8007fd4 <UART_SetConfig+0x1f0>
 8007fa6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007fa8:	d818      	bhi.n	8007fdc <UART_SetConfig+0x1f8>
 8007faa:	2b80      	cmp	r3, #128	@ 0x80
 8007fac:	d00a      	beq.n	8007fc4 <UART_SetConfig+0x1e0>
 8007fae:	2b80      	cmp	r3, #128	@ 0x80
 8007fb0:	d814      	bhi.n	8007fdc <UART_SetConfig+0x1f8>
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d002      	beq.n	8007fbc <UART_SetConfig+0x1d8>
 8007fb6:	2b40      	cmp	r3, #64	@ 0x40
 8007fb8:	d008      	beq.n	8007fcc <UART_SetConfig+0x1e8>
 8007fba:	e00f      	b.n	8007fdc <UART_SetConfig+0x1f8>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007fc2:	e082      	b.n	80080ca <UART_SetConfig+0x2e6>
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007fca:	e07e      	b.n	80080ca <UART_SetConfig+0x2e6>
 8007fcc:	2304      	movs	r3, #4
 8007fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007fd2:	e07a      	b.n	80080ca <UART_SetConfig+0x2e6>
 8007fd4:	2308      	movs	r3, #8
 8007fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007fda:	e076      	b.n	80080ca <UART_SetConfig+0x2e6>
 8007fdc:	2310      	movs	r3, #16
 8007fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007fe2:	e072      	b.n	80080ca <UART_SetConfig+0x2e6>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a35      	ldr	r2, [pc, #212]	@ (80080c0 <UART_SetConfig+0x2dc>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d12a      	bne.n	8008044 <UART_SetConfig+0x260>
 8007fee:	4b30      	ldr	r3, [pc, #192]	@ (80080b0 <UART_SetConfig+0x2cc>)
 8007ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ff4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ff8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ffc:	d01a      	beq.n	8008034 <UART_SetConfig+0x250>
 8007ffe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008002:	d81b      	bhi.n	800803c <UART_SetConfig+0x258>
 8008004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008008:	d00c      	beq.n	8008024 <UART_SetConfig+0x240>
 800800a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800800e:	d815      	bhi.n	800803c <UART_SetConfig+0x258>
 8008010:	2b00      	cmp	r3, #0
 8008012:	d003      	beq.n	800801c <UART_SetConfig+0x238>
 8008014:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008018:	d008      	beq.n	800802c <UART_SetConfig+0x248>
 800801a:	e00f      	b.n	800803c <UART_SetConfig+0x258>
 800801c:	2300      	movs	r3, #0
 800801e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008022:	e052      	b.n	80080ca <UART_SetConfig+0x2e6>
 8008024:	2302      	movs	r3, #2
 8008026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800802a:	e04e      	b.n	80080ca <UART_SetConfig+0x2e6>
 800802c:	2304      	movs	r3, #4
 800802e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008032:	e04a      	b.n	80080ca <UART_SetConfig+0x2e6>
 8008034:	2308      	movs	r3, #8
 8008036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800803a:	e046      	b.n	80080ca <UART_SetConfig+0x2e6>
 800803c:	2310      	movs	r3, #16
 800803e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008042:	e042      	b.n	80080ca <UART_SetConfig+0x2e6>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a17      	ldr	r2, [pc, #92]	@ (80080a8 <UART_SetConfig+0x2c4>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d13a      	bne.n	80080c4 <UART_SetConfig+0x2e0>
 800804e:	4b18      	ldr	r3, [pc, #96]	@ (80080b0 <UART_SetConfig+0x2cc>)
 8008050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008054:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008058:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800805c:	d01a      	beq.n	8008094 <UART_SetConfig+0x2b0>
 800805e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008062:	d81b      	bhi.n	800809c <UART_SetConfig+0x2b8>
 8008064:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008068:	d00c      	beq.n	8008084 <UART_SetConfig+0x2a0>
 800806a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800806e:	d815      	bhi.n	800809c <UART_SetConfig+0x2b8>
 8008070:	2b00      	cmp	r3, #0
 8008072:	d003      	beq.n	800807c <UART_SetConfig+0x298>
 8008074:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008078:	d008      	beq.n	800808c <UART_SetConfig+0x2a8>
 800807a:	e00f      	b.n	800809c <UART_SetConfig+0x2b8>
 800807c:	2300      	movs	r3, #0
 800807e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008082:	e022      	b.n	80080ca <UART_SetConfig+0x2e6>
 8008084:	2302      	movs	r3, #2
 8008086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800808a:	e01e      	b.n	80080ca <UART_SetConfig+0x2e6>
 800808c:	2304      	movs	r3, #4
 800808e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008092:	e01a      	b.n	80080ca <UART_SetConfig+0x2e6>
 8008094:	2308      	movs	r3, #8
 8008096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800809a:	e016      	b.n	80080ca <UART_SetConfig+0x2e6>
 800809c:	2310      	movs	r3, #16
 800809e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080a2:	e012      	b.n	80080ca <UART_SetConfig+0x2e6>
 80080a4:	efff69f3 	.word	0xefff69f3
 80080a8:	40008000 	.word	0x40008000
 80080ac:	40013800 	.word	0x40013800
 80080b0:	40021000 	.word	0x40021000
 80080b4:	40004400 	.word	0x40004400
 80080b8:	40004800 	.word	0x40004800
 80080bc:	40004c00 	.word	0x40004c00
 80080c0:	40005000 	.word	0x40005000
 80080c4:	2310      	movs	r3, #16
 80080c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a9f      	ldr	r2, [pc, #636]	@ (800834c <UART_SetConfig+0x568>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d17a      	bne.n	80081ca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80080d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80080d8:	2b08      	cmp	r3, #8
 80080da:	d824      	bhi.n	8008126 <UART_SetConfig+0x342>
 80080dc:	a201      	add	r2, pc, #4	@ (adr r2, 80080e4 <UART_SetConfig+0x300>)
 80080de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e2:	bf00      	nop
 80080e4:	08008109 	.word	0x08008109
 80080e8:	08008127 	.word	0x08008127
 80080ec:	08008111 	.word	0x08008111
 80080f0:	08008127 	.word	0x08008127
 80080f4:	08008117 	.word	0x08008117
 80080f8:	08008127 	.word	0x08008127
 80080fc:	08008127 	.word	0x08008127
 8008100:	08008127 	.word	0x08008127
 8008104:	0800811f 	.word	0x0800811f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008108:	f7fd f91c 	bl	8005344 <HAL_RCC_GetPCLK1Freq>
 800810c:	61f8      	str	r0, [r7, #28]
        break;
 800810e:	e010      	b.n	8008132 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008110:	4b8f      	ldr	r3, [pc, #572]	@ (8008350 <UART_SetConfig+0x56c>)
 8008112:	61fb      	str	r3, [r7, #28]
        break;
 8008114:	e00d      	b.n	8008132 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008116:	f7fd f87d 	bl	8005214 <HAL_RCC_GetSysClockFreq>
 800811a:	61f8      	str	r0, [r7, #28]
        break;
 800811c:	e009      	b.n	8008132 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800811e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008122:	61fb      	str	r3, [r7, #28]
        break;
 8008124:	e005      	b.n	8008132 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008126:	2300      	movs	r3, #0
 8008128:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008130:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	2b00      	cmp	r3, #0
 8008136:	f000 80fb 	beq.w	8008330 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	685a      	ldr	r2, [r3, #4]
 800813e:	4613      	mov	r3, r2
 8008140:	005b      	lsls	r3, r3, #1
 8008142:	4413      	add	r3, r2
 8008144:	69fa      	ldr	r2, [r7, #28]
 8008146:	429a      	cmp	r2, r3
 8008148:	d305      	bcc.n	8008156 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008150:	69fa      	ldr	r2, [r7, #28]
 8008152:	429a      	cmp	r2, r3
 8008154:	d903      	bls.n	800815e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800815c:	e0e8      	b.n	8008330 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	2200      	movs	r2, #0
 8008162:	461c      	mov	r4, r3
 8008164:	4615      	mov	r5, r2
 8008166:	f04f 0200 	mov.w	r2, #0
 800816a:	f04f 0300 	mov.w	r3, #0
 800816e:	022b      	lsls	r3, r5, #8
 8008170:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008174:	0222      	lsls	r2, r4, #8
 8008176:	68f9      	ldr	r1, [r7, #12]
 8008178:	6849      	ldr	r1, [r1, #4]
 800817a:	0849      	lsrs	r1, r1, #1
 800817c:	2000      	movs	r0, #0
 800817e:	4688      	mov	r8, r1
 8008180:	4681      	mov	r9, r0
 8008182:	eb12 0a08 	adds.w	sl, r2, r8
 8008186:	eb43 0b09 	adc.w	fp, r3, r9
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	603b      	str	r3, [r7, #0]
 8008192:	607a      	str	r2, [r7, #4]
 8008194:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008198:	4650      	mov	r0, sl
 800819a:	4659      	mov	r1, fp
 800819c:	f7f8 f826 	bl	80001ec <__aeabi_uldivmod>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	4613      	mov	r3, r2
 80081a6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081ae:	d308      	bcc.n	80081c2 <UART_SetConfig+0x3de>
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081b6:	d204      	bcs.n	80081c2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	69ba      	ldr	r2, [r7, #24]
 80081be:	60da      	str	r2, [r3, #12]
 80081c0:	e0b6      	b.n	8008330 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80081c8:	e0b2      	b.n	8008330 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	69db      	ldr	r3, [r3, #28]
 80081ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081d2:	d15e      	bne.n	8008292 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80081d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80081d8:	2b08      	cmp	r3, #8
 80081da:	d828      	bhi.n	800822e <UART_SetConfig+0x44a>
 80081dc:	a201      	add	r2, pc, #4	@ (adr r2, 80081e4 <UART_SetConfig+0x400>)
 80081de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e2:	bf00      	nop
 80081e4:	08008209 	.word	0x08008209
 80081e8:	08008211 	.word	0x08008211
 80081ec:	08008219 	.word	0x08008219
 80081f0:	0800822f 	.word	0x0800822f
 80081f4:	0800821f 	.word	0x0800821f
 80081f8:	0800822f 	.word	0x0800822f
 80081fc:	0800822f 	.word	0x0800822f
 8008200:	0800822f 	.word	0x0800822f
 8008204:	08008227 	.word	0x08008227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008208:	f7fd f89c 	bl	8005344 <HAL_RCC_GetPCLK1Freq>
 800820c:	61f8      	str	r0, [r7, #28]
        break;
 800820e:	e014      	b.n	800823a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008210:	f7fd f8ae 	bl	8005370 <HAL_RCC_GetPCLK2Freq>
 8008214:	61f8      	str	r0, [r7, #28]
        break;
 8008216:	e010      	b.n	800823a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008218:	4b4d      	ldr	r3, [pc, #308]	@ (8008350 <UART_SetConfig+0x56c>)
 800821a:	61fb      	str	r3, [r7, #28]
        break;
 800821c:	e00d      	b.n	800823a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800821e:	f7fc fff9 	bl	8005214 <HAL_RCC_GetSysClockFreq>
 8008222:	61f8      	str	r0, [r7, #28]
        break;
 8008224:	e009      	b.n	800823a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008226:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800822a:	61fb      	str	r3, [r7, #28]
        break;
 800822c:	e005      	b.n	800823a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800822e:	2300      	movs	r3, #0
 8008230:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008238:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d077      	beq.n	8008330 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	005a      	lsls	r2, r3, #1
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	085b      	lsrs	r3, r3, #1
 800824a:	441a      	add	r2, r3
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	fbb2 f3f3 	udiv	r3, r2, r3
 8008254:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	2b0f      	cmp	r3, #15
 800825a:	d916      	bls.n	800828a <UART_SetConfig+0x4a6>
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008262:	d212      	bcs.n	800828a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	b29b      	uxth	r3, r3
 8008268:	f023 030f 	bic.w	r3, r3, #15
 800826c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	085b      	lsrs	r3, r3, #1
 8008272:	b29b      	uxth	r3, r3
 8008274:	f003 0307 	and.w	r3, r3, #7
 8008278:	b29a      	uxth	r2, r3
 800827a:	8afb      	ldrh	r3, [r7, #22]
 800827c:	4313      	orrs	r3, r2
 800827e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	8afa      	ldrh	r2, [r7, #22]
 8008286:	60da      	str	r2, [r3, #12]
 8008288:	e052      	b.n	8008330 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008290:	e04e      	b.n	8008330 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008292:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008296:	2b08      	cmp	r3, #8
 8008298:	d827      	bhi.n	80082ea <UART_SetConfig+0x506>
 800829a:	a201      	add	r2, pc, #4	@ (adr r2, 80082a0 <UART_SetConfig+0x4bc>)
 800829c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a0:	080082c5 	.word	0x080082c5
 80082a4:	080082cd 	.word	0x080082cd
 80082a8:	080082d5 	.word	0x080082d5
 80082ac:	080082eb 	.word	0x080082eb
 80082b0:	080082db 	.word	0x080082db
 80082b4:	080082eb 	.word	0x080082eb
 80082b8:	080082eb 	.word	0x080082eb
 80082bc:	080082eb 	.word	0x080082eb
 80082c0:	080082e3 	.word	0x080082e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082c4:	f7fd f83e 	bl	8005344 <HAL_RCC_GetPCLK1Freq>
 80082c8:	61f8      	str	r0, [r7, #28]
        break;
 80082ca:	e014      	b.n	80082f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082cc:	f7fd f850 	bl	8005370 <HAL_RCC_GetPCLK2Freq>
 80082d0:	61f8      	str	r0, [r7, #28]
        break;
 80082d2:	e010      	b.n	80082f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082d4:	4b1e      	ldr	r3, [pc, #120]	@ (8008350 <UART_SetConfig+0x56c>)
 80082d6:	61fb      	str	r3, [r7, #28]
        break;
 80082d8:	e00d      	b.n	80082f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082da:	f7fc ff9b 	bl	8005214 <HAL_RCC_GetSysClockFreq>
 80082de:	61f8      	str	r0, [r7, #28]
        break;
 80082e0:	e009      	b.n	80082f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082e6:	61fb      	str	r3, [r7, #28]
        break;
 80082e8:	e005      	b.n	80082f6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80082ea:	2300      	movs	r3, #0
 80082ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80082f4:	bf00      	nop
    }

    if (pclk != 0U)
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d019      	beq.n	8008330 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	085a      	lsrs	r2, r3, #1
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	441a      	add	r2, r3
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	fbb2 f3f3 	udiv	r3, r2, r3
 800830e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	2b0f      	cmp	r3, #15
 8008314:	d909      	bls.n	800832a <UART_SetConfig+0x546>
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800831c:	d205      	bcs.n	800832a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	b29a      	uxth	r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	60da      	str	r2, [r3, #12]
 8008328:	e002      	b.n	8008330 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2200      	movs	r2, #0
 800833a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800833c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008340:	4618      	mov	r0, r3
 8008342:	3728      	adds	r7, #40	@ 0x28
 8008344:	46bd      	mov	sp, r7
 8008346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800834a:	bf00      	nop
 800834c:	40008000 	.word	0x40008000
 8008350:	00f42400 	.word	0x00f42400

08008354 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008360:	f003 0308 	and.w	r3, r3, #8
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00a      	beq.n	800837e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	430a      	orrs	r2, r1
 800837c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008382:	f003 0301 	and.w	r3, r3, #1
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00a      	beq.n	80083a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	430a      	orrs	r2, r1
 800839e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a4:	f003 0302 	and.w	r3, r3, #2
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00a      	beq.n	80083c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	430a      	orrs	r2, r1
 80083c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083c6:	f003 0304 	and.w	r3, r3, #4
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00a      	beq.n	80083e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	430a      	orrs	r2, r1
 80083e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083e8:	f003 0310 	and.w	r3, r3, #16
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00a      	beq.n	8008406 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	430a      	orrs	r2, r1
 8008404:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800840a:	f003 0320 	and.w	r3, r3, #32
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00a      	beq.n	8008428 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	430a      	orrs	r2, r1
 8008426:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800842c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008430:	2b00      	cmp	r3, #0
 8008432:	d01a      	beq.n	800846a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	430a      	orrs	r2, r1
 8008448:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800844e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008452:	d10a      	bne.n	800846a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	430a      	orrs	r2, r1
 8008468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800846e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00a      	beq.n	800848c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	430a      	orrs	r2, r1
 800848a:	605a      	str	r2, [r3, #4]
  }
}
 800848c:	bf00      	nop
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b098      	sub	sp, #96	@ 0x60
 800849c:	af02      	add	r7, sp, #8
 800849e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084a8:	f7fb f88a 	bl	80035c0 <HAL_GetTick>
 80084ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 0308 	and.w	r3, r3, #8
 80084b8:	2b08      	cmp	r3, #8
 80084ba:	d12e      	bne.n	800851a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80084c0:	9300      	str	r3, [sp, #0]
 80084c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084c4:	2200      	movs	r2, #0
 80084c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f88c 	bl	80085e8 <UART_WaitOnFlagUntilTimeout>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d021      	beq.n	800851a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084de:	e853 3f00 	ldrex	r3, [r3]
 80084e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80084e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	461a      	mov	r2, r3
 80084f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80084f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084fc:	e841 2300 	strex	r3, r2, [r1]
 8008500:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1e6      	bne.n	80084d6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2220      	movs	r2, #32
 800850c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008516:	2303      	movs	r3, #3
 8008518:	e062      	b.n	80085e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 0304 	and.w	r3, r3, #4
 8008524:	2b04      	cmp	r3, #4
 8008526:	d149      	bne.n	80085bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008528:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008530:	2200      	movs	r2, #0
 8008532:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f856 	bl	80085e8 <UART_WaitOnFlagUntilTimeout>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d03c      	beq.n	80085bc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800854a:	e853 3f00 	ldrex	r3, [r3]
 800854e:	623b      	str	r3, [r7, #32]
   return(result);
 8008550:	6a3b      	ldr	r3, [r7, #32]
 8008552:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008556:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	461a      	mov	r2, r3
 800855e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008560:	633b      	str	r3, [r7, #48]	@ 0x30
 8008562:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008564:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008566:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008568:	e841 2300 	strex	r3, r2, [r1]
 800856c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800856e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008570:	2b00      	cmp	r3, #0
 8008572:	d1e6      	bne.n	8008542 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	3308      	adds	r3, #8
 800857a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	e853 3f00 	ldrex	r3, [r3]
 8008582:	60fb      	str	r3, [r7, #12]
   return(result);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f023 0301 	bic.w	r3, r3, #1
 800858a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	3308      	adds	r3, #8
 8008592:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008594:	61fa      	str	r2, [r7, #28]
 8008596:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008598:	69b9      	ldr	r1, [r7, #24]
 800859a:	69fa      	ldr	r2, [r7, #28]
 800859c:	e841 2300 	strex	r3, r2, [r1]
 80085a0:	617b      	str	r3, [r7, #20]
   return(result);
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1e5      	bne.n	8008574 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2220      	movs	r2, #32
 80085ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	e011      	b.n	80085e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2220      	movs	r2, #32
 80085c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2220      	movs	r2, #32
 80085c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3758      	adds	r7, #88	@ 0x58
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	603b      	str	r3, [r7, #0]
 80085f4:	4613      	mov	r3, r2
 80085f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085f8:	e04f      	b.n	800869a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008600:	d04b      	beq.n	800869a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008602:	f7fa ffdd 	bl	80035c0 <HAL_GetTick>
 8008606:	4602      	mov	r2, r0
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	69ba      	ldr	r2, [r7, #24]
 800860e:	429a      	cmp	r2, r3
 8008610:	d302      	bcc.n	8008618 <UART_WaitOnFlagUntilTimeout+0x30>
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d101      	bne.n	800861c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008618:	2303      	movs	r3, #3
 800861a:	e04e      	b.n	80086ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 0304 	and.w	r3, r3, #4
 8008626:	2b00      	cmp	r3, #0
 8008628:	d037      	beq.n	800869a <UART_WaitOnFlagUntilTimeout+0xb2>
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	2b80      	cmp	r3, #128	@ 0x80
 800862e:	d034      	beq.n	800869a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	2b40      	cmp	r3, #64	@ 0x40
 8008634:	d031      	beq.n	800869a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	69db      	ldr	r3, [r3, #28]
 800863c:	f003 0308 	and.w	r3, r3, #8
 8008640:	2b08      	cmp	r3, #8
 8008642:	d110      	bne.n	8008666 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2208      	movs	r2, #8
 800864a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f000 f8ff 	bl	8008850 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2208      	movs	r2, #8
 8008656:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e029      	b.n	80086ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	69db      	ldr	r3, [r3, #28]
 800866c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008670:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008674:	d111      	bne.n	800869a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800867e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f000 f8e5 	bl	8008850 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2220      	movs	r2, #32
 800868a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2200      	movs	r2, #0
 8008692:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008696:	2303      	movs	r3, #3
 8008698:	e00f      	b.n	80086ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	69da      	ldr	r2, [r3, #28]
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	4013      	ands	r3, r2
 80086a4:	68ba      	ldr	r2, [r7, #8]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	bf0c      	ite	eq
 80086aa:	2301      	moveq	r3, #1
 80086ac:	2300      	movne	r3, #0
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	461a      	mov	r2, r3
 80086b2:	79fb      	ldrb	r3, [r7, #7]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d0a0      	beq.n	80085fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
	...

080086c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b097      	sub	sp, #92	@ 0x5c
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	4613      	mov	r3, r2
 80086d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	68ba      	ldr	r2, [r7, #8]
 80086d6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	88fa      	ldrh	r2, [r7, #6]
 80086dc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	88fa      	ldrh	r2, [r7, #6]
 80086e4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086f6:	d10e      	bne.n	8008716 <UART_Start_Receive_IT+0x52>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d105      	bne.n	800870c <UART_Start_Receive_IT+0x48>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008706:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800870a:	e02d      	b.n	8008768 <UART_Start_Receive_IT+0xa4>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	22ff      	movs	r2, #255	@ 0xff
 8008710:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008714:	e028      	b.n	8008768 <UART_Start_Receive_IT+0xa4>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10d      	bne.n	800873a <UART_Start_Receive_IT+0x76>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d104      	bne.n	8008730 <UART_Start_Receive_IT+0x6c>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	22ff      	movs	r2, #255	@ 0xff
 800872a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800872e:	e01b      	b.n	8008768 <UART_Start_Receive_IT+0xa4>
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	227f      	movs	r2, #127	@ 0x7f
 8008734:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008738:	e016      	b.n	8008768 <UART_Start_Receive_IT+0xa4>
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008742:	d10d      	bne.n	8008760 <UART_Start_Receive_IT+0x9c>
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d104      	bne.n	8008756 <UART_Start_Receive_IT+0x92>
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	227f      	movs	r2, #127	@ 0x7f
 8008750:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008754:	e008      	b.n	8008768 <UART_Start_Receive_IT+0xa4>
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	223f      	movs	r2, #63	@ 0x3f
 800875a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800875e:	e003      	b.n	8008768 <UART_Start_Receive_IT+0xa4>
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2222      	movs	r2, #34	@ 0x22
 8008774:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	3308      	adds	r3, #8
 800877e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008782:	e853 3f00 	ldrex	r3, [r3]
 8008786:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800878a:	f043 0301 	orr.w	r3, r3, #1
 800878e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	3308      	adds	r3, #8
 8008796:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008798:	64ba      	str	r2, [r7, #72]	@ 0x48
 800879a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800879e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087a0:	e841 2300 	strex	r3, r2, [r1]
 80087a4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80087a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1e5      	bne.n	8008778 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087b4:	d107      	bne.n	80087c6 <UART_Start_Receive_IT+0x102>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d103      	bne.n	80087c6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	4a21      	ldr	r2, [pc, #132]	@ (8008848 <UART_Start_Receive_IT+0x184>)
 80087c2:	669a      	str	r2, [r3, #104]	@ 0x68
 80087c4:	e002      	b.n	80087cc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	4a20      	ldr	r2, [pc, #128]	@ (800884c <UART_Start_Receive_IT+0x188>)
 80087ca:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d019      	beq.n	8008808 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087dc:	e853 3f00 	ldrex	r3, [r3]
 80087e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80087e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80087e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	461a      	mov	r2, r3
 80087f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80087f4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80087f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80087fa:	e841 2300 	strex	r3, r2, [r1]
 80087fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1e6      	bne.n	80087d4 <UART_Start_Receive_IT+0x110>
 8008806:	e018      	b.n	800883a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	e853 3f00 	ldrex	r3, [r3]
 8008814:	613b      	str	r3, [r7, #16]
   return(result);
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	f043 0320 	orr.w	r3, r3, #32
 800881c:	653b      	str	r3, [r7, #80]	@ 0x50
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	461a      	mov	r2, r3
 8008824:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008826:	623b      	str	r3, [r7, #32]
 8008828:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882a:	69f9      	ldr	r1, [r7, #28]
 800882c:	6a3a      	ldr	r2, [r7, #32]
 800882e:	e841 2300 	strex	r3, r2, [r1]
 8008832:	61bb      	str	r3, [r7, #24]
   return(result);
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1e6      	bne.n	8008808 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	375c      	adds	r7, #92	@ 0x5c
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr
 8008848:	08008b55 	.word	0x08008b55
 800884c:	08008999 	.word	0x08008999

08008850 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008850:	b480      	push	{r7}
 8008852:	b095      	sub	sp, #84	@ 0x54
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008860:	e853 3f00 	ldrex	r3, [r3]
 8008864:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008868:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800886c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	461a      	mov	r2, r3
 8008874:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008876:	643b      	str	r3, [r7, #64]	@ 0x40
 8008878:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800887c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800887e:	e841 2300 	strex	r3, r2, [r1]
 8008882:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1e6      	bne.n	8008858 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	3308      	adds	r3, #8
 8008890:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008892:	6a3b      	ldr	r3, [r7, #32]
 8008894:	e853 3f00 	ldrex	r3, [r3]
 8008898:	61fb      	str	r3, [r7, #28]
   return(result);
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	f023 0301 	bic.w	r3, r3, #1
 80088a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	3308      	adds	r3, #8
 80088a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80088ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088b2:	e841 2300 	strex	r3, r2, [r1]
 80088b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80088b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1e5      	bne.n	800888a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d118      	bne.n	80088f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	e853 3f00 	ldrex	r3, [r3]
 80088d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	f023 0310 	bic.w	r3, r3, #16
 80088da:	647b      	str	r3, [r7, #68]	@ 0x44
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	461a      	mov	r2, r3
 80088e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088e4:	61bb      	str	r3, [r7, #24]
 80088e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e8:	6979      	ldr	r1, [r7, #20]
 80088ea:	69ba      	ldr	r2, [r7, #24]
 80088ec:	e841 2300 	strex	r3, r2, [r1]
 80088f0:	613b      	str	r3, [r7, #16]
   return(result);
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d1e6      	bne.n	80088c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2220      	movs	r2, #32
 80088fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800890c:	bf00      	nop
 800890e:	3754      	adds	r7, #84	@ 0x54
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008924:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f7ff fa3e 	bl	8007db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800893c:	bf00      	nop
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b088      	sub	sp, #32
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	e853 3f00 	ldrex	r3, [r3]
 8008958:	60bb      	str	r3, [r7, #8]
   return(result);
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008960:	61fb      	str	r3, [r7, #28]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	461a      	mov	r2, r3
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	61bb      	str	r3, [r7, #24]
 800896c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896e:	6979      	ldr	r1, [r7, #20]
 8008970:	69ba      	ldr	r2, [r7, #24]
 8008972:	e841 2300 	strex	r3, r2, [r1]
 8008976:	613b      	str	r3, [r7, #16]
   return(result);
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1e6      	bne.n	800894c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2220      	movs	r2, #32
 8008982:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7ff fa0a 	bl	8007da4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008990:	bf00      	nop
 8008992:	3720      	adds	r7, #32
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b09c      	sub	sp, #112	@ 0x70
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80089a6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089b0:	2b22      	cmp	r3, #34	@ 0x22
 80089b2:	f040 80be 	bne.w	8008b32 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80089bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80089c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80089c4:	b2d9      	uxtb	r1, r3
 80089c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089d0:	400a      	ands	r2, r1
 80089d2:	b2d2      	uxtb	r2, r2
 80089d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089da:	1c5a      	adds	r2, r3, #1
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	3b01      	subs	r3, #1
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f040 80a3 	bne.w	8008b46 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a08:	e853 3f00 	ldrex	r3, [r3]
 8008a0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008a0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a20:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a26:	e841 2300 	strex	r3, r2, [r1]
 8008a2a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008a2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1e6      	bne.n	8008a00 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	3308      	adds	r3, #8
 8008a38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a3c:	e853 3f00 	ldrex	r3, [r3]
 8008a40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a44:	f023 0301 	bic.w	r3, r3, #1
 8008a48:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	3308      	adds	r3, #8
 8008a50:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008a52:	647a      	str	r2, [r7, #68]	@ 0x44
 8008a54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a5a:	e841 2300 	strex	r3, r2, [r1]
 8008a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d1e5      	bne.n	8008a32 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2220      	movs	r2, #32
 8008a6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a34      	ldr	r2, [pc, #208]	@ (8008b50 <UART_RxISR_8BIT+0x1b8>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d01f      	beq.n	8008ac4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d018      	beq.n	8008ac4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a9a:	e853 3f00 	ldrex	r3, [r3]
 8008a9e:	623b      	str	r3, [r7, #32]
   return(result);
 8008aa0:	6a3b      	ldr	r3, [r7, #32]
 8008aa2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008aa6:	663b      	str	r3, [r7, #96]	@ 0x60
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	461a      	mov	r2, r3
 8008aae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ab0:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ab2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ab8:	e841 2300 	strex	r3, r2, [r1]
 8008abc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d1e6      	bne.n	8008a92 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d12e      	bne.n	8008b2a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	e853 3f00 	ldrex	r3, [r3]
 8008ade:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f023 0310 	bic.w	r3, r3, #16
 8008ae6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	461a      	mov	r2, r3
 8008aee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008af0:	61fb      	str	r3, [r7, #28]
 8008af2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af4:	69b9      	ldr	r1, [r7, #24]
 8008af6:	69fa      	ldr	r2, [r7, #28]
 8008af8:	e841 2300 	strex	r3, r2, [r1]
 8008afc:	617b      	str	r3, [r7, #20]
   return(result);
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d1e6      	bne.n	8008ad2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	69db      	ldr	r3, [r3, #28]
 8008b0a:	f003 0310 	and.w	r3, r3, #16
 8008b0e:	2b10      	cmp	r3, #16
 8008b10:	d103      	bne.n	8008b1a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	2210      	movs	r2, #16
 8008b18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008b20:	4619      	mov	r1, r3
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f7ff f952 	bl	8007dcc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b28:	e00d      	b.n	8008b46 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f7f9 fd60 	bl	80025f0 <HAL_UART_RxCpltCallback>
}
 8008b30:	e009      	b.n	8008b46 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	8b1b      	ldrh	r3, [r3, #24]
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f042 0208 	orr.w	r2, r2, #8
 8008b42:	b292      	uxth	r2, r2
 8008b44:	831a      	strh	r2, [r3, #24]
}
 8008b46:	bf00      	nop
 8008b48:	3770      	adds	r7, #112	@ 0x70
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	40008000 	.word	0x40008000

08008b54 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b09c      	sub	sp, #112	@ 0x70
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008b62:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b6c:	2b22      	cmp	r3, #34	@ 0x22
 8008b6e:	f040 80be 	bne.w	8008cee <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008b78:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b80:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008b82:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008b86:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008b90:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b96:	1c9a      	adds	r2, r3, #2
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	b29a      	uxth	r2, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f040 80a3 	bne.w	8008d02 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bc4:	e853 3f00 	ldrex	r3, [r3]
 8008bc8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008bca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bd0:	667b      	str	r3, [r7, #100]	@ 0x64
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008bda:	657b      	str	r3, [r7, #84]	@ 0x54
 8008bdc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bde:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008be0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008be2:	e841 2300 	strex	r3, r2, [r1]
 8008be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008be8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1e6      	bne.n	8008bbc <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	3308      	adds	r3, #8
 8008bf4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bf8:	e853 3f00 	ldrex	r3, [r3]
 8008bfc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c00:	f023 0301 	bic.w	r3, r3, #1
 8008c04:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	3308      	adds	r3, #8
 8008c0c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008c0e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c16:	e841 2300 	strex	r3, r2, [r1]
 8008c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1e5      	bne.n	8008bee <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2220      	movs	r2, #32
 8008c26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a34      	ldr	r2, [pc, #208]	@ (8008d0c <UART_RxISR_16BIT+0x1b8>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d01f      	beq.n	8008c80 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d018      	beq.n	8008c80 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c54:	6a3b      	ldr	r3, [r7, #32]
 8008c56:	e853 3f00 	ldrex	r3, [r3]
 8008c5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008c62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	461a      	mov	r2, r3
 8008c6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c6e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c74:	e841 2300 	strex	r3, r2, [r1]
 8008c78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1e6      	bne.n	8008c4e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d12e      	bne.n	8008ce6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	e853 3f00 	ldrex	r3, [r3]
 8008c9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	f023 0310 	bic.w	r3, r3, #16
 8008ca2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	461a      	mov	r2, r3
 8008caa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008cac:	61bb      	str	r3, [r7, #24]
 8008cae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb0:	6979      	ldr	r1, [r7, #20]
 8008cb2:	69ba      	ldr	r2, [r7, #24]
 8008cb4:	e841 2300 	strex	r3, r2, [r1]
 8008cb8:	613b      	str	r3, [r7, #16]
   return(result);
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1e6      	bne.n	8008c8e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	69db      	ldr	r3, [r3, #28]
 8008cc6:	f003 0310 	and.w	r3, r3, #16
 8008cca:	2b10      	cmp	r3, #16
 8008ccc:	d103      	bne.n	8008cd6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2210      	movs	r2, #16
 8008cd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008cdc:	4619      	mov	r1, r3
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f7ff f874 	bl	8007dcc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ce4:	e00d      	b.n	8008d02 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f7f9 fc82 	bl	80025f0 <HAL_UART_RxCpltCallback>
}
 8008cec:	e009      	b.n	8008d02 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	8b1b      	ldrh	r3, [r3, #24]
 8008cf4:	b29a      	uxth	r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f042 0208 	orr.w	r2, r2, #8
 8008cfe:	b292      	uxth	r2, r2
 8008d00:	831a      	strh	r2, [r3, #24]
}
 8008d02:	bf00      	nop
 8008d04:	3770      	adds	r7, #112	@ 0x70
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	40008000 	.word	0x40008000

08008d10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008d18:	bf00      	nop
 8008d1a:	370c      	adds	r7, #12
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <malloc>:
 8008d24:	4b02      	ldr	r3, [pc, #8]	@ (8008d30 <malloc+0xc>)
 8008d26:	4601      	mov	r1, r0
 8008d28:	6818      	ldr	r0, [r3, #0]
 8008d2a:	f000 b82d 	b.w	8008d88 <_malloc_r>
 8008d2e:	bf00      	nop
 8008d30:	2000003c 	.word	0x2000003c

08008d34 <free>:
 8008d34:	4b02      	ldr	r3, [pc, #8]	@ (8008d40 <free+0xc>)
 8008d36:	4601      	mov	r1, r0
 8008d38:	6818      	ldr	r0, [r3, #0]
 8008d3a:	f000 b8f5 	b.w	8008f28 <_free_r>
 8008d3e:	bf00      	nop
 8008d40:	2000003c 	.word	0x2000003c

08008d44 <sbrk_aligned>:
 8008d44:	b570      	push	{r4, r5, r6, lr}
 8008d46:	4e0f      	ldr	r6, [pc, #60]	@ (8008d84 <sbrk_aligned+0x40>)
 8008d48:	460c      	mov	r4, r1
 8008d4a:	6831      	ldr	r1, [r6, #0]
 8008d4c:	4605      	mov	r5, r0
 8008d4e:	b911      	cbnz	r1, 8008d56 <sbrk_aligned+0x12>
 8008d50:	f000 f8ae 	bl	8008eb0 <_sbrk_r>
 8008d54:	6030      	str	r0, [r6, #0]
 8008d56:	4621      	mov	r1, r4
 8008d58:	4628      	mov	r0, r5
 8008d5a:	f000 f8a9 	bl	8008eb0 <_sbrk_r>
 8008d5e:	1c43      	adds	r3, r0, #1
 8008d60:	d103      	bne.n	8008d6a <sbrk_aligned+0x26>
 8008d62:	f04f 34ff 	mov.w	r4, #4294967295
 8008d66:	4620      	mov	r0, r4
 8008d68:	bd70      	pop	{r4, r5, r6, pc}
 8008d6a:	1cc4      	adds	r4, r0, #3
 8008d6c:	f024 0403 	bic.w	r4, r4, #3
 8008d70:	42a0      	cmp	r0, r4
 8008d72:	d0f8      	beq.n	8008d66 <sbrk_aligned+0x22>
 8008d74:	1a21      	subs	r1, r4, r0
 8008d76:	4628      	mov	r0, r5
 8008d78:	f000 f89a 	bl	8008eb0 <_sbrk_r>
 8008d7c:	3001      	adds	r0, #1
 8008d7e:	d1f2      	bne.n	8008d66 <sbrk_aligned+0x22>
 8008d80:	e7ef      	b.n	8008d62 <sbrk_aligned+0x1e>
 8008d82:	bf00      	nop
 8008d84:	200002f8 	.word	0x200002f8

08008d88 <_malloc_r>:
 8008d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d8c:	1ccd      	adds	r5, r1, #3
 8008d8e:	f025 0503 	bic.w	r5, r5, #3
 8008d92:	3508      	adds	r5, #8
 8008d94:	2d0c      	cmp	r5, #12
 8008d96:	bf38      	it	cc
 8008d98:	250c      	movcc	r5, #12
 8008d9a:	2d00      	cmp	r5, #0
 8008d9c:	4606      	mov	r6, r0
 8008d9e:	db01      	blt.n	8008da4 <_malloc_r+0x1c>
 8008da0:	42a9      	cmp	r1, r5
 8008da2:	d904      	bls.n	8008dae <_malloc_r+0x26>
 8008da4:	230c      	movs	r3, #12
 8008da6:	6033      	str	r3, [r6, #0]
 8008da8:	2000      	movs	r0, #0
 8008daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008e84 <_malloc_r+0xfc>
 8008db2:	f000 f869 	bl	8008e88 <__malloc_lock>
 8008db6:	f8d8 3000 	ldr.w	r3, [r8]
 8008dba:	461c      	mov	r4, r3
 8008dbc:	bb44      	cbnz	r4, 8008e10 <_malloc_r+0x88>
 8008dbe:	4629      	mov	r1, r5
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	f7ff ffbf 	bl	8008d44 <sbrk_aligned>
 8008dc6:	1c43      	adds	r3, r0, #1
 8008dc8:	4604      	mov	r4, r0
 8008dca:	d158      	bne.n	8008e7e <_malloc_r+0xf6>
 8008dcc:	f8d8 4000 	ldr.w	r4, [r8]
 8008dd0:	4627      	mov	r7, r4
 8008dd2:	2f00      	cmp	r7, #0
 8008dd4:	d143      	bne.n	8008e5e <_malloc_r+0xd6>
 8008dd6:	2c00      	cmp	r4, #0
 8008dd8:	d04b      	beq.n	8008e72 <_malloc_r+0xea>
 8008dda:	6823      	ldr	r3, [r4, #0]
 8008ddc:	4639      	mov	r1, r7
 8008dde:	4630      	mov	r0, r6
 8008de0:	eb04 0903 	add.w	r9, r4, r3
 8008de4:	f000 f864 	bl	8008eb0 <_sbrk_r>
 8008de8:	4581      	cmp	r9, r0
 8008dea:	d142      	bne.n	8008e72 <_malloc_r+0xea>
 8008dec:	6821      	ldr	r1, [r4, #0]
 8008dee:	1a6d      	subs	r5, r5, r1
 8008df0:	4629      	mov	r1, r5
 8008df2:	4630      	mov	r0, r6
 8008df4:	f7ff ffa6 	bl	8008d44 <sbrk_aligned>
 8008df8:	3001      	adds	r0, #1
 8008dfa:	d03a      	beq.n	8008e72 <_malloc_r+0xea>
 8008dfc:	6823      	ldr	r3, [r4, #0]
 8008dfe:	442b      	add	r3, r5
 8008e00:	6023      	str	r3, [r4, #0]
 8008e02:	f8d8 3000 	ldr.w	r3, [r8]
 8008e06:	685a      	ldr	r2, [r3, #4]
 8008e08:	bb62      	cbnz	r2, 8008e64 <_malloc_r+0xdc>
 8008e0a:	f8c8 7000 	str.w	r7, [r8]
 8008e0e:	e00f      	b.n	8008e30 <_malloc_r+0xa8>
 8008e10:	6822      	ldr	r2, [r4, #0]
 8008e12:	1b52      	subs	r2, r2, r5
 8008e14:	d420      	bmi.n	8008e58 <_malloc_r+0xd0>
 8008e16:	2a0b      	cmp	r2, #11
 8008e18:	d917      	bls.n	8008e4a <_malloc_r+0xc2>
 8008e1a:	1961      	adds	r1, r4, r5
 8008e1c:	42a3      	cmp	r3, r4
 8008e1e:	6025      	str	r5, [r4, #0]
 8008e20:	bf18      	it	ne
 8008e22:	6059      	strne	r1, [r3, #4]
 8008e24:	6863      	ldr	r3, [r4, #4]
 8008e26:	bf08      	it	eq
 8008e28:	f8c8 1000 	streq.w	r1, [r8]
 8008e2c:	5162      	str	r2, [r4, r5]
 8008e2e:	604b      	str	r3, [r1, #4]
 8008e30:	4630      	mov	r0, r6
 8008e32:	f000 f82f 	bl	8008e94 <__malloc_unlock>
 8008e36:	f104 000b 	add.w	r0, r4, #11
 8008e3a:	1d23      	adds	r3, r4, #4
 8008e3c:	f020 0007 	bic.w	r0, r0, #7
 8008e40:	1ac2      	subs	r2, r0, r3
 8008e42:	bf1c      	itt	ne
 8008e44:	1a1b      	subne	r3, r3, r0
 8008e46:	50a3      	strne	r3, [r4, r2]
 8008e48:	e7af      	b.n	8008daa <_malloc_r+0x22>
 8008e4a:	6862      	ldr	r2, [r4, #4]
 8008e4c:	42a3      	cmp	r3, r4
 8008e4e:	bf0c      	ite	eq
 8008e50:	f8c8 2000 	streq.w	r2, [r8]
 8008e54:	605a      	strne	r2, [r3, #4]
 8008e56:	e7eb      	b.n	8008e30 <_malloc_r+0xa8>
 8008e58:	4623      	mov	r3, r4
 8008e5a:	6864      	ldr	r4, [r4, #4]
 8008e5c:	e7ae      	b.n	8008dbc <_malloc_r+0x34>
 8008e5e:	463c      	mov	r4, r7
 8008e60:	687f      	ldr	r7, [r7, #4]
 8008e62:	e7b6      	b.n	8008dd2 <_malloc_r+0x4a>
 8008e64:	461a      	mov	r2, r3
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	42a3      	cmp	r3, r4
 8008e6a:	d1fb      	bne.n	8008e64 <_malloc_r+0xdc>
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	6053      	str	r3, [r2, #4]
 8008e70:	e7de      	b.n	8008e30 <_malloc_r+0xa8>
 8008e72:	230c      	movs	r3, #12
 8008e74:	6033      	str	r3, [r6, #0]
 8008e76:	4630      	mov	r0, r6
 8008e78:	f000 f80c 	bl	8008e94 <__malloc_unlock>
 8008e7c:	e794      	b.n	8008da8 <_malloc_r+0x20>
 8008e7e:	6005      	str	r5, [r0, #0]
 8008e80:	e7d6      	b.n	8008e30 <_malloc_r+0xa8>
 8008e82:	bf00      	nop
 8008e84:	200002fc 	.word	0x200002fc

08008e88 <__malloc_lock>:
 8008e88:	4801      	ldr	r0, [pc, #4]	@ (8008e90 <__malloc_lock+0x8>)
 8008e8a:	f000 b84b 	b.w	8008f24 <__retarget_lock_acquire_recursive>
 8008e8e:	bf00      	nop
 8008e90:	2000043c 	.word	0x2000043c

08008e94 <__malloc_unlock>:
 8008e94:	4801      	ldr	r0, [pc, #4]	@ (8008e9c <__malloc_unlock+0x8>)
 8008e96:	f000 b846 	b.w	8008f26 <__retarget_lock_release_recursive>
 8008e9a:	bf00      	nop
 8008e9c:	2000043c 	.word	0x2000043c

08008ea0 <memset>:
 8008ea0:	4402      	add	r2, r0
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d100      	bne.n	8008eaa <memset+0xa>
 8008ea8:	4770      	bx	lr
 8008eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8008eae:	e7f9      	b.n	8008ea4 <memset+0x4>

08008eb0 <_sbrk_r>:
 8008eb0:	b538      	push	{r3, r4, r5, lr}
 8008eb2:	4d06      	ldr	r5, [pc, #24]	@ (8008ecc <_sbrk_r+0x1c>)
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	4604      	mov	r4, r0
 8008eb8:	4608      	mov	r0, r1
 8008eba:	602b      	str	r3, [r5, #0]
 8008ebc:	f7fa faa6 	bl	800340c <_sbrk>
 8008ec0:	1c43      	adds	r3, r0, #1
 8008ec2:	d102      	bne.n	8008eca <_sbrk_r+0x1a>
 8008ec4:	682b      	ldr	r3, [r5, #0]
 8008ec6:	b103      	cbz	r3, 8008eca <_sbrk_r+0x1a>
 8008ec8:	6023      	str	r3, [r4, #0]
 8008eca:	bd38      	pop	{r3, r4, r5, pc}
 8008ecc:	20000438 	.word	0x20000438

08008ed0 <__errno>:
 8008ed0:	4b01      	ldr	r3, [pc, #4]	@ (8008ed8 <__errno+0x8>)
 8008ed2:	6818      	ldr	r0, [r3, #0]
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	2000003c 	.word	0x2000003c

08008edc <__libc_init_array>:
 8008edc:	b570      	push	{r4, r5, r6, lr}
 8008ede:	4d0d      	ldr	r5, [pc, #52]	@ (8008f14 <__libc_init_array+0x38>)
 8008ee0:	4c0d      	ldr	r4, [pc, #52]	@ (8008f18 <__libc_init_array+0x3c>)
 8008ee2:	1b64      	subs	r4, r4, r5
 8008ee4:	10a4      	asrs	r4, r4, #2
 8008ee6:	2600      	movs	r6, #0
 8008ee8:	42a6      	cmp	r6, r4
 8008eea:	d109      	bne.n	8008f00 <__libc_init_array+0x24>
 8008eec:	4d0b      	ldr	r5, [pc, #44]	@ (8008f1c <__libc_init_array+0x40>)
 8008eee:	4c0c      	ldr	r4, [pc, #48]	@ (8008f20 <__libc_init_array+0x44>)
 8008ef0:	f000 f864 	bl	8008fbc <_init>
 8008ef4:	1b64      	subs	r4, r4, r5
 8008ef6:	10a4      	asrs	r4, r4, #2
 8008ef8:	2600      	movs	r6, #0
 8008efa:	42a6      	cmp	r6, r4
 8008efc:	d105      	bne.n	8008f0a <__libc_init_array+0x2e>
 8008efe:	bd70      	pop	{r4, r5, r6, pc}
 8008f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f04:	4798      	blx	r3
 8008f06:	3601      	adds	r6, #1
 8008f08:	e7ee      	b.n	8008ee8 <__libc_init_array+0xc>
 8008f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f0e:	4798      	blx	r3
 8008f10:	3601      	adds	r6, #1
 8008f12:	e7f2      	b.n	8008efa <__libc_init_array+0x1e>
 8008f14:	08009e84 	.word	0x08009e84
 8008f18:	08009e84 	.word	0x08009e84
 8008f1c:	08009e84 	.word	0x08009e84
 8008f20:	08009e88 	.word	0x08009e88

08008f24 <__retarget_lock_acquire_recursive>:
 8008f24:	4770      	bx	lr

08008f26 <__retarget_lock_release_recursive>:
 8008f26:	4770      	bx	lr

08008f28 <_free_r>:
 8008f28:	b538      	push	{r3, r4, r5, lr}
 8008f2a:	4605      	mov	r5, r0
 8008f2c:	2900      	cmp	r1, #0
 8008f2e:	d041      	beq.n	8008fb4 <_free_r+0x8c>
 8008f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f34:	1f0c      	subs	r4, r1, #4
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	bfb8      	it	lt
 8008f3a:	18e4      	addlt	r4, r4, r3
 8008f3c:	f7ff ffa4 	bl	8008e88 <__malloc_lock>
 8008f40:	4a1d      	ldr	r2, [pc, #116]	@ (8008fb8 <_free_r+0x90>)
 8008f42:	6813      	ldr	r3, [r2, #0]
 8008f44:	b933      	cbnz	r3, 8008f54 <_free_r+0x2c>
 8008f46:	6063      	str	r3, [r4, #4]
 8008f48:	6014      	str	r4, [r2, #0]
 8008f4a:	4628      	mov	r0, r5
 8008f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f50:	f7ff bfa0 	b.w	8008e94 <__malloc_unlock>
 8008f54:	42a3      	cmp	r3, r4
 8008f56:	d908      	bls.n	8008f6a <_free_r+0x42>
 8008f58:	6820      	ldr	r0, [r4, #0]
 8008f5a:	1821      	adds	r1, r4, r0
 8008f5c:	428b      	cmp	r3, r1
 8008f5e:	bf01      	itttt	eq
 8008f60:	6819      	ldreq	r1, [r3, #0]
 8008f62:	685b      	ldreq	r3, [r3, #4]
 8008f64:	1809      	addeq	r1, r1, r0
 8008f66:	6021      	streq	r1, [r4, #0]
 8008f68:	e7ed      	b.n	8008f46 <_free_r+0x1e>
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	b10b      	cbz	r3, 8008f74 <_free_r+0x4c>
 8008f70:	42a3      	cmp	r3, r4
 8008f72:	d9fa      	bls.n	8008f6a <_free_r+0x42>
 8008f74:	6811      	ldr	r1, [r2, #0]
 8008f76:	1850      	adds	r0, r2, r1
 8008f78:	42a0      	cmp	r0, r4
 8008f7a:	d10b      	bne.n	8008f94 <_free_r+0x6c>
 8008f7c:	6820      	ldr	r0, [r4, #0]
 8008f7e:	4401      	add	r1, r0
 8008f80:	1850      	adds	r0, r2, r1
 8008f82:	4283      	cmp	r3, r0
 8008f84:	6011      	str	r1, [r2, #0]
 8008f86:	d1e0      	bne.n	8008f4a <_free_r+0x22>
 8008f88:	6818      	ldr	r0, [r3, #0]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	6053      	str	r3, [r2, #4]
 8008f8e:	4408      	add	r0, r1
 8008f90:	6010      	str	r0, [r2, #0]
 8008f92:	e7da      	b.n	8008f4a <_free_r+0x22>
 8008f94:	d902      	bls.n	8008f9c <_free_r+0x74>
 8008f96:	230c      	movs	r3, #12
 8008f98:	602b      	str	r3, [r5, #0]
 8008f9a:	e7d6      	b.n	8008f4a <_free_r+0x22>
 8008f9c:	6820      	ldr	r0, [r4, #0]
 8008f9e:	1821      	adds	r1, r4, r0
 8008fa0:	428b      	cmp	r3, r1
 8008fa2:	bf04      	itt	eq
 8008fa4:	6819      	ldreq	r1, [r3, #0]
 8008fa6:	685b      	ldreq	r3, [r3, #4]
 8008fa8:	6063      	str	r3, [r4, #4]
 8008faa:	bf04      	itt	eq
 8008fac:	1809      	addeq	r1, r1, r0
 8008fae:	6021      	streq	r1, [r4, #0]
 8008fb0:	6054      	str	r4, [r2, #4]
 8008fb2:	e7ca      	b.n	8008f4a <_free_r+0x22>
 8008fb4:	bd38      	pop	{r3, r4, r5, pc}
 8008fb6:	bf00      	nop
 8008fb8:	200002fc 	.word	0x200002fc

08008fbc <_init>:
 8008fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fbe:	bf00      	nop
 8008fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fc2:	bc08      	pop	{r3}
 8008fc4:	469e      	mov	lr, r3
 8008fc6:	4770      	bx	lr

08008fc8 <_fini>:
 8008fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fca:	bf00      	nop
 8008fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fce:	bc08      	pop	{r3}
 8008fd0:	469e      	mov	lr, r3
 8008fd2:	4770      	bx	lr
